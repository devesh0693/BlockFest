{"ast":null,"code":"// src/pages/MarketplacePage.tsx\n\n// --- Helper Function (Add this inside or import it) ---\n// Converts IPFS URI to HTTPS URL and fetches JSON metadata\nasync function fetchMetadataFromUri(uri) {\n  if (!uri) return null;\n\n  // Convert IPFS URI to an HTTPS gateway URL\n  // Replace 'ipfs.io' with a preferred gateway if needed (e.g., Pinata, Infura)\n  const gatewayUrl = uri.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/');\n  try {\n    var _metadata$image;\n    const response = await fetch(gatewayUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status} for ${gatewayUrl}`);\n    }\n    const metadata = await response.json();\n    // Convert image IPFS URI in metadata as well, if necessary\n    if (metadata !== null && metadata !== void 0 && (_metadata$image = metadata.image) !== null && _metadata$image !== void 0 && _metadata$image.startsWith('ipfs://')) {\n      metadata.image = metadata.image.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/');\n    }\n    return metadata;\n  } catch (error) {\n    console.error(`Failed to fetch or parse metadata from ${gatewayUrl}:`, error);\n    return null;\n  }\n}\nexport default fetchMetadataFromUri;\n// -----------------------------------------------------","map":{"version":3,"names":["fetchMetadataFromUri","uri","gatewayUrl","replace","_metadata$image","response","fetch","ok","Error","status","metadata","json","image","startsWith","error","console"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/utils/metadata.ts"],"sourcesContent":["// src/pages/MarketplacePage.tsx\r\n\r\n// --- Helper Function (Add this inside or import it) ---\r\n// Converts IPFS URI to HTTPS URL and fetches JSON metadata\r\nasync function fetchMetadataFromUri(uri: string | null): Promise<any | null> {\r\n    if (!uri) return null;\r\n\r\n    // Convert IPFS URI to an HTTPS gateway URL\r\n    // Replace 'ipfs.io' with a preferred gateway if needed (e.g., Pinata, Infura)\r\n    const gatewayUrl = uri.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/');\r\n\r\n    try {\r\n        const response = await fetch(gatewayUrl);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status} for ${gatewayUrl}`);\r\n        }\r\n        const metadata = await response.json();\r\n        // Convert image IPFS URI in metadata as well, if necessary\r\n        if (metadata?.image?.startsWith('ipfs://')) {\r\n            metadata.image = metadata.image.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/');\r\n        }\r\n        return metadata;\r\n    } catch (error) {\r\n        console.error(`Failed to fetch or parse metadata from ${gatewayUrl}:`, error);\r\n        return null;\r\n    }\r\n}export default fetchMetadataFromUri;\r\n// -----------------------------------------------------"],"mappings":"AAAA;;AAEA;AACA;AACA,eAAeA,oBAAoBA,CAACC,GAAkB,EAAuB;EACzE,IAAI,CAACA,GAAG,EAAE,OAAO,IAAI;;EAErB;EACA;EACA,MAAMC,UAAU,GAAGD,GAAG,CAACE,OAAO,CAAC,YAAY,EAAE,uBAAuB,CAAC;EAErE,IAAI;IAAA,IAAAC,eAAA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,UAAU,CAAC;IACxC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,QAAQP,UAAU,EAAE,CAAC;IAC/E;IACA,MAAMQ,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACtC;IACA,IAAID,QAAQ,aAARA,QAAQ,gBAAAN,eAAA,GAARM,QAAQ,CAAEE,KAAK,cAAAR,eAAA,eAAfA,eAAA,CAAiBS,UAAU,CAAC,SAAS,CAAC,EAAE;MACxCH,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAACT,OAAO,CAAC,YAAY,EAAE,uBAAuB,CAAC;IAClF;IACA,OAAOO,QAAQ;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0CAA0CZ,UAAU,GAAG,EAAEY,KAAK,CAAC;IAC7E,OAAO,IAAI;EACf;AACJ;AAAC,eAAed,oBAAoB;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}