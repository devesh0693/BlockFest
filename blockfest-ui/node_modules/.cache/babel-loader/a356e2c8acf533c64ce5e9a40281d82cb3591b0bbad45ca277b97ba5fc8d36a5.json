{"ast":null,"code":"var _s = $RefreshSig$();\n// src/firebase/auth.ts\nimport { signInWithPopup, GoogleAuthProvider, FacebookAuthProvider,\n// Note: Facebook login requires extra setup on Firebase & Facebook Developer Portal\nsignOut, onAuthStateChanged,\n// Import User type\nsignInWithEmailAndPassword, createUserWithEmailAndPassword, getIdTokenResult // To get custom claims\n} from \"firebase/auth\";\nimport { authClient } from \"./config\"; // Use the configured client auth instance\n\nconst googleProvider = new GoogleAuthProvider();\nconst facebookProvider = new FacebookAuthProvider();\n\n// --- Sign-in Functions ---\n\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(authClient, googleProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Google Sign-in Error:\", error);\n    // Handle specific errors like popup closed, account exists with different credential, etc.\n    throw new Error(error.message || \"Google Sign-in failed.\");\n  }\n};\nexport const signInWithFacebook = async () => {\n  try {\n    // TODO: Ensure Facebook Login is properly configured in Firebase Console and Facebook Developer Portal\n    const result = await signInWithPopup(authClient, facebookProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Facebook Sign-in Error:\", error);\n    // Handle common errors\n    if (error.code === 'auth/account-exists-with-different-credential') {\n      throw new Error('An account already exists with the same email address using a different sign-in method.');\n    }\n    throw new Error(error.message || \"Facebook Sign-in failed.\");\n  }\n};\nexport const signInWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(authClient, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Email Sign-in Error:\", error);\n    // Handle specific errors like wrong password, user not found\n    throw new Error(error.message || \"Email Sign-in failed.\");\n  }\n};\nexport const registerWithEmail = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(authClient, email, password);\n    // Optionally send verification email here: await sendEmailVerification(userCredential.user);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Email Registration Error:\", error);\n    // Handle errors like email already in use, weak password\n    throw new Error(error.message || \"Email Registration failed.\");\n  }\n};\n\n// --- Sign-out Function ---\n\nexport const signOutUser = async () => {\n  try {\n    await signOut(authClient);\n  } catch (error) {\n    console.error(\"Sign Out Error:\", error);\n    throw new Error(error.message || \"Sign Out failed.\");\n  }\n};\n\n// --- Auth State Listener ---\n\nexport const listenToAuthChanges = callback => {\n  // Returns the unsubscribe function\n  return onAuthStateChanged(authClient, callback);\n};\n\n// --- Get ID Token (for Backend Auth) ---\n\nexport const getCurrentUserIdToken = async () => {\n  try {\n    const user = authClient.currentUser;\n    if (!user) {\n      console.log('No user is currently logged in');\n      return null;\n    }\n\n    // Get the ID token\n    const token = await user.getIdToken();\n    console.log('Got Firebase token:', token.substring(0, 20) + '...'); // Log only first part for security\n    return token;\n  } catch (error) {\n    console.error('Error getting Firebase token:', error);\n    return null;\n  }\n};\n\n// --- Check Admin Claim ---\nexport const checkAdminStatus = async () => {\n  if (!authClient.currentUser) {\n    return false;\n  }\n  try {\n    const idTokenResult = await getIdTokenResult(authClient.currentUser);\n    return idTokenResult.claims.admin === true;\n  } catch (error) {\n    console.error(\"Error getting ID token result/claims:\", error);\n    return false;\n  }\n};\n\n// --- Auth State Management ---\nexport const useAuth = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(authClient, user => {\n      setUser(user);\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    loading\n  };\n};\n_s(useAuth, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");","map":{"version":3,"names":["signInWithPopup","GoogleAuthProvider","FacebookAuthProvider","signOut","onAuthStateChanged","signInWithEmailAndPassword","createUserWithEmailAndPassword","getIdTokenResult","authClient","googleProvider","facebookProvider","signInWithGoogle","result","user","error","console","Error","message","signInWithFacebook","code","signInWithEmail","email","password","userCredential","registerWithEmail","signOutUser","listenToAuthChanges","callback","getCurrentUserIdToken","currentUser","log","token","getIdToken","substring","checkAdminStatus","idTokenResult","claims","admin","useAuth","_s","setUser","useState","loading","setLoading","useEffect","unsubscribe"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/firebase/auth.ts"],"sourcesContent":["// src/firebase/auth.ts\r\nimport {\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    FacebookAuthProvider, // Note: Facebook login requires extra setup on Firebase & Facebook Developer Portal\r\n    signOut,\r\n    onAuthStateChanged,\r\n    User, // Import User type\r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    getIdToken,\r\n    getIdTokenResult // To get custom claims\r\n} from \"firebase/auth\";\r\nimport { authClient } from \"./config\"; // Use the configured client auth instance\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\nconst facebookProvider = new FacebookAuthProvider();\r\n\r\n// --- Sign-in Functions ---\r\n\r\nexport const signInWithGoogle = async (): Promise<User | null> => {\r\n    try {\r\n        const result = await signInWithPopup(authClient, googleProvider);\r\n        return result.user;\r\n    } catch (error: any) {\r\n        console.error(\"Google Sign-in Error:\", error);\r\n        // Handle specific errors like popup closed, account exists with different credential, etc.\r\n        throw new Error(error.message || \"Google Sign-in failed.\");\r\n    }\r\n};\r\n\r\nexport const signInWithFacebook = async (): Promise<User | null> => {\r\n    try {\r\n        // TODO: Ensure Facebook Login is properly configured in Firebase Console and Facebook Developer Portal\r\n        const result = await signInWithPopup(authClient, facebookProvider);\r\n        return result.user;\r\n    } catch (error: any) {\r\n        console.error(\"Facebook Sign-in Error:\", error);\r\n        // Handle common errors\r\n        if (error.code === 'auth/account-exists-with-different-credential') {\r\n             throw new Error('An account already exists with the same email address using a different sign-in method.');\r\n        }\r\n        throw new Error(error.message || \"Facebook Sign-in failed.\");\r\n    }\r\n};\r\n\r\nexport const signInWithEmail = async (email: string, password: string): Promise<User | null> => {\r\n     try {\r\n        const userCredential = await signInWithEmailAndPassword(authClient, email, password);\r\n        return userCredential.user;\r\n    } catch (error: any) {\r\n        console.error(\"Email Sign-in Error:\", error);\r\n         // Handle specific errors like wrong password, user not found\r\n        throw new Error(error.message || \"Email Sign-in failed.\");\r\n    }\r\n}\r\n\r\nexport const registerWithEmail = async (email: string, password: string): Promise<User | null> => {\r\n     try {\r\n        const userCredential = await createUserWithEmailAndPassword(authClient, email, password);\r\n        // Optionally send verification email here: await sendEmailVerification(userCredential.user);\r\n        return userCredential.user;\r\n    } catch (error: any) {\r\n        console.error(\"Email Registration Error:\", error);\r\n        // Handle errors like email already in use, weak password\r\n        throw new Error(error.message || \"Email Registration failed.\");\r\n    }\r\n}\r\n\r\n// --- Sign-out Function ---\r\n\r\nexport const signOutUser = async (): Promise<void> => {\r\n    try {\r\n        await signOut(authClient);\r\n    } catch (error: any) {\r\n        console.error(\"Sign Out Error:\", error);\r\n        throw new Error(error.message || \"Sign Out failed.\");\r\n    }\r\n};\r\n\r\n// --- Auth State Listener ---\r\n\r\nexport const listenToAuthChanges = (callback: (user: User | null) => void) => {\r\n    // Returns the unsubscribe function\r\n    return onAuthStateChanged(authClient, callback);\r\n};\r\n\r\n// --- Get ID Token (for Backend Auth) ---\r\n\r\nexport const getCurrentUserIdToken = async (): Promise<string | null> => {\r\n    try {\r\n        const user = authClient.currentUser;\r\n        if (!user) {\r\n            console.log('No user is currently logged in');\r\n            return null;\r\n        }\r\n        \r\n        // Get the ID token\r\n        const token = await user.getIdToken();\r\n        console.log('Got Firebase token:', token.substring(0, 20) + '...'); // Log only first part for security\r\n        return token;\r\n    } catch (error: any) {\r\n        console.error('Error getting Firebase token:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// --- Check Admin Claim ---\r\nexport const checkAdminStatus = async (): Promise<boolean> => {\r\n    if (!authClient.currentUser) {\r\n        return false;\r\n    }\r\n    try {\r\n        const idTokenResult = await getIdTokenResult(authClient.currentUser);\r\n        return idTokenResult.claims.admin === true;\r\n    } catch (error) {\r\n        console.error(\"Error getting ID token result/claims:\", error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// --- Auth State Management ---\r\nexport const useAuth = () => {\r\n    const [user, setUser] = useState<User | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(authClient, (user) => {\r\n            setUser(user);\r\n            setLoading(false);\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    return { user, loading };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}