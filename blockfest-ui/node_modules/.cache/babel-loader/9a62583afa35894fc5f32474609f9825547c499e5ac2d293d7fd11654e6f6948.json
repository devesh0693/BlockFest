{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\n\n// formatEther is used by blockchain.ts, parseEther for sending tx\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport { buyTicket as buyTicketUtil, getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails } from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst availableTicketMetadataCIDs = {\n  0: \"bafkreifkrvwbi3hlxcii7uwsaunx73mdcy34jjx7nitrhfgag2vudg5ujm\",\n  1: \"bafkreifpncyhhgrna7iletoaquzn2dgnesz5xvim6ygqizldimw2bud6pm\",\n  2: \"bafkreigrghfwlh3dhm4a6imin2jzkwg7qjwqza2r5dymocfjn77hyrztmi\",\n  3: \"bafkreibqxwclnkhlkjc3fvlco7tecujwdjiohayilfywxaeoqeeuazquzi\",\n  4: \"bafkreieqkoa2lp36wdljvyztz2gi33n7kcsrnfp5ybu3cs3mrgoeq5pavm\",\n  5: \"bafkreidf3ahogkojhoe57e6wlwb3prmetqeoqmfty2lymkchc2mwsuftsu\",\n  6: \"bafkreidecmmrdujzb45oe7jgf7d76ndtpmhwncimo7ez3afbiccv7342ju\"\n};\nconst preloadImage = src => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => resolve();\n    img.onerror = () => reject();\n  });\n};\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    user,\n    loading\n  } = useAuth();\n  const {\n    walletAddress,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const {\n    isVIP,\n    checkingVIP,\n    checkVIPStatus\n  } = useVIP();\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [dataInitialized, setDataInitialized] = useState(false);\n  const [eventPrice, setEventPrice] = useState(null);\n  const lastFetchTimeRef = useRef(0);\n\n  // Preload images - moved inside the component\n  useEffect(() => {\n    const imageCIDs = [\"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\", \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\", \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\", \"bafybeiarmcnke3q4t5tfo765rj7keylgmcu4oipag5lnugfrp4usdopyne\", \"bafybeiez6wvn5gjta3fkzvv65oldoevxbidmgt2v7a4fioupf34mnxzxuy\", \"bafybeie2dqx7sizq7wi4nkwikvaluhokmfnmwcqsidvtt45nvxbzautt2i\", \"bafybeidiruone3wadolwzvzm4hgrkvyddqrqoy73pd7c6y2hensxjzrarq\"];\n    const preload = async () => {\n      const urls = imageCIDs.map(cid => `https://ipfs.io/ipfs/${cid}`);\n      await Promise.allSettled(urls.map(preloadImage));\n      console.log(\"All images preloaded.\");\n    };\n    preload();\n  }, []);\n\n  // Fetch price only once on mount\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const details = await getEventDetails();\n        if (details) {\n          // CORRECTED: Use the already formatted strings directly\n          setEventPrice({\n            insider: details.ticketPriceInsider,\n            outsider: details.ticketPriceOutsider\n          });\n        } else {\n          console.warn(\"Ticket price not found in event details.\");\n          toast.error(\"Could not determine event price.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        // The error message in the toast was \"Could not load event details.\"\n        // The console error includes the specific TypeError.\n        // If the error persists after this fix, the original error is likely within getEventDetails itself.\n        toast.error(`Failed to load event details. Check console for specifics.`);\n      }\n    };\n    fetchPrice();\n  }, []); // Empty dependency array means this runs once on component mount\n\n  // Fetch owned tickets with rate limiting\n  const fetchOwnedTickets = useCallback(async (force = false) => {\n    if (!walletAddress) return;\n    const now = Date.now();\n    if (!force && now - lastFetchTimeRef.current < 3000) {\n      console.log(\"Skipping fetch due to rate limit\");\n      return;\n    }\n    console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n    lastFetchTimeRef.current = now;\n    try {\n      console.log(\"Calling getMyTicketsUtil...\");\n      const ownedIds = await getMyTicketsUtil(walletAddress);\n      console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n      if (!ownedIds || ownedIds.length === 0) {\n        console.log(\"No owned tickets found, clearing owned tickets state\");\n        setOwnedTickets([]);\n        return;\n      }\n      const ticketsData = ownedIds.map(id => {\n        const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n        const eventName = eventNames[id % eventNames.length];\n        const seatNumber = `Seat-${id}`;\n        const cid = availableTicketMetadataCIDs[id]; // This might need adjustment based on actual ID scheme\n        const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n        const price = eventPrice ? eventPrice.outsider : '0.001'; // Default or fallback price\n        return {\n          id,\n          eventName,\n          price,\n          seatNumber,\n          qrValue: `qr-${id}-${Date.now()}`,\n          imageUrl\n        };\n      });\n      console.log(\"Setting owned tickets:\", ticketsData);\n      setOwnedTickets(ticketsData);\n      setDataInitialized(true);\n    } catch (error) {\n      console.error(\"Failed to fetch owned tickets:\", error);\n      toast.error(\"Could not load your owned tickets. Please try again.\");\n    }\n  }, [walletAddress, eventPrice]); // Added eventPrice as a dependency if it's used to determine display price of owned tickets\n\n  // Initial fetch and periodic refresh\n  useEffect(() => {\n    if (walletAddress) {\n      fetchOwnedTickets(true);\n      const refreshInterval = setInterval(() => {\n        console.log(\"Periodic refresh of owned tickets\");\n        fetchOwnedTickets(false);\n      }, 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [walletAddress, fetchOwnedTickets]);\n\n  // Fetch available tickets when dependencies change\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      if (!walletAddress || !eventPrice) return;\n      try {\n        console.log(\"Fetching available tickets...\");\n        const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n          id: parseInt(id),\n          cid: cid\n        }));\n        console.log(\"Processing available tickets:\", availableTicketsData);\n        const availableDetailsPromises = availableTicketsData.map(async ({\n          id,\n          cid\n        }) => {\n          try {\n            var _metadata$attributes, _metadata$attributes$, _metadata$image;\n            const uri = `ipfs://${cid}`;\n            console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n            const metadata = await fetchMetadataFromUri(uri);\n            if (!metadata) {\n              console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n              return null;\n            }\n            const price = isVIP ? eventPrice.insider : eventPrice.outsider;\n            const ticketData = {\n              id,\n              eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n              price,\n              seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n              qrValue: `qr-${id}`,\n              imageUrl: (metadata === null || metadata === void 0 ? void 0 : (_metadata$image = metadata.image) === null || _metadata$image === void 0 ? void 0 : _metadata$image.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/')) || undefined,\n              metadata\n            };\n            console.log(`Processed ticket ${id}:`, ticketData);\n            return ticketData;\n          } catch (detailError) {\n            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n            return null;\n          }\n        });\n        const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n        console.log(\"Final available tickets:\", resolvedDetails);\n        setAvailableTickets(resolvedDetails);\n      } catch (error) {\n        console.error(\"Failed to fetch available tickets:\", error);\n        toast.error(\"Could not load available tickets. Please try again.\");\n      }\n    };\n    fetchAvailable();\n  }, [walletAddress, eventPrice, isVIP]); // Added isVIP\n\n  const handleVIPVerification = async (name, rollNumber) => {\n    try {\n      await checkVIPStatus(name, rollNumber);\n      // After successful verification, refresh marketplace data\n      await fetchOwnedTickets(true); // Force fetch owned tickets\n      const fetchAvailable = async () => {\n        if (!walletAddress || !eventPrice) return;\n        try {\n          console.log(\"Fetching available tickets...\");\n          const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n            id: parseInt(id),\n            cid: cid\n          }));\n          console.log(\"Processing available tickets:\", availableTicketsData);\n          const availableDetailsPromises = availableTicketsData.map(async ({\n            id,\n            cid\n          }) => {\n            try {\n              const uri = `ipfs://${cid}`;\n              const metadata = await fetchMetadataFromUri(uri);\n              const eventName = metadata.name || `Event ${id}`;\n              const price = eventPrice.insider; // Use insider price for available tickets\n              const seatNumber = `Seat-${id}`;\n              return {\n                id,\n                eventName,\n                price,\n                seatNumber,\n                qrValue: `qr-${id}-${Date.now()}`,\n                imageUrl: metadata.image\n              };\n            } catch (detailError) {\n              console.error(`Failed to fetch details for available token ${id}:`, detailError);\n              return null;\n            }\n          });\n          const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n          console.log(\"Final available tickets:\", resolvedDetails);\n          setAvailableTickets(resolvedDetails);\n        } catch (error) {\n          console.error(\"Failed to fetch available tickets:\", error);\n          toast.error(\"Could not load available tickets. Please try again.\");\n        }\n      };\n      await fetchAvailable(); // Fetch available tickets\n    } catch (error) {\n      console.error(\"VIP verification failed:\", error);\n    }\n  };\n  useEffect(() => {\n    if (user && !isVIP && !checkingVIP) {\n      toast.error('VIP verification required. Please verify your VIP status first.');\n    }\n  }, [user, isVIP, checkingVIP]);\n  const handleVIPVerified = useCallback(() => {\n    console.log(\"VIP verified, data will refresh automatically through effects\");\n    // Data refresh is handled by useEffects that depend on `isVIP` or `eventPrice`\n    // If `isVIP` status directly changes `eventPrice` or how tickets are displayed,\n    // the existing `useEffect` for available tickets should re-run.\n    // You might also want to force a refresh of available tickets if their price depends on VIP status\n    // and that price is determined/formatted within `WorkspaceAvailable`.\n  }, []);\n  useEffect(() => {\n    const initializeData = async () => {\n      if (walletAddress && !dataInitialized) {\n        console.log(\"Initializing marketplace data...\");\n        try {\n          // Fetch price first if not already fetched, though the dedicated effect should handle it\n          if (!eventPrice) {\n            const details = await getEventDetails();\n            if (details) {\n              setEventPrice({\n                insider: details.ticketPriceInsider,\n                outsider: details.ticketPriceOutsider\n              });\n            }\n          }\n          await fetchOwnedTickets(true); // force fetch\n          setDataInitialized(true);\n        } catch (error) {\n          console.error(\"Error during initial data load:\", error);\n        }\n      }\n    };\n    initializeData();\n  }, [walletAddress, dataInitialized, fetchOwnedTickets, eventPrice]);\n  const handleBuyTicket = async ticketId => {\n    if (!user) {\n      toast.error('Please log in to buy a ticket.');\n      return;\n    }\n    try {\n      setBuyingTicketId(ticketId);\n      const toastId = `buy-${ticketId}`;\n      toast.loading('Processing ticket purchase...', {\n        id: toastId\n      });\n\n      // Get the ticket from availableTickets\n      const ticket = availableTickets.find(t => t.id === ticketId);\n      if (!ticket || !ticket.metadata) {\n        toast.dismiss(toastId);\n        toast.error('Ticket not found.');\n        setBuyingTicketId(null);\n        return;\n      }\n\n      // Get the wallet address from the context\n      if (!walletAddress) {\n        toast.dismiss(toastId);\n        toast.error('Wallet address not found.');\n        setBuyingTicketId(null);\n        return;\n      }\n\n      // Get the ticket price\n      const ticketPrice = (eventPrice === null || eventPrice === void 0 ? void 0 : eventPrice.outsider) || '0.05'; // Default to 0.05 ETH if not set\n\n      // Generate QR hash\n      const qrHash = `qr-${ticketId}-${Date.now()}`;\n\n      // Call the buy ticket function with recipient as the wallet address\n      const txHash = await buyTicketUtil(ticket.metadata.uri, qrHash, ticketPrice, walletAddress // This is the recipient address\n      );\n      if (txHash) {\n        toast.dismiss(toastId);\n        toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://sepolia.etherscan.io/tx/${txHash}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"underline\",\n            children: \"View Tx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true), {\n          duration: 6000\n        });\n        await fetchOwnedTickets(true);\n      }\n    } catch (error) {\n      console.error('Buy Ticket Failed:', error);\n      toast.dismiss(`buy-${ticketId}`);\n      toast.error(error.message || 'Failed to buy ticket. Please try again.');\n    } finally {\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResellTicket = async tokenId => {\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    setResellingTicketId(tokenId);\n    const toastId = `resell-${tokenId}`;\n    toast.loading('Processing resale...', {\n      id: toastId\n    });\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await fetchOwnedTickets(true);\n    } catch (error) {\n      console.error('Resell Failed:', error);\n      toast.dismiss(toastId);\n      toast.error(error.message || 'Failed to resell ticket. Please try again.');\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // --- Render Logic ---\n  if (!user) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please log in to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 9\n  }, this);\n  if (!walletAddress) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please connect your wallet to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 9\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex flex-col items-center justify-center min-h-[400px] space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-error text-lg animate-fade-in\",\n      children: [\"Wrong Network Detected (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 441,\n    columnNumber: 9\n  }, this);\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP === null) {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }, this);\n  }\n  if (!isVIP && !checkingVIP) {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"VIP Verification Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"container mx-auto px-4 py-8 space-y-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"My Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }, this), loading && ownedTickets.length === 0 ?\n      /*#__PURE__*/\n      // Show skeleton only if loading AND no tickets yet\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(2)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `owned-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }, this) : ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => {},\n          isOwned: true,\n          onResell: handleResellTicket,\n          isReselling: resellingTicketId === ticket.id\n        }, `owned-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-secondary-dark p-6 rounded-lg text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-text-secondary\",\n          children: \"You don't own any tickets yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"Available Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this), loading && availableTickets.length === 0 ?\n      /*#__PURE__*/\n      // Show skeleton only if loading AND no tickets yet\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `available-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 21\n      }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: handleBuyTicket,\n          isOwned: false,\n          isBuying: buyingTicketId === ticket.id\n        }, `available-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tickets currently available for purchase.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"DL3wLBordxO83hqr+Ih4uW8Nghw=\", false, function () {\n  return [useAuth, useWallet, useVIP];\n});\n_c = MarketplacePage;\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","toast","motion","useAuth","useWallet","useVIP","buyTicket","buyTicketUtil","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","availableTicketMetadataCIDs","preloadImage","src","Promise","resolve","reject","img","Image","onload","onerror","MarketplacePage","_s","_networkState$current","user","loading","walletAddress","networkState","switchNetwork","isVIP","checkingVIP","checkVIPStatus","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","dataInitialized","setDataInitialized","eventPrice","setEventPrice","lastFetchTimeRef","imageCIDs","preload","urls","map","cid","allSettled","console","log","fetchPrice","details","insider","ticketPriceInsider","outsider","ticketPriceOutsider","warn","error","fetchOwnedTickets","force","now","Date","current","ownedIds","length","ticketsData","id","eventNames","eventName","seatNumber","imageUrl","undefined","price","qrValue","refreshInterval","setInterval","clearInterval","fetchAvailable","availableTicketsData","Object","entries","parseInt","availableDetailsPromises","_metadata$attributes","_metadata$attributes$","_metadata$image","uri","metadata","ticketData","name","attributes","find","attr","trait_type","value","image","replace","detailError","resolvedDetails","all","filter","Boolean","handleVIPVerification","rollNumber","handleVIPVerified","initializeData","handleBuyTicket","ticketId","toastId","ticket","t","dismiss","ticketPrice","qrHash","txHash","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","message","handleResellTicket","tokenId","isCorrect","setTimeout","div","initial","opacity","animate","currentNetwork","onClick","process","env","REACT_APP_VIP_REQUIRED","onVerified","Array","_","index","onBuy","isOwned","onResell","isReselling","isBuying","_c","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther, parseEther } from 'ethers'; // formatEther is used by blockchain.ts, parseEther for sending tx\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport {\n    buyTicket as buyTicketUtil,\n    getMyTickets as getMyTicketsUtil,\n    resellTicket as resellTicketUtil,\n    getEventDetails,\n    getTokenMetadataURI,\n    getAvailableTickets as getAvailableTicketsUtil\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\ninterface TicketData {\n    id: number;\n    metadata?: {\n        uri: string;\n    };\n    eventName: string;\n    price: string; // Price stored as formatted string (e.g., \"0.05\")\n    seatNumber: string;\n    qrValue: string;\n    imageUrl?: string;\n}\n\ninterface UserWithWallet {\n    walletAddress?: string;\n}\n\nconst availableTicketMetadataCIDs: { [key: number]: string } = {\n    0: \"bafkreifkrvwbi3hlxcii7uwsaunx73mdcy34jjx7nitrhfgag2vudg5ujm\",\n    1: \"bafkreifpncyhhgrna7iletoaquzn2dgnesz5xvim6ygqizldimw2bud6pm\",\n    2: \"bafkreigrghfwlh3dhm4a6imin2jzkwg7qjwqza2r5dymocfjn77hyrztmi\",\n    3: \"bafkreibqxwclnkhlkjc3fvlco7tecujwdjiohayilfywxaeoqeeuazquzi\",\n    4: \"bafkreieqkoa2lp36wdljvyztz2gi33n7kcsrnfp5ybu3cs3mrgoeq5pavm\",\n    5: \"bafkreidf3ahogkojhoe57e6wlwb3prmetqeoqmfty2lymkchc2mwsuftsu\",\n    6: \"bafkreidecmmrdujzb45oe7jgf7d76ndtpmhwncimo7ez3afbiccv7342ju\",\n};\n\nconst preloadImage = (src: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => resolve();\n    img.onerror = () => reject();\n  });\n};\n\nconst MarketplacePage: React.FC = () => {\n    const { user, loading } = useAuth();\n    const { walletAddress, networkState, switchNetwork } = useWallet();\n    const { isVIP, checkingVIP, checkVIPStatus } = useVIP();\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\n    const [buyingTicketId, setBuyingTicketId] = useState<number | null>(null);\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\n    const [dataInitialized, setDataInitialized] = useState(false);\n    const [eventPrice, setEventPrice] = useState<{ insider: string; outsider: string } | null>(null);\n    const lastFetchTimeRef = useRef<number>(0);\n\n    // Preload images - moved inside the component\n    useEffect(() => {\n      const imageCIDs = [\n        \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n        \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n        \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n        \"bafybeiarmcnke3q4t5tfo765rj7keylgmcu4oipag5lnugfrp4usdopyne\",\n        \"bafybeiez6wvn5gjta3fkzvv65oldoevxbidmgt2v7a4fioupf34mnxzxuy\",\n        \"bafybeie2dqx7sizq7wi4nkwikvaluhokmfnmwcqsidvtt45nvxbzautt2i\",\n        \"bafybeidiruone3wadolwzvzm4hgrkvyddqrqoy73pd7c6y2hensxjzrarq\",\n      ];\n    \n      const preload = async () => {\n        const urls = imageCIDs.map(cid => `https://ipfs.io/ipfs/${cid}`);\n        await Promise.allSettled(urls.map(preloadImage));\n        console.log(\"All images preloaded.\");\n      };\n    \n      preload();\n    }, []);\n\n    // Fetch price only once on mount\n    useEffect(() => {\n        const fetchPrice = async () => {\n            try {\n                const details = await getEventDetails();\n                if (details) {\n                    // CORRECTED: Use the already formatted strings directly\n                    setEventPrice({\n                        insider: details.ticketPriceInsider,\n                        outsider: details.ticketPriceOutsider\n                    });\n                } else {\n                    console.warn(\"Ticket price not found in event details.\");\n                    toast.error(\"Could not determine event price.\");\n                }\n            } catch (error) {\n                console.error(\"Failed to fetch event details:\", error);\n                // The error message in the toast was \"Could not load event details.\"\n                // The console error includes the specific TypeError.\n                // If the error persists after this fix, the original error is likely within getEventDetails itself.\n                toast.error(`Failed to load event details. Check console for specifics.`);\n            }\n        };\n        fetchPrice();\n    }, []); // Empty dependency array means this runs once on component mount\n\n    // Fetch owned tickets with rate limiting\n    const fetchOwnedTickets = useCallback(async (force: boolean = false) => {\n        if (!walletAddress) return;\n        \n        const now = Date.now();\n        if (!force && now - lastFetchTimeRef.current < 3000) {\n            console.log(\"Skipping fetch due to rate limit\");\n            return;\n        }\n        \n        console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n        lastFetchTimeRef.current = now;\n        \n        try {\n            console.log(\"Calling getMyTicketsUtil...\");\n            const ownedIds = await getMyTicketsUtil(walletAddress);\n            console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n            \n            if (!ownedIds || ownedIds.length === 0) {\n                console.log(\"No owned tickets found, clearing owned tickets state\");\n                setOwnedTickets([]);\n                return;\n            }\n\n            const ticketsData = ownedIds.map((id: number) => {\n                const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n                const eventName = eventNames[id % eventNames.length];\n                const seatNumber = `Seat-${id}`;\n                const cid = availableTicketMetadataCIDs[id]; // This might need adjustment based on actual ID scheme\n                const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n                const price = eventPrice ? eventPrice.outsider : '0.001'; // Default or fallback price\n                return {\n                    id,\n                    eventName,\n                    price,\n                    seatNumber,\n                    qrValue: `qr-${id}-${Date.now()}`,\n                    imageUrl\n                };\n            });\n\n            console.log(\"Setting owned tickets:\", ticketsData);\n            setOwnedTickets(ticketsData);\n            setDataInitialized(true);\n        } catch (error) {\n            console.error(\"Failed to fetch owned tickets:\", error);\n            toast.error(\"Could not load your owned tickets. Please try again.\");\n        }\n    }, [walletAddress, eventPrice]); // Added eventPrice as a dependency if it's used to determine display price of owned tickets\n\n    // Initial fetch and periodic refresh\n    useEffect(() => {\n        if (walletAddress) {\n            fetchOwnedTickets(true);\n            const refreshInterval = setInterval(() => {\n                console.log(\"Periodic refresh of owned tickets\");\n                fetchOwnedTickets(false);\n            }, 10000); \n            return () => clearInterval(refreshInterval);\n        }\n    }, [walletAddress, fetchOwnedTickets]);\n\n    // Fetch available tickets when dependencies change\n    useEffect(() => {\n        const fetchAvailable = async () => {\n            if (!walletAddress || !eventPrice) return; \n            \n            try {\n                console.log(\"Fetching available tickets...\");\n                \n                const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n                    id: parseInt(id),\n                    cid: cid\n                }));\n\n                console.log(\"Processing available tickets:\", availableTicketsData);\n\n                const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\n                    try {\n                        const uri = `ipfs://${cid}`;\n                        console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n                        const metadata = await fetchMetadataFromUri(uri);\n                        \n                        if (!metadata) {\n                            console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n                            return null;\n                        }\n                        const price = isVIP ? (eventPrice.insider) : (eventPrice.outsider);\n                        const ticketData = {\n                            id,\n                            eventName: metadata?.name || `Ticket ${id}`,\n                            price,\n                            seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\n                            qrValue: `qr-${id}`,\n                            imageUrl: metadata?.image?.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/') || undefined,\n                            metadata\n                        };\n                        console.log(`Processed ticket ${id}:`, ticketData);\n                        return ticketData;\n                    } catch (detailError) {\n                        console.error(`Failed to fetch details for available token ${id}:`, detailError);\n                        return null;\n                    }\n                });\n\n                const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\n                console.log(\"Final available tickets:\", resolvedDetails);\n                setAvailableTickets(resolvedDetails);\n                \n            } catch (error) {\n                console.error(\"Failed to fetch available tickets:\", error);\n                toast.error(\"Could not load available tickets. Please try again.\");\n            }\n        };\n\n        fetchAvailable();\n    }, [walletAddress, eventPrice, isVIP]); // Added isVIP\n\n    const handleVIPVerification = async (name: string, rollNumber: string) => {\n        try {\n            await checkVIPStatus(name, rollNumber);\n            // After successful verification, refresh marketplace data\n            await fetchOwnedTickets(true); // Force fetch owned tickets\n            const fetchAvailable = async () => {\n                if (!walletAddress || !eventPrice) return;\n                \n                try {\n                    console.log(\"Fetching available tickets...\");\n                    \n                    const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n                        id: parseInt(id),\n                        cid: cid\n                    }));\n\n                    console.log(\"Processing available tickets:\", availableTicketsData);\n\n                    const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\n                        try {\n                            const uri = `ipfs://${cid}`;\n                            const metadata = await fetchMetadataFromUri(uri);\n                            const eventName = metadata.name || `Event ${id}`;\n                            const price = eventPrice.insider; // Use insider price for available tickets\n                            const seatNumber = `Seat-${id}`;\n                            \n                            return {\n                                id,\n                                eventName,\n                                price,\n                                seatNumber,\n                                qrValue: `qr-${id}-${Date.now()}`,\n                                imageUrl: metadata.image\n                            };\n                        } catch (detailError) {\n                            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n                            return null;\n                        }\n                    });\n\n                    const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\n                    console.log(\"Final available tickets:\", resolvedDetails);\n                    setAvailableTickets(resolvedDetails);\n                    \n                } catch (error) {\n                    console.error(\"Failed to fetch available tickets:\", error);\n                    toast.error(\"Could not load available tickets. Please try again.\");\n                }\n            };\n            await fetchAvailable(); // Fetch available tickets\n        } catch (error) {\n            console.error(\"VIP verification failed:\", error);\n        }\n    };\n\n    useEffect(() => {\n        if (user && !isVIP && !checkingVIP) {\n            toast.error('VIP verification required. Please verify your VIP status first.');\n        }\n    }, [user, isVIP, checkingVIP]);\n\n    const handleVIPVerified = useCallback(() => {\n        console.log(\"VIP verified, data will refresh automatically through effects\");\n        // Data refresh is handled by useEffects that depend on `isVIP` or `eventPrice`\n        // If `isVIP` status directly changes `eventPrice` or how tickets are displayed,\n        // the existing `useEffect` for available tickets should re-run.\n        // You might also want to force a refresh of available tickets if their price depends on VIP status\n        // and that price is determined/formatted within `WorkspaceAvailable`.\n    }, []);\n\n    useEffect(() => {\n        const initializeData = async () => {\n            if (walletAddress && !dataInitialized) {\n                console.log(\"Initializing marketplace data...\");\n                try {\n                    // Fetch price first if not already fetched, though the dedicated effect should handle it\n                    if (!eventPrice) {\n                         const details = await getEventDetails();\n                         if (details) {\n                            setEventPrice({\n                                insider: details.ticketPriceInsider,\n                                outsider: details.ticketPriceOutsider\n                            });\n                         }\n                    }\n                    await fetchOwnedTickets(true); // force fetch\n                    setDataInitialized(true);\n                } catch (error) {\n                     console.error(\"Error during initial data load:\", error);\n                }\n            }\n        };\n\n        initializeData();\n    }, [walletAddress, dataInitialized, fetchOwnedTickets, eventPrice]);\n\n    const handleBuyTicket = async (ticketId: number) => {\n        if (!user) {\n            toast.error('Please log in to buy a ticket.');\n            return;\n        }\n\n        try {\n            setBuyingTicketId(ticketId);\n            const toastId = `buy-${ticketId}`;\n            toast.loading('Processing ticket purchase...', { id: toastId });\n\n            // Get the ticket from availableTickets\n            const ticket = availableTickets.find(t => t.id === ticketId);\n            if (!ticket || !ticket.metadata) {\n                toast.dismiss(toastId);\n                toast.error('Ticket not found.');\n                setBuyingTicketId(null);\n                return;\n            }\n\n            // Get the wallet address from the context\n            if (!walletAddress) {\n                toast.dismiss(toastId);\n                toast.error('Wallet address not found.');\n                setBuyingTicketId(null);\n                return;\n            }\n\n            // Get the ticket price\n            const ticketPrice = eventPrice?.outsider || '0.05'; // Default to 0.05 ETH if not set\n            \n            // Generate QR hash\n            const qrHash = `qr-${ticketId}-${Date.now()}`;\n            \n            // Call the buy ticket function with recipient as the wallet address\n            const txHash = await buyTicketUtil(\n                ticket.metadata.uri,\n                qrHash,\n                ticketPrice,\n                walletAddress // This is the recipient address\n            );\n\n            if (txHash) {\n                toast.dismiss(toastId);\n                toast.success(\n                    <>\n                        Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                    </>,\n                    { duration: 6000 }\n                );\n                await fetchOwnedTickets(true);\n            }\n        } catch (error: any) {\n            console.error('Buy Ticket Failed:', error);\n            toast.dismiss(`buy-${ticketId}`);\n            toast.error(error.message || 'Failed to buy ticket. Please try again.');\n        } finally {\n            setBuyingTicketId(null);\n        }\n    };\n\n    const handleResellTicket = async (tokenId: number) => {\n        if (!networkState?.isCorrect) {\n            toast.error('Incorrect network. Please switch.');\n            await switchNetwork();\n            return;\n        }\n\n        setResellingTicketId(tokenId);\n        const toastId = `resell-${tokenId}`;\n        toast.loading('Processing resale...', { id: toastId });\n        try {\n            const txHash = await resellTicketUtil(tokenId);\n            toast.success(\n                <>\n                    Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                </>,\n                { id: toastId, duration: 6000 }\n            );\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            await fetchOwnedTickets(true);\n        } catch (error: any) {\n            console.error('Resell Failed:', error);\n            toast.dismiss(toastId);\n            toast.error(error.message || 'Failed to resell ticket. Please try again.');\n        } finally {\n            setResellingTicketId(null);\n        }\n    };\n\n    // --- Render Logic ---\n    if (!user) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please log in to access the marketplace.</p>\n        </motion.div>\n    );\n    if (!walletAddress) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please connect your wallet to access the marketplace.</p>\n        </motion.div>\n    );\n    if (!networkState?.isCorrect) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\n            <p className=\"text-center text-error text-lg animate-fade-in\">\n                Wrong Network Detected ({networkState?.currentNetwork?.name || 'Unknown'}).\n            </p>\n            <GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton>\n        </motion.div>\n    );\n\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP === null) {\n        return (\n            <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"max-w-md mx-auto my-8\"\n            >\n                <VIPVerificationForm onVerified={handleVIPVerified} />\n            </motion.div>\n        );\n    }\n\n    if (!isVIP && !checkingVIP) {\n        return (\n            <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"max-w-md mx-auto my-8\"\n            >\n                <h2 className=\"text-xl font-semibold mb-4\">VIP Verification Required</h2>\n                <VIPVerificationForm onVerified={handleVIPVerification} />\n            </motion.div>\n        );\n    }\n\n    return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"container mx-auto px-4 py-8 space-y-12\">\n            {/* My Tickets Section */}\n            <section>\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\n                {loading && ownedTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {[...Array(2)].map((_, index) => <NFTTicketCardSkeleton key={`owned-skeleton-${index}`} />)}\n                    </div>\n                ) : ownedTickets.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {ownedTickets.map((ticket) => (\n                            <NFTTicketCard\n                                key={`owned-${ticket.id}`}\n                                ticket={ticket}\n                                onBuy={() => {}} \n                                isOwned={true}\n                                onResell={handleResellTicket}\n                                isReselling={resellingTicketId === ticket.id}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"bg-secondary-dark p-6 rounded-lg text-center\">\n                        <p className=\"text-text-secondary\">You don't own any tickets yet.</p>\n                    </div>\n                )}\n            </section>\n\n            {/* Available Tickets Section */}\n            <section>\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\n                {loading && availableTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {[...Array(4)].map((_, index) => <NFTTicketCardSkeleton key={`available-skeleton-${index}`} />)}\n                    </div>\n                ) : availableTickets.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {availableTickets.map((ticket) => (\n                            <NFTTicketCard\n                                key={`available-${ticket.id}`}\n                                ticket={ticket}\n                                onBuy={handleBuyTicket}\n                                isOwned={false}\n                                isBuying={buyingTicketId === ticket.id}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\">\n                        <p>No tickets currently available for purchase.</p>\n                    </div>\n                )}\n            </section>\n        </motion.div>\n    );\n};\n\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}