{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\contexts\\\\VIPContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth, getCurrentUserIdToken } from '../firebase/auth';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VIPContext = /*#__PURE__*/createContext(undefined);\nexport const VIPProvider = ({\n  children\n}) => {\n  _s();\n  const [isVIP, setIsVIP] = useState(null);\n  const [lastVerificationTime, setLastVerificationTime] = useState(0);\n  const [checkingVIP, setCheckingVIP] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const {\n    user\n  } = useAuth();\n  const checkVIPStatus = async (name, rollNumber, walletAddress) => {\n    if (!user) {\n      toast.error(\"Please log in before checking VIP status.\");\n      return false;\n    }\n\n    // Check cooldown\n    const now = Date.now();\n    const cooldownTime = 10000; // 10 seconds in milliseconds\n    if (now - lastVerificationTime < cooldownTime) {\n      const remainingTime = Math.ceil((lastVerificationTime + cooldownTime - now) / 1000);\n      toast.error(`Please wait ${remainingTime} seconds before trying again.`);\n      return false;\n    }\n\n    // First check if we have a valid token\n    const token = await getCurrentUserIdToken();\n    if (!token) {\n      console.error('No valid token found');\n\n      // Try to refresh the token\n      try {\n        const refreshedToken = await user.getIdToken(true); // Force refresh\n        if (refreshedToken) {\n          console.log('Successfully refreshed token');\n        } else {\n          toast.error(\"Failed to refresh token. Please log in again.\");\n          return false;\n        }\n      } catch (error) {\n        console.error('Error refreshing token:', error);\n        toast.error(\"Failed to refresh token. Please log in again.\");\n        return false;\n      }\n    }\n\n    // Only show loading toast if we're actually making the API call\n    const toastId = 'vip-check';\n    toast.loading('Verifying VIP Status...', {\n      id: toastId\n    });\n    try {\n      // Log the data being sent to help with debugging\n      console.log(\"Sending VIP verification with:\", {\n        name,\n        rollNumber,\n        walletAddress\n      });\n      const response = await checkVIPApi(name, rollNumber, walletAddress);\n\n      // Clean up loading toast\n      toast.dismiss(toastId);\n      if (response.isVIP) {\n        // Store the wallet address for this user\n        if (user) {\n          localStorage.setItem(`vip_wallet_${user.uid}`, walletAddress);\n        }\n        setWalletAddress(walletAddress);\n        setIsVIP(true);\n        toast.success('✅ VIP Status Verified!');\n      } else {\n        setIsVIP(false);\n        toast.error(response.message || '❌ Access Denied. Not on VIP list.');\n      }\n\n      // Update last verification time and reset checking state\n      setLastVerificationTime(now);\n      setCheckingVIP(false);\n      return response.isVIP;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response4;\n      // Clean up loading toast on error\n      toast.dismiss(toastId);\n      console.error(\"VIP Check API Error:\", {\n        error,\n        message: error.message,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n      });\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 403) {\n        toast.error('Authentication required. Please try logging in again.');\n      } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 400) {\n        toast.error('Please fill in all required fields: name, roll number, and wallet address.');\n      } else {\n        toast.error(error.message || 'Error checking VIP status. Please try again.');\n      }\n      setIsVIP(false);\n      setCheckingVIP(false);\n      return false;\n    }\n  };\n  const resetVIP = () => {\n    setIsVIP(null);\n    setWalletAddress(null);\n    if (user) {\n      localStorage.removeItem(`vip_wallet_${user.uid}`);\n    }\n  };\n\n  // Only check VIP status when entering marketplace\n  useEffect(() => {\n    if (user && window.location.pathname === '/marketplace') {\n      // Only check VIP status if not already verified\n      if (!isVIP) {\n        toast.error('VIP verification required before accessing marketplace.');\n      }\n    }\n  }, [user, window.location.pathname, isVIP]);\n  const value = {\n    isVIP,\n    checkingVIP,\n    walletAddress,\n    checkVIPStatus,\n    resetVIP\n  };\n  return /*#__PURE__*/_jsxDEV(VIPContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n_s(VIPProvider, \"RN/5XH8DPgf+mrkDKoyk58Be+5E=\", false, function () {\n  return [useAuth];\n});\n_c = VIPProvider;\nexport const useVIP = () => {\n  _s2();\n  const context = useContext(VIPContext);\n  if (context === undefined) {\n    throw new Error('useVIP must be used within a VIPProvider');\n  }\n  return context;\n};\n_s2(useVIP, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"VIPProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","getCurrentUserIdToken","checkVIPApi","toast","jsxDEV","_jsxDEV","VIPContext","undefined","VIPProvider","children","_s","isVIP","setIsVIP","lastVerificationTime","setLastVerificationTime","checkingVIP","setCheckingVIP","walletAddress","setWalletAddress","user","checkVIPStatus","name","rollNumber","error","now","Date","cooldownTime","remainingTime","Math","ceil","token","console","refreshedToken","getIdToken","log","toastId","loading","id","response","dismiss","localStorage","setItem","uid","success","message","_error$response","_error$response2","_error$response3","_error$response4","status","data","resetVIP","removeItem","window","location","pathname","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useVIP","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/contexts/VIPContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth, getCurrentUserIdToken } from '../firebase/auth';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\n\ninterface CheckVIPResponse {\n    isVIP: boolean;\n    walletAddress?: string;\n    message?: string;\n}\n\ninterface VIPContextType {\n    isVIP: boolean | null;\n    checkingVIP: boolean;\n    walletAddress: string | null;\n    checkVIPStatus: (name: string, rollNumber: string, walletAddress: string) => Promise<boolean>;\n    resetVIP: () => void;\n}\n\nconst VIPContext = createContext<VIPContextType | undefined>(undefined);\n\nexport const VIPProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [isVIP, setIsVIP] = useState<boolean | null>(null);\n    const [lastVerificationTime, setLastVerificationTime] = useState<number>(0);\n    const [checkingVIP, setCheckingVIP] = useState<boolean>(false);\n    const [walletAddress, setWalletAddress] = useState<string | null>(null);\n    const { user } = useAuth();\n    \n    const checkVIPStatus = async (name: string, rollNumber: string, walletAddress: string): Promise<boolean> => {\n        if (!user) {\n            toast.error(\"Please log in before checking VIP status.\");\n            return false;\n        }\n\n        // Check cooldown\n        const now = Date.now();\n        const cooldownTime = 10000; // 10 seconds in milliseconds\n        if (now - lastVerificationTime < cooldownTime) {\n            const remainingTime = Math.ceil((lastVerificationTime + cooldownTime - now) / 1000);\n            toast.error(`Please wait ${remainingTime} seconds before trying again.`);\n            return false;\n        }\n\n        // First check if we have a valid token\n        const token = await getCurrentUserIdToken();\n        if (!token) {\n            console.error('No valid token found');\n            \n            // Try to refresh the token\n            try {\n                const refreshedToken = await user.getIdToken(true); // Force refresh\n                if (refreshedToken) {\n                    console.log('Successfully refreshed token');\n                } else {\n                    toast.error(\"Failed to refresh token. Please log in again.\");\n                    return false;\n                }\n            } catch (error) {\n                console.error('Error refreshing token:', error);\n                toast.error(\"Failed to refresh token. Please log in again.\");\n                return false;\n            }\n        }\n\n        // Only show loading toast if we're actually making the API call\n        const toastId = 'vip-check';\n        toast.loading('Verifying VIP Status...', { id: toastId });\n        \n        try {\n            // Log the data being sent to help with debugging\n            console.log(\"Sending VIP verification with:\", {\n                name,\n                rollNumber,\n                walletAddress\n            });\n            \n            const response = await checkVIPApi(name, rollNumber, walletAddress);\n            \n            // Clean up loading toast\n            toast.dismiss(toastId);\n            \n            if (response.isVIP) {\n                // Store the wallet address for this user\n                if (user) {\n                    localStorage.setItem(`vip_wallet_${user.uid}`, walletAddress);\n                }\n                setWalletAddress(walletAddress);\n                setIsVIP(true);\n                toast.success('✅ VIP Status Verified!');\n            } else {\n                setIsVIP(false);\n                toast.error(response.message || '❌ Access Denied. Not on VIP list.');\n            }\n            \n            // Update last verification time and reset checking state\n            setLastVerificationTime(now);\n            setCheckingVIP(false);\n            \n            return response.isVIP;\n        } catch (error: any) {\n            // Clean up loading toast on error\n            toast.dismiss(toastId);\n            console.error(\"VIP Check API Error:\", {\n                error,\n                message: error.message,\n                status: error.response?.status,\n                data: error.response?.data\n            });\n            \n            if (error.response?.status === 403) {\n                toast.error('Authentication required. Please try logging in again.');\n            } else if (error.response?.status === 400) {\n                toast.error('Please fill in all required fields: name, roll number, and wallet address.');\n            } else {\n                toast.error(error.message || 'Error checking VIP status. Please try again.');\n            }\n            \n            setIsVIP(false);\n            setCheckingVIP(false);\n            return false;\n        }\n    };\n\n    const resetVIP = () => {\n        setIsVIP(null);\n        setWalletAddress(null);\n        if (user) {\n            localStorage.removeItem(`vip_wallet_${user.uid}`);\n        }\n    };\n\n    // Only check VIP status when entering marketplace\n    useEffect(() => {\n        if (user && window.location.pathname === '/marketplace') {\n            // Only check VIP status if not already verified\n            if (!isVIP) {\n                toast.error('VIP verification required before accessing marketplace.');\n            }\n        }\n    }, [user, window.location.pathname, isVIP]);\n\n    const value = { isVIP, checkingVIP, walletAddress, checkVIPStatus, resetVIP };\n\n    return (\n        <VIPContext.Provider value={value}>\n            {children}\n        </VIPContext.Provider>\n    );\n};\n\nexport const useVIP = () => {\n    const context = useContext(VIPContext);\n    if (context === undefined) {\n        throw new Error('useVIP must be used within a VIPProvider');\n    }\n    return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}