{"ast":null,"code":"/**\r\n * Converts IPFS URI to HTTPS URL and fetches JSON metadata\r\n * This function handles both IPFS URIs and regular URLs, with improved logging and error handling\r\n */\nexport async function fetchMetadataFromUri(uri) {\n  if (!uri) {\n    console.warn(\"Missing URI\");\n    return null;\n  }\n  let gatewayUrl = uri;\n\n  // Convert IPFS URI to an HTTPS gateway URL if needed\n  if (uri.startsWith('ipfs://')) {\n    const cid = uri.substring(7); // Remove \"ipfs://\"\n    // Using ipfs.io as default gateway - replace with your preferred gateway if needed\n    gatewayUrl = `https://ipfs.io/ipfs/${cid}`;\n    console.log(\"Converting IPFS URI to:\", gatewayUrl);\n  }\n  try {\n    var _metadata$image;\n    console.log(\"Fetching metadata from:\", gatewayUrl);\n    const response = await fetch(gatewayUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status} for ${gatewayUrl}`);\n    }\n    const metadata = await response.json();\n\n    // Also convert image URI within metadata if it's IPFS\n    if (metadata !== null && metadata !== void 0 && (_metadata$image = metadata.image) !== null && _metadata$image !== void 0 && _metadata$image.startsWith('ipfs://')) {\n      const imageCid = metadata.image.substring(7);\n      metadata.image = `https://ipfs.io/ipfs/${imageCid}`;\n      console.log(\"Converting image IPFS URI to:\", metadata.image);\n    }\n    return metadata;\n  } catch (error) {\n    console.error(`Failed to fetch or parse metadata from ${gatewayUrl}:`, error);\n    return null;\n  }\n}\nexport default fetchMetadataFromUri;","map":{"version":3,"names":["fetchMetadataFromUri","uri","console","warn","gatewayUrl","startsWith","cid","substring","log","_metadata$image","response","fetch","ok","Error","status","metadata","json","image","imageCid","error"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/utils/metadata.ts"],"sourcesContent":["/**\r\n * Converts IPFS URI to HTTPS URL and fetches JSON metadata\r\n * This function handles both IPFS URIs and regular URLs, with improved logging and error handling\r\n */\r\nexport async function fetchMetadataFromUri(uri: string | null): Promise<any | null> {\r\n    if (!uri) {\r\n        console.warn(\"Missing URI\");\r\n        return null;\r\n    }\r\n    \r\n    let gatewayUrl = uri;\r\n    \r\n    // Convert IPFS URI to an HTTPS gateway URL if needed\r\n    if (uri.startsWith('ipfs://')) {\r\n        const cid = uri.substring(7); // Remove \"ipfs://\"\r\n        // Using ipfs.io as default gateway - replace with your preferred gateway if needed\r\n        gatewayUrl = `https://ipfs.io/ipfs/${cid}`;\r\n        console.log(\"Converting IPFS URI to:\", gatewayUrl);\r\n    }\r\n    \r\n    try {\r\n        console.log(\"Fetching metadata from:\", gatewayUrl);\r\n        const response = await fetch(gatewayUrl);\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status} for ${gatewayUrl}`);\r\n        }\r\n        \r\n        const metadata = await response.json();\r\n        \r\n        // Also convert image URI within metadata if it's IPFS\r\n        if (metadata?.image?.startsWith('ipfs://')) {\r\n            const imageCid = metadata.image.substring(7);\r\n            metadata.image = `https://ipfs.io/ipfs/${imageCid}`; \r\n            console.log(\"Converting image IPFS URI to:\", metadata.image);\r\n        }\r\n        \r\n        return metadata;\r\n    } catch (error) {\r\n        console.error(`Failed to fetch or parse metadata from ${gatewayUrl}:`, error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default fetchMetadataFromUri;"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,eAAeA,oBAAoBA,CAACC,GAAkB,EAAuB;EAChF,IAAI,CAACA,GAAG,EAAE;IACNC,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;IAC3B,OAAO,IAAI;EACf;EAEA,IAAIC,UAAU,GAAGH,GAAG;;EAEpB;EACA,IAAIA,GAAG,CAACI,UAAU,CAAC,SAAS,CAAC,EAAE;IAC3B,MAAMC,GAAG,GAAGL,GAAG,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B;IACAH,UAAU,GAAG,wBAAwBE,GAAG,EAAE;IAC1CJ,OAAO,CAACM,GAAG,CAAC,yBAAyB,EAAEJ,UAAU,CAAC;EACtD;EAEA,IAAI;IAAA,IAAAK,eAAA;IACAP,OAAO,CAACM,GAAG,CAAC,yBAAyB,EAAEJ,UAAU,CAAC;IAClD,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACP,UAAU,CAAC;IAExC,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,QAAQV,UAAU,EAAE,CAAC;IAC/E;IAEA,MAAMW,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;IAEtC;IACA,IAAID,QAAQ,aAARA,QAAQ,gBAAAN,eAAA,GAARM,QAAQ,CAAEE,KAAK,cAAAR,eAAA,eAAfA,eAAA,CAAiBJ,UAAU,CAAC,SAAS,CAAC,EAAE;MACxC,MAAMa,QAAQ,GAAGH,QAAQ,CAACE,KAAK,CAACV,SAAS,CAAC,CAAC,CAAC;MAC5CQ,QAAQ,CAACE,KAAK,GAAG,wBAAwBC,QAAQ,EAAE;MACnDhB,OAAO,CAACM,GAAG,CAAC,+BAA+B,EAAEO,QAAQ,CAACE,KAAK,CAAC;IAChE;IAEA,OAAOF,QAAQ;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZjB,OAAO,CAACiB,KAAK,CAAC,0CAA0Cf,UAAU,GAAG,EAAEe,KAAK,CAAC;IAC7E,OAAO,IAAI;EACf;AACJ;AAEA,eAAenB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}