{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\n\n// formatEther is used by blockchain.ts, parseEther for sending tx\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport { buyTicket as buyTicketUtil, getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails } from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst availableTicketMetadataCIDs = {\n  0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\n  1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\n  2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\n  3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n  4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n  5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n  6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\"\n};\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    walletAddress,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const {\n    user\n  } = useAuth();\n  const {\n    isVIP\n  } = useVIP();\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [loadingTickets, setLoadingTickets] = useState(true);\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [eventPrice, setEventPrice] = useState(null);\n  const [dataInitialized, setDataInitialized] = useState(false);\n  const lastFetchTimeRef = useRef(0);\n\n  // Fetch price only once on mount\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const details = await getEventDetails();\n        if (details) {\n          // CORRECTED: Use the already formatted strings directly\n          setEventPrice({\n            insider: details.ticketPriceInsider,\n            outsider: details.ticketPriceOutsider\n          });\n        } else {\n          console.warn(\"Ticket price not found in event details.\");\n          toast.error(\"Could not determine event price.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        // The error message in the toast was \"Could not load event details.\"\n        // The console error includes the specific TypeError.\n        // If the error persists after this fix, the original error is likely within getEventDetails itself.\n        toast.error(`Failed to load event details. Check console for specifics.`);\n      }\n    };\n    fetchPrice();\n  }, []); // Empty dependency array means this runs once on component mount\n\n  // Fetch owned tickets with rate limiting\n  const fetchOwnedTickets = useCallback(async (force = false) => {\n    if (!walletAddress) return;\n    const now = Date.now();\n    if (!force && now - lastFetchTimeRef.current < 3000) {\n      console.log(\"Skipping fetch due to rate limit\");\n      return;\n    }\n    console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n    setLoadingTickets(true);\n    lastFetchTimeRef.current = now;\n    try {\n      console.log(\"Calling getMyTicketsUtil...\");\n      const ownedIds = await getMyTicketsUtil(walletAddress);\n      console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n      if (!ownedIds || ownedIds.length === 0) {\n        console.log(\"No owned tickets found, clearing owned tickets state\");\n        setOwnedTickets([]);\n        return;\n      }\n      const ticketsData = ownedIds.map(id => {\n        const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n        const eventName = eventNames[id % eventNames.length];\n        const seatNumber = `Seat-${id}`;\n        const cid = availableTicketMetadataCIDs[id]; // This might need adjustment based on actual ID scheme\n        const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n        const price = eventPrice ? eventPrice.outsider : '0.001'; // Default or fallback price\n        return {\n          id,\n          eventName,\n          price,\n          seatNumber,\n          qrValue: `qr-${id}-${Date.now()}`,\n          imageUrl\n        };\n      });\n      console.log(\"Setting owned tickets:\", ticketsData);\n      setOwnedTickets(ticketsData);\n      setDataInitialized(true);\n    } catch (error) {\n      console.error(\"Failed to fetch owned tickets:\", error);\n      toast.error(\"Could not load your owned tickets. Please try again.\");\n    } finally {\n      setLoadingTickets(false);\n    }\n  }, [walletAddress, eventPrice]); // Added eventPrice as a dependency if it's used to determine display price of owned tickets\n\n  // Initial fetch and periodic refresh\n  useEffect(() => {\n    if (walletAddress) {\n      fetchOwnedTickets(true);\n      const refreshInterval = setInterval(() => {\n        console.log(\"Periodic refresh of owned tickets\");\n        fetchOwnedTickets(false);\n      }, 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [walletAddress, fetchOwnedTickets]);\n\n  // Fetch available tickets when dependencies change\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      if (!walletAddress || !eventPrice) return;\n      try {\n        setLoadingTickets(true);\n        console.log(\"Fetching available tickets...\");\n        const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n          id: parseInt(id),\n          cid: cid\n        }));\n        console.log(\"Processing available tickets:\", availableTicketsData);\n        const availableDetailsPromises = availableTicketsData.map(async ({\n          id,\n          cid\n        }) => {\n          try {\n            var _metadata$attributes, _metadata$attributes$, _metadata$image;\n            const uri = `ipfs://${cid}`;\n            console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n            const metadata = await fetchMetadataFromUri(uri);\n            if (!metadata) {\n              console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n              return null;\n            }\n            const price = isVIP ? eventPrice.insider : eventPrice.outsider;\n            const ticketData = {\n              id,\n              eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n              price,\n              seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n              qrValue: `qr-${id}`,\n              imageUrl: (metadata === null || metadata === void 0 ? void 0 : (_metadata$image = metadata.image) === null || _metadata$image === void 0 ? void 0 : _metadata$image.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/')) || undefined,\n              metadata\n            };\n            console.log(`Processed ticket ${id}:`, ticketData);\n            return ticketData;\n          } catch (detailError) {\n            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n            return null;\n          }\n        });\n        const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n        console.log(\"Final available tickets:\", resolvedDetails);\n        setAvailableTickets(resolvedDetails);\n      } catch (error) {\n        console.error(\"Failed to fetch available tickets:\", error);\n        toast.error(\"Could not load available tickets. Please try again.\");\n      } finally {\n        setLoadingTickets(false);\n      }\n    };\n    fetchAvailable();\n  }, [walletAddress, eventPrice, isVIP]); // Added isVIP\n\n  const handleVIPVerified = useCallback(() => {\n    console.log(\"VIP verified, data will refresh automatically through effects\");\n    // Data refresh is handled by useEffects that depend on `isVIP` or `eventPrice`\n    // If `isVIP` status directly changes `eventPrice` or how tickets are displayed,\n    // the existing `useEffect` for available tickets should re-run.\n    // You might also want to force a refresh of available tickets if their price depends on VIP status\n    // and that price is determined/formatted within `WorkspaceAvailable`.\n  }, []);\n  useEffect(() => {\n    const initializeData = async () => {\n      if (walletAddress && !dataInitialized) {\n        console.log(\"Initializing marketplace data...\");\n        setLoadingTickets(true);\n        try {\n          // Fetch price first if not already fetched, though the dedicated effect should handle it\n          if (!eventPrice) {\n            const details = await getEventDetails();\n            if (details) {\n              setEventPrice({\n                insider: details.ticketPriceInsider,\n                outsider: details.ticketPriceOutsider\n              });\n            }\n          }\n          await fetchOwnedTickets(true); // force fetch\n          setDataInitialized(true);\n        } catch (error) {\n          console.error(\"Error during initial data load:\", error);\n        } finally {\n          setLoadingTickets(false);\n        }\n      }\n    };\n    initializeData();\n  }, [walletAddress, dataInitialized, fetchOwnedTickets, eventPrice]);\n  const handleBuyTicket = async ticketId => {\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\n    if (!eventPrice) return toast.error('Event price is not available. Please wait or refresh.');\n    const isInsider = isVIP === true;\n    const ownedTicketCount = ownedTickets.length;\n    if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n      return toast.error(\"VIP members are limited to 1 ticket.\");\n    }\n    setBuyingTicketId(ticketId);\n    const toastId = `buy-${ticketId}`;\n    toast.loading('Processing transaction...', {\n      id: toastId\n    });\n    try {\n      // The 'ticketId' for buying from available tickets is used for metadata lookup (URI)\n      // The actual token ID might be different if your contract mints sequentially.\n      // For this example, we'll assume ticketId from 'availableTicketMetadataCIDs' is what we need for URI.\n      // The QR hash also needs to be determined or generated.\n      // The `buyTicketUtil` expects `tokenURI` and `qrHash`.\n\n      const selectedAvailableTicket = availableTickets.find(t => t.id === ticketId);\n      if (!selectedAvailableTicket || !selectedAvailableTicket.metadata) {\n        toast.error('Ticket metadata not found.', {\n          id: toastId\n        });\n        setBuyingTicketId(null);\n        return;\n      }\n\n      // Assuming the CID used to fetch metadata is the tokenURI for minting.\n      // The key of availableTicketMetadataCIDs (which became selectedAvailableTicket.id)\n      // is used to find the CID.\n      const metadataCid = availableTicketMetadataCIDs[selectedAvailableTicket.id];\n      if (!metadataCid) {\n        toast.error('Metadata CID not found for this ticket.', {\n          id: toastId\n        });\n        setBuyingTicketId(null);\n        return;\n      }\n      const tokenURI = `ipfs://${metadataCid}`; // Or however your contract expects the URI\n      const qrHash = `qr-${selectedAvailableTicket.id}-${Date.now()}`; // Example QR Hash, make this robust\n\n      const isOutsider = !isInsider;\n      const priceToSend = isOutsider ? eventPrice.outsider : eventPrice.insider;\n      console.log('handleBuyTicket: eventPrice:', eventPrice, 'priceToSend:', priceToSend);\n      if (!priceToSend || priceToSend === '0' || parseFloat(priceToSend) === 0) {\n        toast.error('Ticket price is not available or is zero.', {\n          id: toastId\n        });\n        setBuyingTicketId(null);\n        return;\n      }\n      const txHash = await buyTicketUtil(tokenURI,\n      // This should be the metadata URI for the new token\n      qrHash,\n      // A unique hash for the QR code\n      isOutsider, priceToSend // This is already an Ether string, buyTicketUtil will parseEther\n      );\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      await new Promise(resolve => setTimeout(resolve, 3000)); // Give time for node to see tx\n      await fetchOwnedTickets(true); // Force refresh\n      // Optionally, refresh available tickets if one was consumed\n      // This depends on how `getAvailableTicketsUtil` works; if it shows all mintable types, no change.\n      // If it shows specific unowned instance IDs, it needs update.\n      // For now, assuming `availableTicketMetadataCIDs` represents types of tickets to mint.\n    } catch (error) {\n      console.error(\"Buy Ticket Failed:\", error);\n      toast.error(`Purchase Failed: ${error.message || 'Unknown error'}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResaleTicket = async tokenId => {\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    setResellingTicketId(tokenId);\n    const toastId = `resell-${tokenId}`;\n    toast.loading('Processing resale...', {\n      id: toastId\n    });\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await fetchOwnedTickets(true); // Force refresh\n      // Optionally refresh available tickets if resold tickets appear there\n    } catch (error) {\n      console.error(\"Resell Failed:\", error);\n      toast.error(`Resale Failed: ${error.message || 'Unknown error'}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // --- Render Logic ---\n  if (!walletAddress) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please connect your wallet to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 9\n  }, this);\n  if (!user) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please log in to view the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 9\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex flex-col items-center justify-center min-h-[400px] space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-error text-lg animate-fade-in\",\n      children: [\"Wrong Network Detected (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 9\n  }, this);\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"container mx-auto px-4 py-8 space-y-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"My Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this), loadingTickets && ownedTickets.length === 0 ?\n      /*#__PURE__*/\n      // Show skeleton only if loading AND no tickets yet\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(2)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `owned-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 21\n      }, this) : ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => {},\n          isOwned: true,\n          onResell: handleResaleTicket,\n          isReselling: resellingTicketId === ticket.id\n        }, `owned-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-secondary-dark p-6 rounded-lg text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-text-secondary\",\n          children: \"You don't own any tickets yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"Available Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this), loadingTickets && availableTickets.length === 0 ?\n      /*#__PURE__*/\n      // Show skeleton only if loading AND no tickets yet\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `available-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 21\n      }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: handleBuyTicket,\n          isOwned: false,\n          isBuying: buyingTicketId === ticket.id\n        }, `available-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tickets currently available for purchase.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"g/6GwNxGrme5EdMMCzQ4gojRGdM=\", false, function () {\n  return [useWallet, useAuth, useVIP];\n});\n_c = MarketplacePage;\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","toast","motion","useAuth","useWallet","useVIP","buyTicket","buyTicketUtil","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","availableTicketMetadataCIDs","MarketplacePage","_s","_networkState$current","walletAddress","networkState","switchNetwork","user","isVIP","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","loadingTickets","setLoadingTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","eventPrice","setEventPrice","dataInitialized","setDataInitialized","lastFetchTimeRef","fetchPrice","details","insider","ticketPriceInsider","outsider","ticketPriceOutsider","console","warn","error","fetchOwnedTickets","force","now","Date","current","log","ownedIds","length","ticketsData","map","id","eventNames","eventName","seatNumber","cid","imageUrl","undefined","price","qrValue","refreshInterval","setInterval","clearInterval","fetchAvailable","availableTicketsData","Object","entries","parseInt","availableDetailsPromises","_metadata$attributes","_metadata$attributes$","_metadata$image","uri","metadata","ticketData","name","attributes","find","attr","trait_type","value","image","replace","detailError","resolvedDetails","Promise","all","filter","Boolean","handleVIPVerified","initializeData","handleBuyTicket","ticketId","isCorrect","process","env","REACT_APP_VIP_REQUIRED","isInsider","ownedTicketCount","REACT_APP_VIP_LIMIT","toastId","loading","selectedAvailableTicket","t","metadataCid","tokenURI","qrHash","isOutsider","priceToSend","parseFloat","txHash","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","resolve","setTimeout","message","handleResaleTicket","tokenId","div","initial","opacity","animate","currentNetwork","onClick","onVerified","Array","_","index","ticket","onBuy","isOwned","onResell","isReselling","isBuying","_c","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther, parseEther } from 'ethers'; // formatEther is used by blockchain.ts, parseEther for sending tx\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport {\n    buyTicket as buyTicketUtil,\n    getMyTickets as getMyTicketsUtil,\n    resellTicket as resellTicketUtil,\n    getEventDetails,\n    getTokenMetadataURI,\n    getAvailableTickets as getAvailableTicketsUtil\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\ninterface TicketData {\n    id: number;\n    eventName: string;\n    price: string; // Price stored as formatted string (e.g., \"0.05\")\n    seatNumber: string;\n    qrValue: string;\n    imageUrl?: string;\n    metadata?: any;\n}\nconst availableTicketMetadataCIDs: { [key: number]: string } = {\n    0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\n    1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\n    2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\n    3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n    4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n    5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n    6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\",\n};\n\nconst MarketplacePage: React.FC = () => {\n    const { walletAddress, networkState, switchNetwork } = useWallet();\n    const { user } = useAuth();\n    const { isVIP } = useVIP();\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\n    const [loadingTickets, setLoadingTickets] = useState<boolean>(true);\n    const [buyingTicketId, setBuyingTicketId] = useState<string | number | null>(null);\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\n    const [eventPrice, setEventPrice] = useState<{ insider: string; outsider: string } | null>(null);\n    const [dataInitialized, setDataInitialized] = useState<boolean>(false);\n    const lastFetchTimeRef = useRef<number>(0);\n\n    // Fetch price only once on mount\n    useEffect(() => {\n        const fetchPrice = async () => {\n            try {\n                const details = await getEventDetails();\n                if (details) {\n                    // CORRECTED: Use the already formatted strings directly\n                    setEventPrice({\n                        insider: details.ticketPriceInsider,\n                        outsider: details.ticketPriceOutsider\n                    });\n                } else {\n                    console.warn(\"Ticket price not found in event details.\");\n                    toast.error(\"Could not determine event price.\");\n                }\n            } catch (error) {\n                console.error(\"Failed to fetch event details:\", error);\n                // The error message in the toast was \"Could not load event details.\"\n                // The console error includes the specific TypeError.\n                // If the error persists after this fix, the original error is likely within getEventDetails itself.\n                toast.error(`Failed to load event details. Check console for specifics.`);\n            }\n        };\n        fetchPrice();\n    }, []); // Empty dependency array means this runs once on component mount\n\n    // Fetch owned tickets with rate limiting\n    const fetchOwnedTickets = useCallback(async (force: boolean = false) => {\n        if (!walletAddress) return;\n        \n        const now = Date.now();\n        if (!force && now - lastFetchTimeRef.current < 3000) {\n            console.log(\"Skipping fetch due to rate limit\");\n            return;\n        }\n        \n        console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n        setLoadingTickets(true);\n        lastFetchTimeRef.current = now;\n        \n        try {\n            console.log(\"Calling getMyTicketsUtil...\");\n            const ownedIds = await getMyTicketsUtil(walletAddress);\n            console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n            \n            if (!ownedIds || ownedIds.length === 0) {\n                console.log(\"No owned tickets found, clearing owned tickets state\");\n                setOwnedTickets([]);\n                return;\n            }\n\n            const ticketsData = ownedIds.map((id: number) => {\n                const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n                const eventName = eventNames[id % eventNames.length];\n                const seatNumber = `Seat-${id}`;\n                const cid = availableTicketMetadataCIDs[id]; // This might need adjustment based on actual ID scheme\n                const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n                const price = eventPrice ? eventPrice.outsider : '0.001'; // Default or fallback price\n                return {\n                    id,\n                    eventName,\n                    price,\n                    seatNumber,\n                    qrValue: `qr-${id}-${Date.now()}`,\n                    imageUrl\n                };\n            });\n\n            console.log(\"Setting owned tickets:\", ticketsData);\n            setOwnedTickets(ticketsData);\n            setDataInitialized(true);\n        } catch (error) {\n            console.error(\"Failed to fetch owned tickets:\", error);\n            toast.error(\"Could not load your owned tickets. Please try again.\");\n        } finally {\n            setLoadingTickets(false);\n        }\n    }, [walletAddress, eventPrice]); // Added eventPrice as a dependency if it's used to determine display price of owned tickets\n\n    // Initial fetch and periodic refresh\n    useEffect(() => {\n        if (walletAddress) {\n            fetchOwnedTickets(true);\n            const refreshInterval = setInterval(() => {\n                console.log(\"Periodic refresh of owned tickets\");\n                fetchOwnedTickets(false);\n            }, 10000); \n            return () => clearInterval(refreshInterval);\n        }\n    }, [walletAddress, fetchOwnedTickets]);\n\n    // Fetch available tickets when dependencies change\n    useEffect(() => {\n        const fetchAvailable = async () => {\n            if (!walletAddress || !eventPrice) return; \n            \n            try {\n                setLoadingTickets(true);\n                console.log(\"Fetching available tickets...\");\n                \n                const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n                    id: parseInt(id),\n                    cid: cid\n                }));\n\n                console.log(\"Processing available tickets:\", availableTicketsData);\n\n                const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\n                    try {\n                        const uri = `ipfs://${cid}`;\n                        console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n                        const metadata = await fetchMetadataFromUri(uri);\n                        \n                        if (!metadata) {\n                            console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n                            return null;\n                        }\n                        const price = isVIP ? (eventPrice.insider) : (eventPrice.outsider);\n                        const ticketData = {\n                            id,\n                            eventName: metadata?.name || `Ticket ${id}`,\n                            price,\n                            seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\n                            qrValue: `qr-${id}`,\n                            imageUrl: metadata?.image?.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/') || undefined,\n                            metadata\n                        };\n                        console.log(`Processed ticket ${id}:`, ticketData);\n                        return ticketData;\n                    } catch (detailError) {\n                        console.error(`Failed to fetch details for available token ${id}:`, detailError);\n                        return null;\n                    }\n                });\n\n                const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\n                console.log(\"Final available tickets:\", resolvedDetails);\n                setAvailableTickets(resolvedDetails);\n                \n            } catch (error) {\n                console.error(\"Failed to fetch available tickets:\", error);\n                toast.error(\"Could not load available tickets. Please try again.\");\n            } finally {\n                setLoadingTickets(false);\n            }\n        };\n\n        fetchAvailable();\n    }, [walletAddress, eventPrice, isVIP]); // Added isVIP\n\n    const handleVIPVerified = useCallback(() => {\n        console.log(\"VIP verified, data will refresh automatically through effects\");\n        // Data refresh is handled by useEffects that depend on `isVIP` or `eventPrice`\n        // If `isVIP` status directly changes `eventPrice` or how tickets are displayed,\n        // the existing `useEffect` for available tickets should re-run.\n        // You might also want to force a refresh of available tickets if their price depends on VIP status\n        // and that price is determined/formatted within `WorkspaceAvailable`.\n    }, []);\n\n    useEffect(() => {\n        const initializeData = async () => {\n            if (walletAddress && !dataInitialized) {\n                console.log(\"Initializing marketplace data...\");\n                setLoadingTickets(true);\n                try {\n                    // Fetch price first if not already fetched, though the dedicated effect should handle it\n                    if (!eventPrice) {\n                         const details = await getEventDetails();\n                         if (details) {\n                            setEventPrice({\n                                insider: details.ticketPriceInsider,\n                                outsider: details.ticketPriceOutsider\n                            });\n                         }\n                    }\n                    await fetchOwnedTickets(true); // force fetch\n                    setDataInitialized(true);\n                } catch (error) {\n                     console.error(\"Error during initial data load:\", error);\n                } finally {\n                    setLoadingTickets(false);\n                }\n            }\n        };\n\n        initializeData();\n    }, [walletAddress, dataInitialized, fetchOwnedTickets, eventPrice]);\n\n\n    const handleBuyTicket = async (ticketId: string | number) => {\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\n        if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\n        if (!eventPrice) return toast.error('Event price is not available. Please wait or refresh.');\n\n        const isInsider = isVIP === true;\n        const ownedTicketCount = ownedTickets.length;\n        if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n            return toast.error(\"VIP members are limited to 1 ticket.\");\n        }\n\n        setBuyingTicketId(ticketId);\n        const toastId = `buy-${ticketId}`;\n        toast.loading('Processing transaction...', { id: toastId });\n\n        try {\n            // The 'ticketId' for buying from available tickets is used for metadata lookup (URI)\n            // The actual token ID might be different if your contract mints sequentially.\n            // For this example, we'll assume ticketId from 'availableTicketMetadataCIDs' is what we need for URI.\n            // The QR hash also needs to be determined or generated.\n            // The `buyTicketUtil` expects `tokenURI` and `qrHash`.\n            \n            const selectedAvailableTicket = availableTickets.find(t => t.id === ticketId);\n            if (!selectedAvailableTicket || !selectedAvailableTicket.metadata) {\n                toast.error('Ticket metadata not found.', { id: toastId });\n                setBuyingTicketId(null);\n                return;\n            }\n            \n            // Assuming the CID used to fetch metadata is the tokenURI for minting.\n            // The key of availableTicketMetadataCIDs (which became selectedAvailableTicket.id)\n            // is used to find the CID.\n            const metadataCid = availableTicketMetadataCIDs[selectedAvailableTicket.id];\n            if (!metadataCid) {\n                 toast.error('Metadata CID not found for this ticket.', {id: toastId});\n                 setBuyingTicketId(null);\n                 return;\n            }\n            const tokenURI = `ipfs://${metadataCid}`; // Or however your contract expects the URI\n            const qrHash = `qr-${selectedAvailableTicket.id}-${Date.now()}`; // Example QR Hash, make this robust\n\n            const isOutsider = !isInsider;\n            const priceToSend = isOutsider ? eventPrice.outsider : eventPrice.insider;\n            console.log('handleBuyTicket: eventPrice:', eventPrice, 'priceToSend:', priceToSend);\n            if (!priceToSend || priceToSend === '0' || parseFloat(priceToSend) === 0) {\n                toast.error('Ticket price is not available or is zero.', { id: toastId });\n                setBuyingTicketId(null);\n                return;\n            }\n\n            const txHash = await buyTicketUtil(\n                tokenURI,       // This should be the metadata URI for the new token\n                qrHash,         // A unique hash for the QR code\n                isOutsider,\n                priceToSend     // This is already an Ether string, buyTicketUtil will parseEther\n            );\n\n            toast.success(\n                <>\n                    Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                </>,\n                { id: toastId, duration: 6000 }\n            );\n\n            await new Promise(resolve => setTimeout(resolve, 3000)); // Give time for node to see tx\n            await fetchOwnedTickets(true); // Force refresh\n            // Optionally, refresh available tickets if one was consumed\n            // This depends on how `getAvailableTicketsUtil` works; if it shows all mintable types, no change.\n            // If it shows specific unowned instance IDs, it needs update.\n            // For now, assuming `availableTicketMetadataCIDs` represents types of tickets to mint.\n\n        } catch (error: any) {\n            console.error(\"Buy Ticket Failed:\", error);\n            toast.error(`Purchase Failed: ${error.message || 'Unknown error'}`, { id: toastId, duration: 6000 });\n        } finally {\n            setBuyingTicketId(null);\n        }\n    };\n\n    const handleResaleTicket = async (tokenId: number) => {\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\n\n        setResellingTicketId(tokenId);\n        const toastId = `resell-${tokenId}`;\n        toast.loading('Processing resale...', { id: toastId });\n        try {\n            const txHash = await resellTicketUtil(tokenId);\n            toast.success(\n                <>\n                    Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                </>,\n                { id: toastId, duration: 6000 }\n            );\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            await fetchOwnedTickets(true); // Force refresh\n            // Optionally refresh available tickets if resold tickets appear there\n        } catch (error: any) {\n            console.error(\"Resell Failed:\", error);\n            toast.error(`Resale Failed: ${error.message || 'Unknown error'}`, { id: toastId, duration: 6000 });\n        } finally {\n            setResellingTicketId(null);\n        }\n    };\n\n    // --- Render Logic ---\n    if (!walletAddress) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please connect your wallet to access the marketplace.</p>\n        </motion.div>\n    );\n    if (!user) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please log in to view the marketplace.</p>\n        </motion.div>\n    );\n    if (!networkState?.isCorrect) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\n            <p className=\"text-center text-error text-lg animate-fade-in\">\n                Wrong Network Detected ({networkState?.currentNetwork?.name || 'Unknown'}).\n            </p>\n            <GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton>\n        </motion.div>\n    );\n\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n        return (\n            <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"max-w-md mx-auto my-8\"\n            >\n                <VIPVerificationForm onVerified={handleVIPVerified} />\n            </motion.div>\n        );\n    }\n\n    return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"container mx-auto px-4 py-8 space-y-12\">\n            {/* My Tickets Section */}\n            <section>\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\n                {loadingTickets && ownedTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {[...Array(2)].map((_, index) => <NFTTicketCardSkeleton key={`owned-skeleton-${index}`} />)}\n                    </div>\n                ) : ownedTickets.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {ownedTickets.map((ticket) => (\n                            <NFTTicketCard\n                                key={`owned-${ticket.id}`}\n                                ticket={ticket}\n                                onBuy={() => {}} \n                                isOwned={true}\n                                onResell={handleResaleTicket}\n                                isReselling={resellingTicketId === ticket.id}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"bg-secondary-dark p-6 rounded-lg text-center\">\n                        <p className=\"text-text-secondary\">You don't own any tickets yet.</p>\n                    </div>\n                )}\n            </section>\n\n            {/* Available Tickets Section */}\n            <section>\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\n                {loadingTickets && availableTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {[...Array(4)].map((_, index) => <NFTTicketCardSkeleton key={`available-skeleton-${index}`} />)}\n                    </div>\n                ) : availableTickets.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {availableTickets.map((ticket) => (\n                            <NFTTicketCard\n                                key={`available-${ticket.id}`}\n                                ticket={ticket}\n                                onBuy={handleBuyTicket}\n                                isOwned={false}\n                                isBuying={buyingTicketId === ticket.id}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\">\n                        <p>No tickets currently available for purchase.</p>\n                    </div>\n                )}\n            </section>\n        </motion.div>\n    );\n};\n\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}