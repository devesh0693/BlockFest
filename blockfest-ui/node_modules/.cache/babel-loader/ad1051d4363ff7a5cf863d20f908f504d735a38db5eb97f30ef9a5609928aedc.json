{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther } from 'ethers'; // Keep parseEther for potential future use\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport { buyTicket as buyTicketUtil, getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails\n\n// Assuming this function exists\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst availableTicketMetadataCIDs = {\n  // Example: Assuming first available ticket corresponds to first CID, etc.\n  // You need to know how your contract assigns IDs and map accordingly.\n  // This mapping is fragile if using mock data IDs (1, 3) vs sequential contract IDs (0, 1, 2...).\n  // Using the provided CIDs:\n  0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\n  1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\n  2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\n  3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n  4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n  5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n  6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\"\n  // Add more mappings if needed\n};\n\n// --- Mock Data --- REMOVE LATER ---\n\n// Flag to control whether to use mock data or real contract data\n// Set to false when ready to use real data\n// --------------------------------------\n\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    walletAddress,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const {\n    user\n  } = useAuth();\n  const {\n    isVIP\n  } = useVIP();\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [loadingTickets, setLoadingTickets] = useState(true);\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [eventPrice, setEventPrice] = useState(null);\n  const [dataInitialized, setDataInitialized] = useState(false);\n  const lastFetchTimeRef = useRef(0);\n\n  // Fetch price only once on mount\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const details = await getEventDetails();\n        if (details) {\n          // Save all price types for later use\n          setEventPrice({\n            insider: formatEther(details.ticketPriceInsider),\n            outsider: formatEther(details.ticketPriceOutsider)\n          });\n        } else {\n          console.warn(\"Ticket price not found in event details.\");\n          toast.error(\"Could not determine event price.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        toast.error(\"Could not load event details.\");\n      }\n    };\n    fetchPrice();\n  }, []);\n\n  // Fetch owned tickets with rate limiting\n  const fetchOwnedTickets = useCallback(async (force = false) => {\n    if (!walletAddress) return;\n\n    // Rate limit fetches to once every 3 seconds unless forced\n    const now = Date.now();\n    if (!force && now - lastFetchTimeRef.current < 3000) {\n      console.log(\"Skipping fetch due to rate limit\");\n      return;\n    }\n    console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n    setLoadingTickets(true);\n    lastFetchTimeRef.current = now;\n    try {\n      console.log(\"Calling getMyTicketsUtil...\");\n      const ownedIds = await getMyTicketsUtil(walletAddress);\n      console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n      if (!ownedIds || ownedIds.length === 0) {\n        console.log(\"No owned tickets found, clearing owned tickets state\");\n        setOwnedTickets([]);\n        return;\n      }\n\n      // Create ticket data from the owned IDs\n      const ticketsData = ownedIds.map(id => {\n        const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n        const eventName = eventNames[id % eventNames.length];\n        const seatNumber = `Seat-${id}`;\n        const cid = availableTicketMetadataCIDs[id];\n        const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n        // Always use outsider price for owned tickets (or adjust as needed)\n        const price = eventPrice ? eventPrice.outsider : '0.001';\n        return {\n          id,\n          eventName,\n          price,\n          seatNumber,\n          qrValue: `qr-${id}-${Date.now()}`,\n          imageUrl\n        };\n      });\n      console.log(\"Setting owned tickets:\", ticketsData);\n      setOwnedTickets(ticketsData);\n      setDataInitialized(true);\n    } catch (error) {\n      console.error(\"Failed to fetch owned tickets:\", error);\n      toast.error(\"Could not load your owned tickets. Please try again.\");\n    } finally {\n      setLoadingTickets(false);\n    }\n  }, [walletAddress, eventPrice]);\n\n  // Initial fetch and periodic refresh\n  useEffect(() => {\n    if (walletAddress) {\n      // Initial fetch\n      fetchOwnedTickets(true);\n\n      // Set up periodic refresh with a longer interval\n      const refreshInterval = setInterval(() => {\n        console.log(\"Periodic refresh of owned tickets\");\n        fetchOwnedTickets(false);\n      }, 10000); // Check every 10 seconds\n\n      return () => clearInterval(refreshInterval);\n    }\n  }, [walletAddress, fetchOwnedTickets]);\n\n  // Fetch available tickets when dependencies change\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      if (!walletAddress || !eventPrice) return;\n      try {\n        setLoadingTickets(true);\n        console.log(\"Fetching available tickets...\");\n\n        // Use the predefined CIDs to create ticket data\n        const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n          id: parseInt(id),\n          cid: cid\n        }));\n        console.log(\"Processing available tickets:\", availableTicketsData);\n        const availableDetailsPromises = availableTicketsData.map(async ({\n          id,\n          cid\n        }) => {\n          try {\n            var _metadata$attributes, _metadata$attributes$;\n            // Construct IPFS URI from CID\n            const uri = `ipfs://${cid}`;\n            console.log(`Fetching metadata for ticket ${id} from ${uri}`);\n            const metadata = await fetchMetadataFromUri(uri);\n            if (!metadata) {\n              console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n              return null;\n            }\n            // Use correct price string for available tickets\n            const price = isVIP ? eventPrice ? eventPrice.insider : '0.001' : eventPrice ? eventPrice.outsider : '0.001';\n            const ticketData = {\n              id,\n              eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n              price,\n              seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n              qrValue: `qr-${id}`,\n              imageUrl: (metadata === null || metadata === void 0 ? void 0 : metadata.image) || undefined,\n              metadata\n            };\n            console.log(`Processed ticket ${id}:`, ticketData);\n            return ticketData;\n          } catch (detailError) {\n            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n            return null;\n          }\n        });\n        const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n        console.log(\"Final available tickets:\", resolvedDetails);\n        setAvailableTickets(resolvedDetails);\n      } catch (error) {\n        console.error(\"Failed to fetch available tickets:\", error);\n        toast.error(\"Could not load available tickets. Please try again.\");\n      } finally {\n        setLoadingTickets(false);\n      }\n    };\n    fetchAvailable();\n  }, [walletAddress, eventPrice, isVIP]);\n\n  // Handle VIP verification\n  const handleVIPVerified = useCallback(() => {\n    console.log(\"VIP verified, data will refresh automatically through effects\");\n  }, []);\n\n  // Add a new effect to handle data initialization\n  useEffect(() => {\n    const initializeData = async () => {\n      if (walletAddress && !dataInitialized) {\n        console.log(\"Initializing marketplace data...\");\n        setLoadingTickets(true);\n        try {\n          await fetchOwnedTickets();\n          setDataInitialized(true);\n        } finally {\n          setLoadingTickets(false);\n        }\n      }\n    };\n    initializeData();\n  }, [walletAddress, dataInitialized, fetchOwnedTickets]);\n\n  // --- Event Handlers ---\n  const handleBuyTicket = async ticketId => {\n    // 1. Pre-checks\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\n    if (!eventPrice) return toast.error('Event price is not available.');\n\n    // 2. VIP Limit Check\n    const isInsider = isVIP === true;\n    const ownedTicketCount = ownedTickets.length;\n    if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n      return toast.error(\"VIP members are limited to 1 ticket.\");\n    }\n\n    // 3. Execute Buy\n    setBuyingTicketId(ticketId);\n    const toastId = `buy-${ticketId}`;\n    toast.loading('Processing transaction...', {\n      id: toastId\n    });\n    try {\n      const ticketIdStr = String(ticketId);\n      const isOutsider = !isInsider;\n      // Use the correct price for insider/outsider\n      const priceToSend = isOutsider ? eventPrice.outsider : eventPrice.insider;\n      console.log('handleBuyTicket: eventPrice:', eventPrice, 'priceToSend:', priceToSend);\n      if (!priceToSend || priceToSend === '0' || priceToSend === '') {\n        toast.error('Ticket price is not available or is zero.', {\n          id: toastId\n        });\n        setBuyingTicketId(null);\n        return;\n      }\n      const txHash = await buyTicketUtil(ticketIdStr, `qr-${ticketIdStr}`, isOutsider, priceToSend);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n\n      // Wait for transaction to be mined\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Force refresh owned tickets\n      await fetchOwnedTickets(true);\n    } catch (error) {\n      console.error(\"Buy Ticket Failed:\", error);\n      toast.error(`Purchase Failed: ${error.message}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResaleTicket = async tokenId => {\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    setResellingTicketId(tokenId);\n    const toastId = `resell-${tokenId}`;\n    toast.loading('Processing resale...', {\n      id: toastId\n    });\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      // Refresh ticket data\n      setDataInitialized(false);\n    } catch (error) {\n      console.error(\"Resell Failed:\", error);\n      toast.error(`Resale Failed: ${error.message}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // --- Render Logic ---\n  // Basic checks before rendering main content\n  if (!walletAddress) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please connect your wallet to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 9\n  }, this);\n  if (!user) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please log in to view the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 9\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex flex-col items-center justify-center min-h-[400px] space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-error text-lg animate-fade-in\",\n      children: [\"Wrong Network Detected (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 9\n  }, this);\n\n  // VIP Check Step with updated callback\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n    // If VIP required and not VIP, show verification form\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Main Marketplace View\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"container mx-auto px-4 py-8 space-y-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"My Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this), loadingTickets ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(2)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `owned-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 21\n      }, this) : ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => {} // Owned tickets don't have a buy button\n          ,\n          isOwned: true,\n          onResell: handleResaleTicket,\n          isReselling: resellingTicketId === ticket.id\n        }, `owned-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-secondary-dark p-6 rounded-lg text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-text-secondary\",\n          children: \"You don't own any tickets yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"Available Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }, this), loadingTickets ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `available-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 21\n      }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: handleBuyTicket,\n          isOwned: false,\n          isBuying: buyingTicketId === ticket.id\n        }, `available-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tickets currently available for purchase.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"g/6GwNxGrme5EdMMCzQ4gojRGdM=\", false, function () {\n  return [useWallet, useAuth, useVIP];\n});\n_c = MarketplacePage;\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","toast","motion","formatEther","useAuth","useWallet","useVIP","buyTicket","buyTicketUtil","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","availableTicketMetadataCIDs","MarketplacePage","_s","_networkState$current","walletAddress","networkState","switchNetwork","user","isVIP","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","loadingTickets","setLoadingTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","eventPrice","setEventPrice","dataInitialized","setDataInitialized","lastFetchTimeRef","fetchPrice","details","insider","ticketPriceInsider","outsider","ticketPriceOutsider","console","warn","error","fetchOwnedTickets","force","now","Date","current","log","ownedIds","length","ticketsData","map","id","eventNames","eventName","seatNumber","cid","imageUrl","undefined","price","qrValue","refreshInterval","setInterval","clearInterval","fetchAvailable","availableTicketsData","Object","entries","parseInt","availableDetailsPromises","_metadata$attributes","_metadata$attributes$","uri","metadata","ticketData","name","attributes","find","attr","trait_type","value","image","detailError","resolvedDetails","Promise","all","filter","Boolean","handleVIPVerified","initializeData","handleBuyTicket","ticketId","isCorrect","process","env","REACT_APP_VIP_REQUIRED","isInsider","ownedTicketCount","REACT_APP_VIP_LIMIT","toastId","loading","ticketIdStr","String","isOutsider","priceToSend","txHash","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","resolve","setTimeout","message","handleResaleTicket","tokenId","div","initial","opacity","animate","currentNetwork","onClick","onVerified","Array","_","index","ticket","onBuy","isOwned","onResell","isReselling","isBuying","_c","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther, parseEther } from 'ethers'; // Keep parseEther for potential future use\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport {\n    buyTicket as buyTicketUtil,\n    getMyTickets as getMyTicketsUtil,\n    resellTicket as resellTicketUtil,\n    getEventDetails,\n    getTokenMetadataURI,\n    getAvailableTickets as getAvailableTicketsUtil // Assuming this function exists\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\ninterface TicketData {\n    id: number;\n    eventName: string;\n    price: string; // Price stored as formatted string (e.g., \"0.05\")\n    seatNumber: string;\n    qrValue: string;\n    imageUrl?: string;\n    metadata?: any; // Added to use fetchMetadataFromUri later\n}\nconst availableTicketMetadataCIDs: { [key: number]: string } = {\n    // Example: Assuming first available ticket corresponds to first CID, etc.\n    // You need to know how your contract assigns IDs and map accordingly.\n    // This mapping is fragile if using mock data IDs (1, 3) vs sequential contract IDs (0, 1, 2...).\n    // Using the provided CIDs:\n    0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\n    1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\n    2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\n    3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n    4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n    5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n    6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\",\n    // Add more mappings if needed\n};\n\n// --- Mock Data --- REMOVE LATER ---\n\n    \n// Flag to control whether to use mock data or real contract data\n // Set to false when ready to use real data\n// --------------------------------------\n\n\nconst MarketplacePage: React.FC = () => {\n    const { walletAddress, networkState, switchNetwork } = useWallet();\n    const { user } = useAuth();\n    const { isVIP } = useVIP();\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\n    const [loadingTickets, setLoadingTickets] = useState<boolean>(true);\n    const [buyingTicketId, setBuyingTicketId] = useState<string | number | null>(null);\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\n    const [eventPrice, setEventPrice] = useState<{ insider: string; outsider: string } | null>(null);\n    const [dataInitialized, setDataInitialized] = useState<boolean>(false);\n    const lastFetchTimeRef = useRef<number>(0);\n\n    // Fetch price only once on mount\n    useEffect(() => {\n        const fetchPrice = async () => {\n            try {\n                const details = await getEventDetails();\n                if (details) {\n                    // Save all price types for later use\n                    setEventPrice({\n                        insider: formatEther(details.ticketPriceInsider),\n                        outsider: formatEther(details.ticketPriceOutsider)\n                    });\n                } else {\n                    console.warn(\"Ticket price not found in event details.\");\n                    toast.error(\"Could not determine event price.\");\n                }\n            } catch (error) {\n                console.error(\"Failed to fetch event details:\", error);\n                toast.error(\"Could not load event details.\");\n            }\n        };\n        fetchPrice();\n    }, []);\n\n    // Fetch owned tickets with rate limiting\n    const fetchOwnedTickets = useCallback(async (force: boolean = false) => {\n        if (!walletAddress) return;\n        \n        // Rate limit fetches to once every 3 seconds unless forced\n        const now = Date.now();\n        if (!force && now - lastFetchTimeRef.current < 3000) {\n            console.log(\"Skipping fetch due to rate limit\");\n            return;\n        }\n        \n        console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n        setLoadingTickets(true);\n        lastFetchTimeRef.current = now;\n        \n        try {\n            console.log(\"Calling getMyTicketsUtil...\");\n            const ownedIds = await getMyTicketsUtil(walletAddress);\n            console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n            \n            if (!ownedIds || ownedIds.length === 0) {\n                console.log(\"No owned tickets found, clearing owned tickets state\");\n                setOwnedTickets([]);\n                return;\n            }\n\n            // Create ticket data from the owned IDs\n            const ticketsData = ownedIds.map((id: number) => {\n                const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n                const eventName = eventNames[id % eventNames.length];\n                const seatNumber = `Seat-${id}`;\n                const cid = availableTicketMetadataCIDs[id];\n                const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n                // Always use outsider price for owned tickets (or adjust as needed)\n                const price = eventPrice ? eventPrice.outsider : '0.001';\n                return {\n                    id,\n                    eventName,\n                    price,\n                    seatNumber,\n                    qrValue: `qr-${id}-${Date.now()}`,\n                    imageUrl\n                };\n            });\n\n            console.log(\"Setting owned tickets:\", ticketsData);\n            setOwnedTickets(ticketsData);\n            setDataInitialized(true);\n        } catch (error) {\n            console.error(\"Failed to fetch owned tickets:\", error);\n            toast.error(\"Could not load your owned tickets. Please try again.\");\n        } finally {\n            setLoadingTickets(false);\n        }\n    }, [walletAddress, eventPrice]);\n\n    // Initial fetch and periodic refresh\n    useEffect(() => {\n        if (walletAddress) {\n            // Initial fetch\n            fetchOwnedTickets(true);\n\n            // Set up periodic refresh with a longer interval\n            const refreshInterval = setInterval(() => {\n                console.log(\"Periodic refresh of owned tickets\");\n                fetchOwnedTickets(false);\n            }, 10000); // Check every 10 seconds\n\n            return () => clearInterval(refreshInterval);\n        }\n    }, [walletAddress, fetchOwnedTickets]);\n\n    // Fetch available tickets when dependencies change\n    useEffect(() => {\n        const fetchAvailable = async () => {\n            if (!walletAddress || !eventPrice) return;\n            \n            try {\n                setLoadingTickets(true);\n                console.log(\"Fetching available tickets...\");\n                \n                // Use the predefined CIDs to create ticket data\n                const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n                    id: parseInt(id),\n                    cid: cid\n                }));\n\n                console.log(\"Processing available tickets:\", availableTicketsData);\n\n                const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\n                    try {\n                        // Construct IPFS URI from CID\n                        const uri = `ipfs://${cid}`;\n                        console.log(`Fetching metadata for ticket ${id} from ${uri}`);\n                        const metadata = await fetchMetadataFromUri(uri);\n                        \n                        if (!metadata) {\n                            console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n                            return null;\n                        }\n                        // Use correct price string for available tickets\n                        const price = isVIP ? (eventPrice ? eventPrice.insider : '0.001') : (eventPrice ? eventPrice.outsider : '0.001');\n                        const ticketData = {\n                            id,\n                            eventName: metadata?.name || `Ticket ${id}`,\n                            price,\n                            seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\n                            qrValue: `qr-${id}`,\n                            imageUrl: metadata?.image || undefined,\n                            metadata\n                        };\n                        console.log(`Processed ticket ${id}:`, ticketData);\n                        return ticketData;\n                    } catch (detailError) {\n                        console.error(`Failed to fetch details for available token ${id}:`, detailError);\n                        return null;\n                    }\n                });\n\n                const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\n                console.log(\"Final available tickets:\", resolvedDetails);\n                setAvailableTickets(resolvedDetails);\n                \n            } catch (error) {\n                console.error(\"Failed to fetch available tickets:\", error);\n                toast.error(\"Could not load available tickets. Please try again.\");\n            } finally {\n                setLoadingTickets(false);\n            }\n        };\n\n        fetchAvailable();\n    }, [walletAddress, eventPrice, isVIP]);\n\n    // Handle VIP verification\n    const handleVIPVerified = useCallback(() => {\n        console.log(\"VIP verified, data will refresh automatically through effects\");\n    }, []);\n\n    // Add a new effect to handle data initialization\n    useEffect(() => {\n        const initializeData = async () => {\n            if (walletAddress && !dataInitialized) {\n                console.log(\"Initializing marketplace data...\");\n                setLoadingTickets(true);\n                try {\n                    await fetchOwnedTickets();\n                    setDataInitialized(true);\n                } finally {\n                    setLoadingTickets(false);\n                }\n            }\n        };\n\n        initializeData();\n    }, [walletAddress, dataInitialized, fetchOwnedTickets]);\n\n    // --- Event Handlers ---\n    const handleBuyTicket = async (ticketId: string | number) => {\n        // 1. Pre-checks\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\n        if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\n        if (!eventPrice) return toast.error('Event price is not available.');\n\n        // 2. VIP Limit Check\n        const isInsider = isVIP === true;\n        const ownedTicketCount = ownedTickets.length;\n        if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n            return toast.error(\"VIP members are limited to 1 ticket.\");\n        }\n\n        // 3. Execute Buy\n        setBuyingTicketId(ticketId);\n        const toastId = `buy-${ticketId}`;\n        toast.loading('Processing transaction...', { id: toastId });\n\n        try {\n            const ticketIdStr = String(ticketId);\n            const isOutsider = !isInsider;\n            // Use the correct price for insider/outsider\n            const priceToSend = isOutsider ? eventPrice.outsider : eventPrice.insider;\n            console.log('handleBuyTicket: eventPrice:', eventPrice, 'priceToSend:', priceToSend);\n            if (!priceToSend || priceToSend === '0' || priceToSend === '') {\n                toast.error('Ticket price is not available or is zero.', { id: toastId });\n                setBuyingTicketId(null);\n                return;\n            }\n\n            const txHash = await buyTicketUtil(\n                ticketIdStr,\n                `qr-${ticketIdStr}`,\n                isOutsider,\n                priceToSend\n            );\n\n            toast.success(\n                <>\n                    Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                </>,\n                { id: toastId, duration: 6000 }\n            );\n\n            // Wait for transaction to be mined\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            \n            // Force refresh owned tickets\n            await fetchOwnedTickets(true);\n            \n        } catch (error: any) {\n            console.error(\"Buy Ticket Failed:\", error);\n            toast.error(`Purchase Failed: ${error.message}`, { id: toastId, duration: 6000 });\n        } finally {\n            setBuyingTicketId(null);\n        }\n    };\n\n    const handleResaleTicket = async (tokenId: number) => {\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\n\n        setResellingTicketId(tokenId);\n        const toastId = `resell-${tokenId}`;\n        toast.loading('Processing resale...', { id: toastId });\n        try {\n            const txHash = await resellTicketUtil(tokenId);\n            toast.success(\n                <>\n                    Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                </>,\n                { id: toastId, duration: 6000 }\n            );\n            // Refresh ticket data\n            setDataInitialized(false);\n        } catch (error: any) {\n            console.error(\"Resell Failed:\", error);\n            toast.error(`Resale Failed: ${error.message}`, { id: toastId, duration: 6000 });\n        } finally {\n            setResellingTicketId(null);\n        }\n    };\n\n    // --- Render Logic ---\n    // Basic checks before rendering main content\n    if (!walletAddress) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please connect your wallet to access the marketplace.</p>\n        </motion.div>\n    );\n    if (!user) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please log in to view the marketplace.</p>\n        </motion.div>\n    );\n    if (!networkState?.isCorrect) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\n            <p className=\"text-center text-error text-lg animate-fade-in\">\n                Wrong Network Detected ({networkState?.currentNetwork?.name || 'Unknown'}).\n            </p>\n            <GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton>\n        </motion.div>\n    );\n\n    // VIP Check Step with updated callback\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n        // If VIP required and not VIP, show verification form\n        return (\n            <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"max-w-md mx-auto my-8\"\n            >\n                <VIPVerificationForm onVerified={handleVIPVerified} />\n            </motion.div>\n        );\n    }\n\n    // Main Marketplace View\n    return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"container mx-auto px-4 py-8 space-y-12\">\n            {/* My Tickets Section */}\n            <section>\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\n                {loadingTickets ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {[...Array(2)].map((_, index) => <NFTTicketCardSkeleton key={`owned-skeleton-${index}`} />)}\n                    </div>\n                ) : ownedTickets.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {ownedTickets.map((ticket) => (\n                            <NFTTicketCard\n                                key={`owned-${ticket.id}`}\n                                ticket={ticket}\n                                onBuy={() => {}} // Owned tickets don't have a buy button\n                                isOwned={true}\n                                onResell={handleResaleTicket}\n                                isReselling={resellingTicketId === ticket.id}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"bg-secondary-dark p-6 rounded-lg text-center\">\n                        <p className=\"text-text-secondary\">You don't own any tickets yet.</p>\n                    </div>\n                )}\n            </section>\n\n            {/* Available Tickets Section */}\n            <section>\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\n                {loadingTickets ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {[...Array(4)].map((_, index) => <NFTTicketCardSkeleton key={`available-skeleton-${index}`} />)}\n                    </div>\n                ) : availableTickets.length > 0 ? (\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {availableTickets.map((ticket) => (\n                            <NFTTicketCard\n                                key={`available-${ticket.id}`}\n                                ticket={ticket}\n                                onBuy={handleBuyTicket}\n                                isOwned={false}\n                                isBuying={buyingTicketId === ticket.id}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\">\n                        <p>No tickets currently available for purchase.</p>\n                    </div>\n                )}\n            </section>\n        </motion.div>\n    );\n};\n\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}