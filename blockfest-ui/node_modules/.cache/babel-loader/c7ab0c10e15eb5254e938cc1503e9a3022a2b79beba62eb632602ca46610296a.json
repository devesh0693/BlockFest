{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nexport const getMyTickets = async userAddress => {\n  // ...\n  const hasTicket = await contract.hasTicket(userAddress);\n  if (!hasTicket) {\n    return [];\n  }\n  // Get ticket count to know the range to check\n  const ticketCount = await contract.ticketCount();\n  // Only checks the first slot:\n  try {\n    const ticketId = await contract.ownedTickets(userAddress, 0);\n    if (ticketId.toString() !== '0') {\n      ownedTickets.push(Number(ticketId));\n    }\n  } catch (error) {\n    // ...\n  }\n  const balance = await contract.balanceOf(userAddress);\n  const ownedTickets = [];\n  for (let i = 0; i < balance; i++) {\n    const ticketId = await contract.tokenOfOwnerByIndex(userAddress, i);\n    ownedTickets.push(Number(ticketId));\n  }\n  return ownedTickets;\n};","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","getMyTickets","userAddress","hasTicket","contract","ticketCount","ticketId","ownedTickets","toString","push","Number","error","balance","balanceOf","i","tokenOfOwnerByIndex"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/index.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nexport const getMyTickets = async (userAddress: string): Promise<number[]> => {\n    // ...\n    const hasTicket = await contract.hasTicket(userAddress);\n    if (!hasTicket) {\n        return [];\n    }\n    // Get ticket count to know the range to check\n    const ticketCount = await contract.ticketCount();\n    // Only checks the first slot:\n    try {\n        const ticketId = await contract.ownedTickets(userAddress, 0);\n        if (ticketId.toString() !== '0') {\n            ownedTickets.push(Number(ticketId));\n        }\n    } catch (error) {\n        // ...\n    }\n    const balance = await contract.balanceOf(userAddress);\n    const ownedTickets: number[] = [];\n    for (let i = 0; i < balance; i++) {\n        const ticketId = await contract.tokenOfOwnerByIndex(userAddress, i);\n        ownedTickets.push(Number(ticketId));\n    }\n    return ownedTickets;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,IAAI,GAAGL,QAAQ,CAACM,UAAU,CAC9BC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;AACDH,IAAI,CAACI,MAAM,cACTL,OAAA,CAACL,KAAK,CAACW,UAAU;EAAAC,QAAA,eACfP,OAAA,CAACH,GAAG;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACAb,eAAe,CAAC,CAAC;AAEjB,OAAO,MAAMc,YAAY,GAAG,MAAOC,WAAmB,IAAwB;EAC1E;EACA,MAAMC,SAAS,GAAG,MAAMC,QAAQ,CAACD,SAAS,CAACD,WAAW,CAAC;EACvD,IAAI,CAACC,SAAS,EAAE;IACZ,OAAO,EAAE;EACb;EACA;EACA,MAAME,WAAW,GAAG,MAAMD,QAAQ,CAACC,WAAW,CAAC,CAAC;EAChD;EACA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,YAAY,CAACL,WAAW,EAAE,CAAC,CAAC;IAC5D,IAAII,QAAQ,CAACE,QAAQ,CAAC,CAAC,KAAK,GAAG,EAAE;MAC7BD,YAAY,CAACE,IAAI,CAACC,MAAM,CAACJ,QAAQ,CAAC,CAAC;IACvC;EACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZ;EAAA;EAEJ,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,SAAS,CAACX,WAAW,CAAC;EACrD,MAAMK,YAAsB,GAAG,EAAE;EACjC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,EAAE,EAAE;IAC9B,MAAMR,QAAQ,GAAG,MAAMF,QAAQ,CAACW,mBAAmB,CAACb,WAAW,EAAEY,CAAC,CAAC;IACnEP,YAAY,CAACE,IAAI,CAACC,MAAM,CAACJ,QAAQ,CAAC,CAAC;EACvC;EACA,OAAOC,YAAY;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}