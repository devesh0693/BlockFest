{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\contexts\\\\VIPContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VIPContext = /*#__PURE__*/createContext(undefined);\nexport const VIPProvider = ({\n  children\n}) => {\n  _s();\n  const [isVIP, setIsVIP] = useState(null);\n  const [checkingVIP, setCheckingVIP] = useState(false);\n  const {\n    user\n  } = useAuth();\n\n  // Check for stored VIP status on mount and when user changes\n  useEffect(() => {\n    if (user) {\n      // Attempt to retrieve stored VIP status from localStorage or sessionStorage\n      const storedVIPStatus = localStorage.getItem(`vip_status_${user.uid}`);\n      if (storedVIPStatus) {\n        setIsVIP(storedVIPStatus === 'true');\n      } else {\n        setIsVIP(null);\n      }\n    } else {\n      // Reset if no user\n      setIsVIP(null);\n      localStorage.removeItem('vip_status'); // Clear any stored value\n    }\n  }, [user]);\n  const checkVIPStatus = async (name, rollNumber) => {\n    if (!user) {\n      toast.error(\"Please log in before checking VIP status.\");\n      return false;\n    }\n    setCheckingVIP(true);\n    toast.loading('Verifying VIP Status...', {\n      id: 'vip-check'\n    });\n    try {\n      const response = await checkVIPApi(name, rollNumber);\n      setIsVIP(response.isVIP);\n\n      // Store the VIP status for this user session\n      if (user) {\n        localStorage.setItem(`vip_status_${user.uid}`, response.isVIP.toString());\n      }\n      toast.dismiss('vip-check');\n      if (response.isVIP) {\n        toast.success('✅ You are a VIP!');\n      } else {\n        toast.error('❌ Access Denied. Not on VIP list.');\n      }\n      setCheckingVIP(false);\n      return response.isVIP;\n    } catch (error) {\n      console.error(\"VIP Check API Error:\", error);\n      toast.dismiss('vip-check');\n      toast.error(error.message || 'Error checking VIP status.');\n      setIsVIP(false);\n      setCheckingVIP(false);\n      return false;\n    }\n  };\n  const resetVIP = () => {\n    setIsVIP(null);\n    // Also clear stored status when explicitly reset\n    if (user) {\n      localStorage.removeItem(`vip_status_${user.uid}`);\n    }\n  };\n  const value = {\n    isVIP,\n    checkingVIP,\n    checkVIPStatus,\n    resetVIP\n  };\n  return /*#__PURE__*/_jsxDEV(VIPContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(VIPProvider, \"v54ioXSJpxG6BDCTPDgrcJpmvkU=\", false, function () {\n  return [useAuth];\n});\n_c = VIPProvider;\nexport const useVIP = () => {\n  _s2();\n  const context = useContext(VIPContext);\n  if (!context) {\n    throw new Error('useVIP must be used within a VIPProvider');\n  }\n  return context;\n};\n_s2(useVIP, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"VIPProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","checkVIPApi","toast","jsxDEV","_jsxDEV","VIPContext","undefined","VIPProvider","children","_s","isVIP","setIsVIP","checkingVIP","setCheckingVIP","user","storedVIPStatus","localStorage","getItem","uid","removeItem","checkVIPStatus","name","rollNumber","error","loading","id","response","setItem","toString","dismiss","success","console","message","resetVIP","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useVIP","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/contexts/VIPContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\n\ninterface VIPContextType {\n    isVIP: boolean | null;\n    checkingVIP: boolean;\n    checkVIPStatus: (name: string, rollNumber: string) => Promise<boolean>;\n    resetVIP: () => void;\n}\n\nconst VIPContext = createContext<VIPContextType | undefined>(undefined);\n\nexport const VIPProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [isVIP, setIsVIP] = useState<boolean | null>(null);\n    const [checkingVIP, setCheckingVIP] = useState<boolean>(false);\n    const { user } = useAuth();\n    \n    // Check for stored VIP status on mount and when user changes\n    useEffect(() => {\n        if (user) {\n            // Attempt to retrieve stored VIP status from localStorage or sessionStorage\n            const storedVIPStatus = localStorage.getItem(`vip_status_${user.uid}`);\n            if (storedVIPStatus) {\n                setIsVIP(storedVIPStatus === 'true');\n            } else {\n                setIsVIP(null);\n            }\n        } else {\n            // Reset if no user\n            setIsVIP(null);\n            localStorage.removeItem('vip_status'); // Clear any stored value\n        }\n    }, [user]);\n\n    const checkVIPStatus = async (name: string, rollNumber: string): Promise<boolean> => {\n        if (!user) {\n            toast.error(\"Please log in before checking VIP status.\");\n            return false;\n        }\n        \n        setCheckingVIP(true);\n        toast.loading('Verifying VIP Status...', { id: 'vip-check' });\n        \n        try {\n            const response = await checkVIPApi(name, rollNumber);\n            setIsVIP(response.isVIP);\n            \n            // Store the VIP status for this user session\n            if (user) {\n                localStorage.setItem(`vip_status_${user.uid}`, response.isVIP.toString());\n            }\n            \n            toast.dismiss('vip-check');\n            if (response.isVIP) {\n                toast.success('✅ You are a VIP!');\n            } else {\n                toast.error('❌ Access Denied. Not on VIP list.');\n            }\n            \n            setCheckingVIP(false);\n            return response.isVIP;\n        } catch (error: any) {\n            console.error(\"VIP Check API Error:\", error);\n            toast.dismiss('vip-check');\n            toast.error(error.message || 'Error checking VIP status.');\n            setIsVIP(false);\n            setCheckingVIP(false);\n            return false;\n        }\n    };\n\n    const resetVIP = () => {\n        setIsVIP(null);\n        // Also clear stored status when explicitly reset\n        if (user) {\n            localStorage.removeItem(`vip_status_${user.uid}`);\n        }\n    };\n\n    const value = { isVIP, checkingVIP, checkVIPStatus, resetVIP };\n\n    return (\n        <VIPContext.Provider value={value}>\n            {children}\n        </VIPContext.Provider>\n    );\n};\n\nexport const useVIP = (): VIPContextType => {\n    const context = useContext(VIPContext);\n    if (!context) {\n        throw new Error('useVIP must be used within a VIPProvider');\n    }\n    return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}