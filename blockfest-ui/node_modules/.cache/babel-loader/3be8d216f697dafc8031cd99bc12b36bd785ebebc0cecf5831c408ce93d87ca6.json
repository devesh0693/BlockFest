{"ast":null,"code":"// src/firebase/auth.ts\nimport { signInWithPopup, GoogleAuthProvider, FacebookAuthProvider,\n// Note: Facebook login requires extra setup on Firebase & Facebook Developer Portal\nsignOut, onAuthStateChanged,\n// Import User type\nsignInWithEmailAndPassword, createUserWithEmailAndPassword, getIdToken, getIdTokenResult // To get custom claims\n} from \"firebase/auth\";\nimport { authClient } from \"./config\"; // Use the configured client auth instance\n\nconst googleProvider = new GoogleAuthProvider();\nconst facebookProvider = new FacebookAuthProvider();\n\n// --- Sign-in Functions ---\n\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(authClient, googleProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Google Sign-in Error:\", error);\n    // Handle specific errors like popup closed, account exists with different credential, etc.\n    throw new Error(error.message || \"Google Sign-in failed.\");\n  }\n};\nexport const signInWithFacebook = async () => {\n  try {\n    // TODO: Ensure Facebook Login is properly configured in Firebase Console and Facebook Developer Portal\n    const result = await signInWithPopup(authClient, facebookProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Facebook Sign-in Error:\", error);\n    // Handle common errors\n    if (error.code === 'auth/account-exists-with-different-credential') {\n      throw new Error('An account already exists with the same email address using a different sign-in method.');\n    }\n    throw new Error(error.message || \"Facebook Sign-in failed.\");\n  }\n};\nexport const signInWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(authClient, email, password);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Email Sign-in Error:\", error);\n    // Handle specific errors like wrong password, user not found\n    throw new Error(error.message || \"Email Sign-in failed.\");\n  }\n};\nexport const registerWithEmail = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(authClient, email, password);\n    // Optionally send verification email here: await sendEmailVerification(userCredential.user);\n    return userCredential.user;\n  } catch (error) {\n    console.error(\"Email Registration Error:\", error);\n    // Handle errors like email already in use, weak password\n    throw new Error(error.message || \"Email Registration failed.\");\n  }\n};\n\n// --- Sign-out Function ---\n\nexport const signOutUser = async () => {\n  try {\n    await signOut(authClient);\n  } catch (error) {\n    console.error(\"Sign Out Error:\", error);\n    throw new Error(error.message || \"Sign Out failed.\");\n  }\n};\n\n// --- Auth State Listener ---\n\nexport const listenToAuthChanges = callback => {\n  // Returns the unsubscribe function\n  return onAuthStateChanged(authClient, callback);\n};\n\n// --- Get ID Token (for Backend Auth) ---\n\nexport const getCurrentUserIdToken = async () => {\n  if (!authClient.currentUser) {\n    return null;\n  }\n  try {\n    // Set forceRefresh to true if you want to ensure a fresh token\n    const token = await getIdToken(authClient.currentUser, /* forceRefresh */false);\n    return token;\n  } catch (error) {\n    console.error(\"Error getting ID token:\", error);\n    return null;\n  }\n};\n\n// --- Check Admin Claim ---\nexport const checkAdminStatus = async () => {\n  if (!authClient.currentUser) {\n    return false;\n  }\n  try {\n    const idTokenResult = await getIdTokenResult(authClient.currentUser);\n    return idTokenResult.claims.admin === true;\n  } catch (error) {\n    console.error(\"Error getting ID token result/claims:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["signInWithPopup","GoogleAuthProvider","FacebookAuthProvider","signOut","onAuthStateChanged","signInWithEmailAndPassword","createUserWithEmailAndPassword","getIdToken","getIdTokenResult","authClient","googleProvider","facebookProvider","signInWithGoogle","result","user","error","console","Error","message","signInWithFacebook","code","signInWithEmail","email","password","userCredential","registerWithEmail","signOutUser","listenToAuthChanges","callback","getCurrentUserIdToken","currentUser","token","checkAdminStatus","idTokenResult","claims","admin"],"sources":["C:/Users/negis/Downloads/Archive/src/firebase/auth.ts"],"sourcesContent":["// src/firebase/auth.ts\r\nimport {\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    FacebookAuthProvider, // Note: Facebook login requires extra setup on Firebase & Facebook Developer Portal\r\n    signOut,\r\n    onAuthStateChanged,\r\n    User, // Import User type\r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    getIdToken,\r\n    getIdTokenResult // To get custom claims\r\n} from \"firebase/auth\";\r\nimport { authClient } from \"./config\"; // Use the configured client auth instance\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\nconst facebookProvider = new FacebookAuthProvider();\r\n\r\n// --- Sign-in Functions ---\r\n\r\nexport const signInWithGoogle = async (): Promise<User | null> => {\r\n    try {\r\n        const result = await signInWithPopup(authClient, googleProvider);\r\n        return result.user;\r\n    } catch (error: any) {\r\n        console.error(\"Google Sign-in Error:\", error);\r\n        // Handle specific errors like popup closed, account exists with different credential, etc.\r\n        throw new Error(error.message || \"Google Sign-in failed.\");\r\n    }\r\n};\r\n\r\nexport const signInWithFacebook = async (): Promise<User | null> => {\r\n    try {\r\n        // TODO: Ensure Facebook Login is properly configured in Firebase Console and Facebook Developer Portal\r\n        const result = await signInWithPopup(authClient, facebookProvider);\r\n        return result.user;\r\n    } catch (error: any) {\r\n        console.error(\"Facebook Sign-in Error:\", error);\r\n        // Handle common errors\r\n        if (error.code === 'auth/account-exists-with-different-credential') {\r\n             throw new Error('An account already exists with the same email address using a different sign-in method.');\r\n        }\r\n        throw new Error(error.message || \"Facebook Sign-in failed.\");\r\n    }\r\n};\r\n\r\nexport const signInWithEmail = async (email: string, password: string): Promise<User | null> => {\r\n     try {\r\n        const userCredential = await signInWithEmailAndPassword(authClient, email, password);\r\n        return userCredential.user;\r\n    } catch (error: any) {\r\n        console.error(\"Email Sign-in Error:\", error);\r\n         // Handle specific errors like wrong password, user not found\r\n        throw new Error(error.message || \"Email Sign-in failed.\");\r\n    }\r\n}\r\n\r\nexport const registerWithEmail = async (email: string, password: string): Promise<User | null> => {\r\n     try {\r\n        const userCredential = await createUserWithEmailAndPassword(authClient, email, password);\r\n        // Optionally send verification email here: await sendEmailVerification(userCredential.user);\r\n        return userCredential.user;\r\n    } catch (error: any) {\r\n        console.error(\"Email Registration Error:\", error);\r\n        // Handle errors like email already in use, weak password\r\n        throw new Error(error.message || \"Email Registration failed.\");\r\n    }\r\n}\r\n\r\n// --- Sign-out Function ---\r\n\r\nexport const signOutUser = async (): Promise<void> => {\r\n    try {\r\n        await signOut(authClient);\r\n    } catch (error: any) {\r\n        console.error(\"Sign Out Error:\", error);\r\n        throw new Error(error.message || \"Sign Out failed.\");\r\n    }\r\n};\r\n\r\n// --- Auth State Listener ---\r\n\r\nexport const listenToAuthChanges = (callback: (user: User | null) => void) => {\r\n    // Returns the unsubscribe function\r\n    return onAuthStateChanged(authClient, callback);\r\n};\r\n\r\n// --- Get ID Token (for Backend Auth) ---\r\n\r\nexport const getCurrentUserIdToken = async (): Promise<string | null> => {\r\n    if (!authClient.currentUser) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Set forceRefresh to true if you want to ensure a fresh token\r\n        const token = await getIdToken(authClient.currentUser, /* forceRefresh */ false);\r\n        return token;\r\n    } catch (error) {\r\n        console.error(\"Error getting ID token:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// --- Check Admin Claim ---\r\nexport const checkAdminStatus = async (): Promise<boolean> => {\r\n    if (!authClient.currentUser) {\r\n        return false;\r\n    }\r\n    try {\r\n        const idTokenResult = await getIdTokenResult(authClient.currentUser);\r\n        return idTokenResult.claims.admin === true;\r\n    } catch (error) {\r\n        console.error(\"Error getting ID token result/claims:\", error);\r\n        return false;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}