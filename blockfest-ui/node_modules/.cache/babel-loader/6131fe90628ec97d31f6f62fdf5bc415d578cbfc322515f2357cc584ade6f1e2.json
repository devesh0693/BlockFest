{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther } from 'ethers'; // Keep parseEther for potential future use\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport { buyTicket as buyTicketUtil, getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails\n\n// Assuming this function exists\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst availableTicketMetadataCIDs = {\n  // Example: Assuming first available ticket corresponds to first CID, etc.\n  // You need to know how your contract assigns IDs and map accordingly.\n  // This mapping is fragile if using mock data IDs (1, 3) vs sequential contract IDs (0, 1, 2...).\n  // Using the provided CIDs:\n  0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\n  1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\n  2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\n  3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n  4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n  5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n  6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\"\n  // Add more mappings if needed\n};\n\n// --- Mock Data --- REMOVE LATER ---\nconst MOCK_AVAILABLE_TICKETS = [{\n  id: 1,\n  eventName: 'Genesis Block Party',\n  seatNumber: 'GA-101',\n  qrValue: 'blockfest-ticket-1',\n  imageUrl: 'https://via.placeholder.com/300x200/6f42c1/ffffff?text=Genesis+Block+Party'\n}, {\n  id: 3,\n  eventName: 'Crypto Carnival',\n  seatNumber: 'SEC-A-55',\n  qrValue: 'blockfest-ticket-3',\n  imageUrl: 'https://via.placeholder.com/300x200/1b1b32/ffffff?text=Crypto+Carnival'\n}];\n// Flag to control whether to use mock data or real contract data\nconst USE_MOCK_DATA = false; // Set to false when ready to use real data\n// --------------------------------------\n\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    walletAddress,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const {\n    user\n  } = useAuth();\n  const {\n    isVIP\n  } = useVIP();\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [loadingTickets, setLoadingTickets] = useState(true);\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [eventPrice, setEventPrice] = useState(null);\n  const [dataInitialized, setDataInitialized] = useState(false);\n  const [lastFetchTime, setLastFetchTime] = useState(0);\n\n  // Fetch price only once on mount\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const details = await getEventDetails();\n        const priceBigNumber = details === null || details === void 0 ? void 0 : details.ticketPriceInsider;\n        if (priceBigNumber) {\n          setEventPrice(formatEther(priceBigNumber));\n        } else {\n          console.warn(\"Ticket price not found in event details.\");\n          toast.error(\"Could not determine event price.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        toast.error(\"Could not load event details.\");\n      }\n    };\n    fetchPrice();\n  }, []);\n\n  // Fetch owned tickets with rate limiting\n  const fetchOwnedTickets = useCallback(async (force = false) => {\n    if (!walletAddress) return;\n\n    // Rate limit fetches to once every 3 seconds unless forced\n    const now = Date.now();\n    if (!force && now - lastFetchTime < 3000) {\n      console.log(\"Skipping fetch due to rate limit\");\n      return;\n    }\n    console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n    setLoadingTickets(true);\n    setLastFetchTime(now);\n    try {\n      console.log(\"Calling getMyTicketsUtil...\");\n      const ownedIds = await getMyTicketsUtil(walletAddress);\n      console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n      if (!ownedIds || ownedIds.length === 0) {\n        console.log(\"No owned tickets found, clearing owned tickets state\");\n        setOwnedTickets([]);\n        return;\n      }\n\n      // Create ticket data from the owned IDs\n      const ticketsData = ownedIds.map(id => {\n        const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\n        const eventName = eventNames[id % eventNames.length];\n        const seatNumber = `Seat-${id}`;\n        const cid = availableTicketMetadataCIDs[id];\n        const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\n        return {\n          id,\n          eventName,\n          price: eventPrice || '0.001',\n          seatNumber,\n          qrValue: `qr-${id}-${Date.now()}`,\n          imageUrl\n        };\n      });\n      console.log(\"Setting owned tickets:\", ticketsData);\n      setOwnedTickets(ticketsData);\n      setDataInitialized(true);\n    } catch (error) {\n      console.error(\"Failed to fetch owned tickets:\", error);\n      toast.error(\"Could not load your owned tickets. Please try again.\");\n    } finally {\n      setLoadingTickets(false);\n    }\n  }, [walletAddress, eventPrice, lastFetchTime]);\n\n  // Initial fetch and periodic refresh\n  useEffect(() => {\n    if (walletAddress) {\n      // Initial fetch\n      fetchOwnedTickets(true);\n\n      // Set up periodic refresh with a longer interval\n      const refreshInterval = setInterval(() => {\n        console.log(\"Periodic refresh of owned tickets\");\n        fetchOwnedTickets(false);\n      }, 10000); // Check every 10 seconds\n\n      return () => clearInterval(refreshInterval);\n    }\n  }, [walletAddress, fetchOwnedTickets]);\n\n  // Fetch available tickets when dependencies change\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      if (!walletAddress || !eventPrice) return;\n      try {\n        setLoadingTickets(true);\n        console.log(\"Fetching available tickets...\");\n\n        // Use the predefined CIDs to create ticket data\n        const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n          id: parseInt(id),\n          cid: cid\n        }));\n        console.log(\"Processing available tickets:\", availableTicketsData);\n        const availableDetailsPromises = availableTicketsData.map(async ({\n          id,\n          cid\n        }) => {\n          try {\n            var _metadata$attributes, _metadata$attributes$;\n            // Construct IPFS URI from CID\n            const uri = `ipfs://${cid}`;\n            console.log(`Fetching metadata for ticket ${id} from ${uri}`);\n            const metadata = await fetchMetadataFromUri(uri);\n            if (!metadata) {\n              console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n              return null;\n            }\n            const ticketData = {\n              id,\n              eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n              price: eventPrice,\n              seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n              qrValue: `qr-${id}`,\n              imageUrl: (metadata === null || metadata === void 0 ? void 0 : metadata.image) || undefined,\n              metadata\n            };\n            console.log(`Processed ticket ${id}:`, ticketData);\n            return ticketData;\n          } catch (detailError) {\n            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n            return null;\n          }\n        });\n        const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n        console.log(\"Final available tickets:\", resolvedDetails);\n        setAvailableTickets(resolvedDetails);\n      } catch (error) {\n        console.error(\"Failed to fetch available tickets:\", error);\n        toast.error(\"Could not load available tickets. Please try again.\");\n      } finally {\n        setLoadingTickets(false);\n      }\n    };\n    fetchAvailable();\n  }, [walletAddress, eventPrice]);\n\n  // Handle VIP verification\n  const handleVIPVerified = useCallback(() => {\n    console.log(\"VIP verified, data will refresh automatically through effects\");\n  }, []);\n\n  // Add a new effect to handle data initialization\n  useEffect(() => {\n    const initializeData = async () => {\n      if (walletAddress && !dataInitialized) {\n        console.log(\"Initializing marketplace data...\");\n        setLoadingTickets(true);\n        try {\n          await fetchOwnedTickets();\n          setDataInitialized(true);\n        } finally {\n          setLoadingTickets(false);\n        }\n      }\n    };\n    initializeData();\n  }, [walletAddress, dataInitialized, fetchOwnedTickets]);\n\n  // --- Event Handlers ---\n  const handleBuyTicket = async ticketId => {\n    // 1. Pre-checks\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\n    if (!eventPrice) return toast.error('Event price is not available.');\n\n    // 2. VIP Limit Check\n    const isInsider = isVIP === true;\n    const ownedTicketCount = ownedTickets.length;\n    if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n      return toast.error(\"VIP members are limited to 1 ticket.\");\n    }\n\n    // 3. Execute Buy\n    setBuyingTicketId(ticketId);\n    const toastId = `buy-${ticketId}`;\n    toast.loading('Processing transaction...', {\n      id: toastId\n    });\n    try {\n      const ticketIdStr = String(ticketId);\n      const isOutsider = !isInsider;\n      const txHash = await buyTicketUtil(ticketIdStr, eventPrice, true, String(isOutsider));\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n\n      // Wait for transaction to be mined\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Force refresh owned tickets\n      await fetchOwnedTickets(true);\n    } catch (error) {\n      console.error(\"Buy Ticket Failed:\", error);\n      toast.error(`Purchase Failed: ${error.message}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResaleTicket = async tokenId => {\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    setResellingTicketId(tokenId);\n    const toastId = `resell-${tokenId}`;\n    toast.loading('Processing resale...', {\n      id: toastId\n    });\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      // Refresh ticket data\n      setDataInitialized(false);\n    } catch (error) {\n      console.error(\"Resell Failed:\", error);\n      toast.error(`Resale Failed: ${error.message}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // --- Render Logic ---\n  // Basic checks before rendering main content\n  if (!walletAddress) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please connect your wallet to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 9\n  }, this);\n  if (!user) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please log in to view the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 9\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex flex-col items-center justify-center min-h-[400px] space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-error text-lg animate-fade-in\",\n      children: [\"Wrong Network Detected (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 9\n  }, this);\n\n  // VIP Check Step with updated callback\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n    // If VIP required and not VIP, show verification form\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Main Marketplace View\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"container mx-auto px-4 py-8 space-y-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"My Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 17\n      }, this), loadingTickets ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(2)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `owned-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 21\n      }, this) : ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => {} // Owned tickets don't have a buy button\n          ,\n          isOwned: true,\n          onResell: handleResaleTicket,\n          isReselling: resellingTicketId === ticket.id\n        }, `owned-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-secondary-dark p-6 rounded-lg text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-text-secondary\",\n          children: \"You don't own any tickets yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"Available Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this), loadingTickets ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `available-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: handleBuyTicket,\n          isOwned: false,\n          isBuying: buyingTicketId === ticket.id\n        }, `available-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tickets currently available for purchase.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"6BdFAGM4c4CmEjqvjptkUD3b5yc=\", false, function () {\n  return [useWallet, useAuth, useVIP];\n});\n_c = MarketplacePage;\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","toast","motion","formatEther","useAuth","useWallet","useVIP","buyTicket","buyTicketUtil","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","availableTicketMetadataCIDs","MOCK_AVAILABLE_TICKETS","id","eventName","seatNumber","qrValue","imageUrl","USE_MOCK_DATA","MarketplacePage","_s","_networkState$current","walletAddress","networkState","switchNetwork","user","isVIP","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","loadingTickets","setLoadingTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","eventPrice","setEventPrice","dataInitialized","setDataInitialized","lastFetchTime","setLastFetchTime","fetchPrice","details","priceBigNumber","ticketPriceInsider","console","warn","error","fetchOwnedTickets","force","now","Date","log","ownedIds","length","ticketsData","map","eventNames","cid","undefined","price","refreshInterval","setInterval","clearInterval","fetchAvailable","availableTicketsData","Object","entries","parseInt","availableDetailsPromises","_metadata$attributes","_metadata$attributes$","uri","metadata","ticketData","name","attributes","find","attr","trait_type","value","image","detailError","resolvedDetails","Promise","all","filter","Boolean","handleVIPVerified","initializeData","handleBuyTicket","ticketId","isCorrect","process","env","REACT_APP_VIP_REQUIRED","isInsider","ownedTicketCount","REACT_APP_VIP_LIMIT","toastId","loading","ticketIdStr","String","isOutsider","txHash","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","resolve","setTimeout","message","handleResaleTicket","tokenId","div","initial","opacity","animate","currentNetwork","onClick","onVerified","Array","_","index","ticket","onBuy","isOwned","onResell","isReselling","isBuying","_c","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'react-hot-toast';\r\nimport { motion } from 'framer-motion';\r\n// Import specific utilities from ethers\r\nimport { formatEther, parseEther } from 'ethers'; // Keep parseEther for potential future use\r\n\r\n// --- Context Hooks ---\r\nimport { useAuth, useWallet } from '../contexts/AuthContext';\r\nimport { useVIP } from '../contexts/VIPContext';\r\n\r\n// --- Blockchain Utilities ---\r\nimport {\r\n    buyTicket as buyTicketUtil,\r\n    getMyTickets as getMyTicketsUtil,\r\n    resellTicket as resellTicketUtil,\r\n    getEventDetails,\r\n    getTokenMetadataURI,\r\n    getAvailableTickets as getAvailableTicketsUtil // Assuming this function exists\r\n} from '../utils/blockchain';\r\nimport fetchMetadataFromUri from '../utils/metadata';\r\n\r\n// --- Components ---\r\nimport GlowingButton from '../components/GlowingButton';\r\nimport VIPVerificationForm from '../components/VIPVerificationForm';\r\nimport NFTTicketCard from '../components/NFTTicketCard';\r\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\r\n\r\n// --- Type Definitions ---\r\ninterface TicketData {\r\n    id: number;\r\n    eventName: string;\r\n    price: string; // Price stored as formatted string (e.g., \"0.05\")\r\n    seatNumber: string;\r\n    qrValue: string;\r\n    imageUrl?: string;\r\n    metadata?: any; // Added to use fetchMetadataFromUri later\r\n}\r\nconst availableTicketMetadataCIDs: { [key: number]: string } = {\r\n    // Example: Assuming first available ticket corresponds to first CID, etc.\r\n    // You need to know how your contract assigns IDs and map accordingly.\r\n    // This mapping is fragile if using mock data IDs (1, 3) vs sequential contract IDs (0, 1, 2...).\r\n    // Using the provided CIDs:\r\n    0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\r\n    1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\r\n    2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\r\n    3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\r\n    4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\r\n    5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\r\n    6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\",\r\n    // Add more mappings if needed\r\n};\r\n\r\n// --- Mock Data --- REMOVE LATER ---\r\nconst MOCK_AVAILABLE_TICKETS: Omit<TicketData, 'price'>[] = [\r\n    {\r\n        id: 1,\r\n        eventName: 'Genesis Block Party',\r\n        seatNumber: 'GA-101',\r\n        qrValue: 'blockfest-ticket-1',\r\n        imageUrl: 'https://via.placeholder.com/300x200/6f42c1/ffffff?text=Genesis+Block+Party'\r\n    },\r\n    {\r\n        id: 3,\r\n        eventName: 'Crypto Carnival',\r\n        seatNumber: 'SEC-A-55',\r\n        qrValue: 'blockfest-ticket-3',\r\n        imageUrl: 'https://via.placeholder.com/300x200/1b1b32/ffffff?text=Crypto+Carnival'\r\n    },\r\n];\r\n// Flag to control whether to use mock data or real contract data\r\nconst USE_MOCK_DATA = false; // Set to false when ready to use real data\r\n// --------------------------------------\r\n\r\n\r\nconst MarketplacePage: React.FC = () => {\r\n    const { walletAddress, networkState, switchNetwork } = useWallet();\r\n    const { user } = useAuth();\r\n    const { isVIP } = useVIP();\r\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\r\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\r\n    const [loadingTickets, setLoadingTickets] = useState<boolean>(true);\r\n    const [buyingTicketId, setBuyingTicketId] = useState<string | number | null>(null);\r\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\r\n    const [eventPrice, setEventPrice] = useState<string | null>(null);\r\n    const [dataInitialized, setDataInitialized] = useState<boolean>(false);\r\n    const [lastFetchTime, setLastFetchTime] = useState<number>(0);\r\n\r\n    // Fetch price only once on mount\r\n    useEffect(() => {\r\n        const fetchPrice = async () => {\r\n            try {\r\n                const details = await getEventDetails();\r\n                const priceBigNumber = details?.ticketPriceInsider;\r\n                if (priceBigNumber) {\r\n                    setEventPrice(formatEther(priceBigNumber));\r\n                } else {\r\n                    console.warn(\"Ticket price not found in event details.\");\r\n                    toast.error(\"Could not determine event price.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch event details:\", error);\r\n                toast.error(\"Could not load event details.\");\r\n            }\r\n        };\r\n        fetchPrice();\r\n    }, []);\r\n\r\n    // Fetch owned tickets with rate limiting\r\n    const fetchOwnedTickets = useCallback(async (force: boolean = false) => {\r\n        if (!walletAddress) return;\r\n        \r\n        // Rate limit fetches to once every 3 seconds unless forced\r\n        const now = Date.now();\r\n        if (!force && now - lastFetchTime < 3000) {\r\n            console.log(\"Skipping fetch due to rate limit\");\r\n            return;\r\n        }\r\n        \r\n        console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\r\n        setLoadingTickets(true);\r\n        setLastFetchTime(now);\r\n        \r\n        try {\r\n            console.log(\"Calling getMyTicketsUtil...\");\r\n            const ownedIds = await getMyTicketsUtil(walletAddress);\r\n            console.log(\"Raw owned ticket IDs returned:\", ownedIds);\r\n            \r\n            if (!ownedIds || ownedIds.length === 0) {\r\n                console.log(\"No owned tickets found, clearing owned tickets state\");\r\n                setOwnedTickets([]);\r\n                return;\r\n            }\r\n\r\n            // Create ticket data from the owned IDs\r\n            const ticketsData = ownedIds.map((id: number) => {\r\n                const eventNames = ['Cosmic Rhythm', 'Stellar Fest', 'Echo Vibe', 'Midnight Beats'];\r\n                const eventName = eventNames[id % eventNames.length];\r\n                const seatNumber = `Seat-${id}`;\r\n                const cid = availableTicketMetadataCIDs[id];\r\n                const imageUrl = cid ? `https://ipfs.io/ipfs/${cid}` : undefined;\r\n\r\n                return {\r\n                    id,\r\n                    eventName,\r\n                    price: eventPrice || '0.001',\r\n                    seatNumber,\r\n                    qrValue: `qr-${id}-${Date.now()}`,\r\n                    imageUrl\r\n                };\r\n            });\r\n\r\n            console.log(\"Setting owned tickets:\", ticketsData);\r\n            setOwnedTickets(ticketsData);\r\n            setDataInitialized(true);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch owned tickets:\", error);\r\n            toast.error(\"Could not load your owned tickets. Please try again.\");\r\n        } finally {\r\n            setLoadingTickets(false);\r\n        }\r\n    }, [walletAddress, eventPrice, lastFetchTime]);\r\n\r\n    // Initial fetch and periodic refresh\r\n    useEffect(() => {\r\n        if (walletAddress) {\r\n            // Initial fetch\r\n            fetchOwnedTickets(true);\r\n\r\n            // Set up periodic refresh with a longer interval\r\n            const refreshInterval = setInterval(() => {\r\n                console.log(\"Periodic refresh of owned tickets\");\r\n                fetchOwnedTickets(false);\r\n            }, 10000); // Check every 10 seconds\r\n\r\n            return () => clearInterval(refreshInterval);\r\n        }\r\n    }, [walletAddress, fetchOwnedTickets]);\r\n\r\n    // Fetch available tickets when dependencies change\r\n    useEffect(() => {\r\n        const fetchAvailable = async () => {\r\n            if (!walletAddress || !eventPrice) return;\r\n            \r\n            try {\r\n                setLoadingTickets(true);\r\n                console.log(\"Fetching available tickets...\");\r\n                \r\n                // Use the predefined CIDs to create ticket data\r\n                const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\r\n                    id: parseInt(id),\r\n                    cid: cid\r\n                }));\r\n\r\n                console.log(\"Processing available tickets:\", availableTicketsData);\r\n\r\n                const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\r\n                    try {\r\n                        // Construct IPFS URI from CID\r\n                        const uri = `ipfs://${cid}`;\r\n                        console.log(`Fetching metadata for ticket ${id} from ${uri}`);\r\n                        const metadata = await fetchMetadataFromUri(uri);\r\n                        \r\n                        if (!metadata) {\r\n                            console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\r\n                            return null;\r\n                        }\r\n\r\n                        const ticketData = {\r\n                            id,\r\n                            eventName: metadata?.name || `Ticket ${id}`,\r\n                            price: eventPrice,\r\n                            seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\r\n                            qrValue: `qr-${id}`,\r\n                            imageUrl: metadata?.image || undefined,\r\n                            metadata\r\n                        };\r\n                        console.log(`Processed ticket ${id}:`, ticketData);\r\n                        return ticketData;\r\n                    } catch (detailError) {\r\n                        console.error(`Failed to fetch details for available token ${id}:`, detailError);\r\n                        return null;\r\n                    }\r\n                });\r\n\r\n                const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\r\n                console.log(\"Final available tickets:\", resolvedDetails);\r\n                setAvailableTickets(resolvedDetails);\r\n                \r\n            } catch (error) {\r\n                console.error(\"Failed to fetch available tickets:\", error);\r\n                toast.error(\"Could not load available tickets. Please try again.\");\r\n            } finally {\r\n                setLoadingTickets(false);\r\n            }\r\n        };\r\n\r\n        fetchAvailable();\r\n    }, [walletAddress, eventPrice]);\r\n\r\n    // Handle VIP verification\r\n    const handleVIPVerified = useCallback(() => {\r\n        console.log(\"VIP verified, data will refresh automatically through effects\");\r\n    }, []);\r\n\r\n    // Add a new effect to handle data initialization\r\n    useEffect(() => {\r\n        const initializeData = async () => {\r\n            if (walletAddress && !dataInitialized) {\r\n                console.log(\"Initializing marketplace data...\");\r\n                setLoadingTickets(true);\r\n                try {\r\n                    await fetchOwnedTickets();\r\n                    setDataInitialized(true);\r\n                } finally {\r\n                    setLoadingTickets(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        initializeData();\r\n    }, [walletAddress, dataInitialized, fetchOwnedTickets]);\r\n\r\n    // --- Event Handlers ---\r\n    const handleBuyTicket = async (ticketId: string | number) => {\r\n        // 1. Pre-checks\r\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\r\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\r\n        if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\r\n        if (!eventPrice) return toast.error('Event price is not available.');\r\n\r\n        // 2. VIP Limit Check\r\n        const isInsider = isVIP === true;\r\n        const ownedTicketCount = ownedTickets.length;\r\n        if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\r\n            return toast.error(\"VIP members are limited to 1 ticket.\");\r\n        }\r\n\r\n        // 3. Execute Buy\r\n        setBuyingTicketId(ticketId);\r\n        const toastId = `buy-${ticketId}`;\r\n        toast.loading('Processing transaction...', { id: toastId });\r\n\r\n        try {\r\n            const ticketIdStr = String(ticketId);\r\n            const isOutsider = !isInsider;\r\n\r\n            const txHash = await buyTicketUtil(\r\n                ticketIdStr,\r\n                eventPrice,\r\n                true,\r\n                String(isOutsider)\r\n            );\r\n\r\n            toast.success(\r\n                <>\r\n                    Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\r\n                </>,\r\n                { id: toastId, duration: 6000 }\r\n            );\r\n\r\n            // Wait for transaction to be mined\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n            \r\n            // Force refresh owned tickets\r\n            await fetchOwnedTickets(true);\r\n            \r\n        } catch (error: any) {\r\n            console.error(\"Buy Ticket Failed:\", error);\r\n            toast.error(`Purchase Failed: ${error.message}`, { id: toastId, duration: 6000 });\r\n        } finally {\r\n            setBuyingTicketId(null);\r\n        }\r\n    };\r\n\r\n    const handleResaleTicket = async (tokenId: number) => {\r\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\r\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\r\n\r\n        setResellingTicketId(tokenId);\r\n        const toastId = `resell-${tokenId}`;\r\n        toast.loading('Processing resale...', { id: toastId });\r\n        try {\r\n            const txHash = await resellTicketUtil(tokenId);\r\n            toast.success(\r\n                <>\r\n                    Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\r\n                </>,\r\n                { id: toastId, duration: 6000 }\r\n            );\r\n            // Refresh ticket data\r\n            setDataInitialized(false);\r\n        } catch (error: any) {\r\n            console.error(\"Resell Failed:\", error);\r\n            toast.error(`Resale Failed: ${error.message}`, { id: toastId, duration: 6000 });\r\n        } finally {\r\n            setResellingTicketId(null);\r\n        }\r\n    };\r\n\r\n    // --- Render Logic ---\r\n    // Basic checks before rendering main content\r\n    if (!walletAddress) return (\r\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\r\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please connect your wallet to access the marketplace.</p>\r\n        </motion.div>\r\n    );\r\n    if (!user) return (\r\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\r\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please log in to view the marketplace.</p>\r\n        </motion.div>\r\n    );\r\n    if (!networkState?.isCorrect) return (\r\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\r\n            <p className=\"text-center text-error text-lg animate-fade-in\">\r\n                Wrong Network Detected ({networkState?.currentNetwork?.name || 'Unknown'}).\r\n            </p>\r\n            <GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton>\r\n        </motion.div>\r\n    );\r\n\r\n    // VIP Check Step with updated callback\r\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\r\n        // If VIP required and not VIP, show verification form\r\n        return (\r\n            <motion.div\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                className=\"max-w-md mx-auto my-8\"\r\n            >\r\n                <VIPVerificationForm onVerified={handleVIPVerified} />\r\n            </motion.div>\r\n        );\r\n    }\r\n\r\n    // Main Marketplace View\r\n    return (\r\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"container mx-auto px-4 py-8 space-y-12\">\r\n            {/* My Tickets Section */}\r\n            <section>\r\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\r\n                {loadingTickets ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {[...Array(2)].map((_, index) => <NFTTicketCardSkeleton key={`owned-skeleton-${index}`} />)}\r\n                    </div>\r\n                ) : ownedTickets.length > 0 ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {ownedTickets.map((ticket) => (\r\n                            <NFTTicketCard\r\n                                key={`owned-${ticket.id}`}\r\n                                ticket={ticket}\r\n                                onBuy={() => {}} // Owned tickets don't have a buy button\r\n                                isOwned={true}\r\n                                onResell={handleResaleTicket}\r\n                                isReselling={resellingTicketId === ticket.id}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"bg-secondary-dark p-6 rounded-lg text-center\">\r\n                        <p className=\"text-text-secondary\">You don't own any tickets yet.</p>\r\n                    </div>\r\n                )}\r\n            </section>\r\n\r\n            {/* Available Tickets Section */}\r\n            <section>\r\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\r\n                {loadingTickets ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {[...Array(4)].map((_, index) => <NFTTicketCardSkeleton key={`available-skeleton-${index}`} />)}\r\n                    </div>\r\n                ) : availableTickets.length > 0 ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {availableTickets.map((ticket) => (\r\n                            <NFTTicketCard\r\n                                key={`available-${ticket.id}`}\r\n                                ticket={ticket}\r\n                                onBuy={handleBuyTicket}\r\n                                isOwned={false}\r\n                                isBuying={buyingTicketId === ticket.id}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\">\r\n                        <p>No tickets currently available for purchase.</p>\r\n                    </div>\r\n                )}\r\n            </section>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}