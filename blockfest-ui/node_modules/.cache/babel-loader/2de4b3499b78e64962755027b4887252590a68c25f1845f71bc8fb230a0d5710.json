{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther, parseEther } from 'ethers'; // Keep parseEther for potential future use\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport { buyTicket as buyTicketUtil, getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails, getTokenMetadataURI, getAvailableTickets as getAvailableTicketsUtil // Assuming this function exists\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// --- Mock Data --- REMOVE LATER ---\nconst MOCK_AVAILABLE_TICKETS = [{\n  id: 1,\n  eventName: 'Genesis Block Party',\n  seatNumber: 'GA-101',\n  qrValue: 'blockfest-ticket-1',\n  imageUrl: 'https://via.placeholder.com/300x200/6f42c1/ffffff?text=Genesis+Block+Party'\n}, {\n  id: 3,\n  eventName: 'Crypto Carnival',\n  seatNumber: 'SEC-A-55',\n  qrValue: 'blockfest-ticket-3',\n  imageUrl: 'https://via.placeholder.com/300x200/1b1b32/ffffff?text=Crypto+Carnival'\n}];\n\n// Flag to control whether to use mock data or real contract data\nconst USE_MOCK_DATA = true; // Set to false when ready to use real data\n// --------------------------------------\n\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    walletAddress,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const {\n    user\n  } = useAuth();\n  const {\n    isVIP\n  } = useVIP(); // Removed unused checkVIPStatus, resetVIP for now\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [loadingTickets, setLoadingTickets] = useState(true); // Start true initially\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [eventPrice, setEventPrice] = useState(null); // Store event price as formatted ETHER string\n  const [refreshTrigger, setRefreshTrigger] = useState(0); // Add refresh trigger state\n\n  // --- Effects ---\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const details = await getEventDetails();\n        // --- FIX: Use the correct field name from your contract/details object ---\n        // Using 'ticketPriceInsider' based on previous error message, adjust if needed\n        const priceBigNumber = details === null || details === void 0 ? void 0 : details.ticketPriceInsider; // Example field\n\n        if (priceBigNumber) {\n          // Use imported formatEther directly\n          setEventPrice(formatEther(priceBigNumber));\n        } else {\n          console.warn(\"Ticket price (e.g., ticketPriceInsider) not found in event details.\");\n          toast.error(\"Could not determine event price.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        toast.error(\"Could not load event details.\");\n      }\n    };\n    fetchPrice();\n  }, []); // Run once on mount\n\n  // --- Data Fetching Functions --- (Using useCallback to fix dependency warning)\n  const fetchOwnedTickets = useCallback(async () => {\n    if (!walletAddress) return;\n    console.log(\"Fetching owned tickets...\");\n    try {\n      const ownedIds = await getMyTicketsUtil(walletAddress);\n      // Fetch details including metadata for each owned ID\n      const ownedDetailsPromises = ownedIds.map(async id => {\n        try {\n          var _metadata$attributes, _metadata$attributes$;\n          // 1. Get Token URI from contract\n          const uri = await getTokenMetadataURI(id); // Use blockchain util\n          // 2. Fetch Metadata from URI\n          const metadata = await fetchMetadataFromUri(uri); // Use helper\n          // 3. Get other details if needed (e.g., specific seat from contract?)\n          // const qrHash = await getQRHash(id); // Example\n          // 4. Construct TicketData object\n          return {\n            id,\n            // Use data from metadata if available, fallback otherwise\n            eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Owned Ticket ${id}`,\n            price: eventPrice || 'N/A',\n            // Price usually from event, not metadata\n            // Seat number might be an attribute in metadata or stored separately\n            seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n            qrValue: `qr-${id}`,\n            // Replace with actual QR data source if available\n            imageUrl: (metadata === null || metadata === void 0 ? void 0 : metadata.image) || undefined,\n            // Get image URL from metadata\n            metadata // Store full metadata for potential future use\n          };\n        } catch (detailError) {\n          console.error(`Failed to fetch details for owned token ${id}:`, detailError);\n          return null;\n        }\n      });\n      const resolvedDetails = (await Promise.all(ownedDetailsPromises)).filter(Boolean);\n      setOwnedTickets(resolvedDetails);\n    } catch (error) {\n      console.error(\"Failed to fetch owned tickets:\", error);\n      toast.error(\"Could not load your owned tickets.\");\n      setOwnedTickets([]);\n    }\n  }, [walletAddress, eventPrice]);\n  const fetchAvailableTickets = useCallback(async () => {\n    if (!walletAddress || !eventPrice) return;\n    console.log(\"Fetching available tickets...\");\n    try {\n      if (USE_MOCK_DATA) {\n        // Calculate ETH price in wei for potential future operations (using parseEther here)\n        const priceInWei = parseEther(eventPrice);\n        console.log(\"Price in Wei:\", priceInWei.toString());\n\n        // Using mock data with short delay to simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Filter out tickets the user already owns\n        const currentOwnedIds = ownedTickets.map(t => t.id);\n        const mockAvailable = MOCK_AVAILABLE_TICKETS.filter(t => !currentOwnedIds.includes(t.id)).map(t => ({\n          ...t,\n          price: eventPrice\n        }));\n        setAvailableTickets(mockAvailable);\n      } else {\n        // Real implementation using blockchain\n        // 1. Get available ticket IDs\n        const availableIds = await getAvailableTicketsUtil();\n\n        // 2. Fetch metadata for each available ticket\n        const availableDetailsPromises = availableIds.map(async id => {\n          try {\n            var _metadata$attributes2, _metadata$attributes3;\n            // Get Token URI from contract\n            const uri = await getTokenMetadataURI(id);\n            // Fetch Metadata from URI\n            const metadata = await fetchMetadataFromUri(uri);\n\n            // Construct TicketData object\n            return {\n              id,\n              // Use data from metadata if available, fallback otherwise\n              eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n              price: eventPrice,\n              // Seat number from metadata attribute\n              seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes2 = metadata.attributes) === null || _metadata$attributes2 === void 0 ? void 0 : (_metadata$attributes3 = _metadata$attributes2.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes3 === void 0 ? void 0 : _metadata$attributes3.value) || `Seat-${id}`,\n              qrValue: `qr-${id}`,\n              // Placeholder for QR value\n              imageUrl: (metadata === null || metadata === void 0 ? void 0 : metadata.image) || undefined,\n              // Image URL from metadata\n              metadata // Store full metadata\n            };\n          } catch (detailError) {\n            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n            return null;\n          }\n        });\n        const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n        setAvailableTickets(resolvedDetails);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch available tickets:\", error);\n      toast.error(\"Could not load available tickets.\");\n      setAvailableTickets([]);\n    }\n  }, [walletAddress, eventPrice, ownedTickets]);\n  useEffect(() => {\n    const loadData = async () => {\n      // Make async to await fetches\n      // Reset loading state only when prerequisites are met\n      setLoadingTickets(true); // Set loading true when dependencies change\n\n      if (walletAddress && user && networkState !== null && networkState !== void 0 && networkState.isCorrect && eventPrice !== null) {\n        // Added eventPrice check\n        await fetchOwnedTickets(); // Wait for owned tickets first\n        const vipRequired = process.env.REACT_APP_VIP_REQUIRED === 'true';\n        if (!vipRequired || isVIP === true) {\n          await fetchAvailableTickets(); // Then fetch available\n        } else if (isVIP === false) {\n          setAvailableTickets([]);\n          console.log(\"VIP required, user is not VIP. Not fetching available tickets.\");\n        }\n        setLoadingTickets(false); // Set loading false after fetches complete\n      } else {\n        // Clear lists and set loading false if prerequisites not met\n        setAvailableTickets([]);\n        setOwnedTickets([]);\n        // Keep loading true until prerequisites are met, or set false if needed\n        setLoadingTickets(false); // Set false if stuck waiting for prerequisites\n        if (!eventPrice) console.log(\"Waiting for event price...\");\n        // Add logs for other missing prerequisites if helpful\n      }\n    };\n    loadData();\n  }, [isVIP, walletAddress, user, networkState, eventPrice, fetchOwnedTickets, fetchAvailableTickets, refreshTrigger]); // Added refreshTrigger to dependencies\n\n  // --- Event Handlers ---\n  const handleBuyTicket = async ticketId => {\n    // 1. Pre-checks (Added null check for eventPrice before calling util)\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\n    if (!eventPrice) return toast.error('Event price is not available.'); // Crucial check\n\n    // 2. VIP Limit Check\n    const isInsider = isVIP === true;\n    const ownedTicketCount = ownedTickets.length;\n    if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n      return toast.error(\"VIP members are limited to 1 ticket.\");\n    }\n\n    // 3. Execute Buy\n    setBuyingTicketId(ticketId);\n    toast.loading('Processing transaction...', {\n      id: `buy-${ticketId}`\n    }); // Use template literal\n    try {\n      const ticketIdNum = Number(ticketId);\n      const quantity = 1;\n      const isOutsider = !isInsider;\n\n      // --- VERIFY ARGUMENTS AND ORDER with your blockchain.ts file ---\n      // Assuming signature: buyTicket(ticketIdNum, priceAsString, quantityNum, isOutsiderBool)\n      // FIX: Ensure the type matches what buyTicketUtil expects.\n      // Based on the error, it expects the first argument (ticket ID) as a string.\n      // ----------------------------------------------------------------\n      const txHash = await buyTicketUtil(String(ticketIdNum), eventPrice, Boolean(quantity), BigInt(isOutsider)); // Convert ticketIdNum to string\n\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true), {\n        id: `buy-${ticketId}`,\n        duration: 6000\n      }); // Use template literal\n      await fetchOwnedTickets();\n      await fetchAvailableTickets();\n    } catch (error) {\n      console.error(\"Buy Ticket Failed:\", error);\n      toast.error(`Purchase Failed: ${error.message}`, {\n        id: `buy-${ticketId}`,\n        duration: 6000\n      }); // Use template literal\n    } finally {\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResaleTicket = async tokenId => {\n    if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    setResellingTicketId(tokenId);\n    toast.loading('Processing resale...', {\n      id: `resell-${tokenId}`\n    }); // Use template literal\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true), {\n        id: `resell-${tokenId}`,\n        duration: 6000\n      }); // Use template literal\n      await fetchOwnedTickets();\n    } catch (error) {\n      console.error(\"Resell Failed:\", error);\n      toast.error(`Resale Failed: ${error.message}`, {\n        id: `resell-${tokenId}`,\n        duration: 6000\n      }); // Use template literal\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // --- VIP Verification Handler ---\n  const handleVIPVerified = () => {\n    // Force a refresh of the marketplace data after successful VIP verification\n    console.log(\"VIP verified, refreshing marketplace data...\");\n    setRefreshTrigger(prev => prev + 1);\n  };\n\n  // --- Render Logic ---\n  if (!walletAddress) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center text-accent-light text-lg animate-fade-in\",\n    children: \"Please connect your wallet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 32\n  }, this);\n  if (!user) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center text-accent-light text-lg animate-fade-in\",\n    children: \"Please log in to view the marketplace.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 23\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-error text-lg animate-fade-in mb-4\",\n      children: [\"Wrong Network Detected (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 71\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 205\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 42\n  }, this);\n\n  // VIP Check Step with updated callback\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n    // If VIP required and not VIP, show verification form or denial message\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Main Marketplace View\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"space-y-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"My Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => {} // Owned tickets don't have a buy button\n          ,\n          isOwned: true\n          // --- Reminder: Update NFTTicketCardProps in NFTTicketCard.tsx ---\n          ,\n          onResell: handleResaleTicket,\n          isReselling: resellingTicketId === ticket.id\n          // --------------------------------------------------------------\n        }, ticket.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-text-secondary\",\n        children: \"You don't own any tickets yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"Available Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), loadingTickets ?\n      /*#__PURE__*/\n      // Use loading state for skeletons\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          a: true,\n          ticket: ticket,\n          onBuy: handleBuyTicket,\n          isOwned: false,\n          isBuying: buyingTicketId === ticket.id\n        }, ticket.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n        children: \"No tickets currently available for purchase.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"lo3rpUUzqdfE6NQ1Hb/P25jWco4=\", false, function () {\n  return [useWallet, useAuth, useVIP];\n});\n_c = MarketplacePage;\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","toast","motion","formatEther","parseEther","useAuth","useWallet","useVIP","buyTicket","buyTicketUtil","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","getTokenMetadataURI","getAvailableTickets","getAvailableTicketsUtil","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","MOCK_AVAILABLE_TICKETS","id","eventName","seatNumber","qrValue","imageUrl","USE_MOCK_DATA","MarketplacePage","_s","_networkState$current","walletAddress","networkState","switchNetwork","user","isVIP","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","loadingTickets","setLoadingTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","eventPrice","setEventPrice","refreshTrigger","setRefreshTrigger","fetchPrice","details","priceBigNumber","ticketPriceInsider","console","warn","error","fetchOwnedTickets","log","ownedIds","ownedDetailsPromises","map","_metadata$attributes","_metadata$attributes$","uri","metadata","name","price","attributes","find","attr","trait_type","value","image","undefined","detailError","resolvedDetails","Promise","all","filter","Boolean","fetchAvailableTickets","priceInWei","toString","resolve","setTimeout","currentOwnedIds","t","mockAvailable","includes","availableIds","availableDetailsPromises","_metadata$attributes2","_metadata$attributes3","loadData","isCorrect","vipRequired","process","env","REACT_APP_VIP_REQUIRED","handleBuyTicket","ticketId","isInsider","ownedTicketCount","length","REACT_APP_VIP_LIMIT","loading","ticketIdNum","Number","quantity","isOutsider","txHash","String","BigInt","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","message","handleResaleTicket","tokenId","handleVIPVerified","prev","currentNetwork","onClick","div","initial","opacity","animate","onVerified","ticket","onBuy","isOwned","onResell","isReselling","Array","_","index","a","isBuying","_c","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'react-hot-toast';\r\nimport { motion } from 'framer-motion';\r\n// Import specific utilities from ethers\r\nimport { formatEther, parseEther } from 'ethers'; // Keep parseEther for potential future use\r\n\r\n// --- Context Hooks ---\r\nimport { useAuth, useWallet } from '../contexts/AuthContext';\r\nimport { useVIP } from '../contexts/VIPContext';\r\n\r\n// --- Blockchain Utilities ---\r\nimport {\r\n    buyTicket as buyTicketUtil,\r\n    getMyTickets as getMyTicketsUtil,\r\n    resellTicket as resellTicketUtil,\r\n    getEventDetails,\r\n    getTokenMetadataURI,\r\n    getAvailableTickets as getAvailableTicketsUtil // Assuming this function exists\r\n} from '../utils/blockchain';\r\nimport fetchMetadataFromUri from '../utils/metadata';\r\n\r\n// --- Components ---\r\nimport GlowingButton from '../components/GlowingButton';\r\nimport VIPVerificationForm from '../components/VIPVerificationForm';\r\nimport NFTTicketCard from '../components/NFTTicketCard';\r\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\r\n\r\n// --- Type Definitions ---\r\ninterface TicketData {\r\n    id: number;\r\n    eventName: string;\r\n    price: string; // Price stored as formatted string (e.g., \"0.05\")\r\n    seatNumber: string;\r\n    qrValue: string;\r\n    imageUrl?: string;\r\n    metadata?: any; // Added to use fetchMetadataFromUri later\r\n}\r\n\r\n// --- Mock Data --- REMOVE LATER ---\r\nconst MOCK_AVAILABLE_TICKETS: Omit<TicketData, 'price'>[] = [\r\n    {\r\n        id: 1,\r\n        eventName: 'Genesis Block Party',\r\n        seatNumber: 'GA-101',\r\n        qrValue: 'blockfest-ticket-1',\r\n        imageUrl: 'https://via.placeholder.com/300x200/6f42c1/ffffff?text=Genesis+Block+Party'\r\n    },\r\n    {\r\n        id: 3,\r\n        eventName: 'Crypto Carnival',\r\n        seatNumber: 'SEC-A-55',\r\n        qrValue: 'blockfest-ticket-3',\r\n        imageUrl: 'https://via.placeholder.com/300x200/1b1b32/ffffff?text=Crypto+Carnival'\r\n    },\r\n];\r\n\r\n// Flag to control whether to use mock data or real contract data\r\nconst USE_MOCK_DATA = true; // Set to false when ready to use real data\r\n// --------------------------------------\r\n\r\n\r\nconst MarketplacePage: React.FC = () => {\r\n    const { walletAddress, networkState, switchNetwork } = useWallet();\r\n    const { user } = useAuth();\r\n    const { isVIP } = useVIP(); // Removed unused checkVIPStatus, resetVIP for now\r\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\r\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\r\n    const [loadingTickets, setLoadingTickets] = useState<boolean>(true); // Start true initially\r\n    const [buyingTicketId, setBuyingTicketId] = useState<string | number | null>(null);\r\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\r\n    const [eventPrice, setEventPrice] = useState<string | null>(null); // Store event price as formatted ETHER string\r\n    const [refreshTrigger, setRefreshTrigger] = useState<number>(0); // Add refresh trigger state\r\n\r\n    // --- Effects ---\r\n    useEffect(() => {\r\n        const fetchPrice = async () => {\r\n            try {\r\n                const details = await getEventDetails();\r\n                // --- FIX: Use the correct field name from your contract/details object ---\r\n                // Using 'ticketPriceInsider' based on previous error message, adjust if needed\r\n                const priceBigNumber = details?.ticketPriceInsider; // Example field\r\n\r\n                if (priceBigNumber) {\r\n                    // Use imported formatEther directly\r\n                    setEventPrice(formatEther(priceBigNumber));\r\n                } else {\r\n                    console.warn(\"Ticket price (e.g., ticketPriceInsider) not found in event details.\");\r\n                    toast.error(\"Could not determine event price.\");\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch event details:\", error);\r\n                toast.error(\"Could not load event details.\");\r\n            }\r\n        };\r\n        fetchPrice();\r\n    }, []); // Run once on mount\r\n\r\n    // --- Data Fetching Functions --- (Using useCallback to fix dependency warning)\r\n    const fetchOwnedTickets = useCallback(async () => {\r\n        if (!walletAddress) return;\r\n        console.log(\"Fetching owned tickets...\");\r\n        try {\r\n            const ownedIds = await getMyTicketsUtil(walletAddress);\r\n            // Fetch details including metadata for each owned ID\r\n            const ownedDetailsPromises = ownedIds.map(async (id: number): Promise<TicketData | null> => {\r\n                try {\r\n                    // 1. Get Token URI from contract\r\n                    const uri = await getTokenMetadataURI(id); // Use blockchain util\r\n                    // 2. Fetch Metadata from URI\r\n                    const metadata = await fetchMetadataFromUri(uri); // Use helper\r\n                    // 3. Get other details if needed (e.g., specific seat from contract?)\r\n                    // const qrHash = await getQRHash(id); // Example\r\n                    // 4. Construct TicketData object\r\n                    return {\r\n                        id,\r\n                        // Use data from metadata if available, fallback otherwise\r\n                        eventName: metadata?.name || `Owned Ticket ${id}`,\r\n                        price: eventPrice || 'N/A', // Price usually from event, not metadata\r\n                        // Seat number might be an attribute in metadata or stored separately\r\n                        seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\r\n                        qrValue: `qr-${id}`, // Replace with actual QR data source if available\r\n                        imageUrl: metadata?.image || undefined, // Get image URL from metadata\r\n                        metadata // Store full metadata for potential future use\r\n                    };\r\n                } catch (detailError) {\r\n                    console.error(`Failed to fetch details for owned token ${id}:`, detailError);\r\n                    return null;\r\n                }\r\n            });\r\n            const resolvedDetails = (await Promise.all(ownedDetailsPromises)).filter(Boolean) as TicketData[];\r\n            setOwnedTickets(resolvedDetails);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch owned tickets:\", error);\r\n            toast.error(\"Could not load your owned tickets.\");\r\n            setOwnedTickets([]);\r\n        }\r\n    }, [walletAddress, eventPrice]);\r\n\r\n    const fetchAvailableTickets = useCallback(async () => {\r\n        if (!walletAddress || !eventPrice) return;\r\n        console.log(\"Fetching available tickets...\");\r\n        try {\r\n            if (USE_MOCK_DATA) {\r\n                // Calculate ETH price in wei for potential future operations (using parseEther here)\r\n                const priceInWei = parseEther(eventPrice);\r\n                console.log(\"Price in Wei:\", priceInWei.toString());\r\n\r\n                // Using mock data with short delay to simulate API call\r\n                await new Promise(resolve => setTimeout(resolve, 500));\r\n                \r\n                // Filter out tickets the user already owns\r\n                const currentOwnedIds = ownedTickets.map(t => t.id);\r\n                const mockAvailable = MOCK_AVAILABLE_TICKETS\r\n                    .filter(t => !currentOwnedIds.includes(t.id))\r\n                    .map(t => ({ ...t, price: eventPrice }) as TicketData);\r\n                \r\n                setAvailableTickets(mockAvailable);\r\n            } else {\r\n                // Real implementation using blockchain\r\n                // 1. Get available ticket IDs\r\n                const availableIds = await getAvailableTicketsUtil();\r\n                \r\n                // 2. Fetch metadata for each available ticket\r\n                const availableDetailsPromises = availableIds.map(async (id: number): Promise<TicketData | null> => {\r\n                    try {\r\n                        // Get Token URI from contract\r\n                        const uri = await getTokenMetadataURI(id);\r\n                        // Fetch Metadata from URI\r\n                        const metadata = await fetchMetadataFromUri(uri);\r\n                        \r\n                        // Construct TicketData object\r\n                        return {\r\n                            id,\r\n                            // Use data from metadata if available, fallback otherwise\r\n                            eventName: metadata?.name || `Ticket ${id}`,\r\n                            price: eventPrice,\r\n                            // Seat number from metadata attribute\r\n                            seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\r\n                            qrValue: `qr-${id}`, // Placeholder for QR value\r\n                            imageUrl: metadata?.image || undefined, // Image URL from metadata\r\n                            metadata // Store full metadata\r\n                        };\r\n                    } catch (detailError) {\r\n                        console.error(`Failed to fetch details for available token ${id}:`, detailError);\r\n                        return null;\r\n                    }\r\n                });\r\n                \r\n                const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\r\n                setAvailableTickets(resolvedDetails);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch available tickets:\", error);\r\n            toast.error(\"Could not load available tickets.\");\r\n            setAvailableTickets([]);\r\n        }\r\n    }, [walletAddress, eventPrice, ownedTickets]);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => { // Make async to await fetches\r\n            // Reset loading state only when prerequisites are met\r\n            setLoadingTickets(true); // Set loading true when dependencies change\r\n\r\n            if (walletAddress && user && networkState?.isCorrect && eventPrice !== null) { // Added eventPrice check\r\n                await fetchOwnedTickets(); // Wait for owned tickets first\r\n                const vipRequired = process.env.REACT_APP_VIP_REQUIRED === 'true';\r\n                if (!vipRequired || isVIP === true) {\r\n                    await fetchAvailableTickets(); // Then fetch available\r\n                } else if (isVIP === false) {\r\n                    setAvailableTickets([]);\r\n                    console.log(\"VIP required, user is not VIP. Not fetching available tickets.\");\r\n                }\r\n                setLoadingTickets(false); // Set loading false after fetches complete\r\n            } else {\r\n                // Clear lists and set loading false if prerequisites not met\r\n                setAvailableTickets([]);\r\n                setOwnedTickets([]);\r\n                // Keep loading true until prerequisites are met, or set false if needed\r\n                setLoadingTickets(false); // Set false if stuck waiting for prerequisites\r\n                if (!eventPrice) console.log(\"Waiting for event price...\");\r\n                // Add logs for other missing prerequisites if helpful\r\n            }\r\n        };\r\n        loadData();\r\n    }, [isVIP, walletAddress, user, networkState, eventPrice, fetchOwnedTickets, fetchAvailableTickets, refreshTrigger]); // Added refreshTrigger to dependencies\r\n\r\n    // --- Event Handlers ---\r\n    const handleBuyTicket = async (ticketId: string | number) => {\r\n        // 1. Pre-checks (Added null check for eventPrice before calling util)\r\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\r\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\r\n        if (isVIP === null && process.env.REACT_APP_VIP_REQUIRED === 'true') return toast.error('Please complete VIP verification.');\r\n        if (!eventPrice) return toast.error('Event price is not available.'); // Crucial check\r\n\r\n        // 2. VIP Limit Check\r\n        const isInsider = isVIP === true;\r\n        const ownedTicketCount = ownedTickets.length;\r\n        if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\r\n            return toast.error(\"VIP members are limited to 1 ticket.\");\r\n        }\r\n\r\n        // 3. Execute Buy\r\n        setBuyingTicketId(ticketId);\r\n        toast.loading('Processing transaction...', { id: `buy-${ticketId}` }); // Use template literal\r\n        try {\r\n            const ticketIdNum = Number(ticketId);\r\n            const quantity = 1;\r\n            const isOutsider = !isInsider;\r\n\r\n            // --- VERIFY ARGUMENTS AND ORDER with your blockchain.ts file ---\r\n            // Assuming signature: buyTicket(ticketIdNum, priceAsString, quantityNum, isOutsiderBool)\r\n            // FIX: Ensure the type matches what buyTicketUtil expects.\r\n            // Based on the error, it expects the first argument (ticket ID) as a string.\r\n            // ----------------------------------------------------------------\r\n            const txHash = await buyTicketUtil(String(ticketIdNum), eventPrice, Boolean(quantity), BigInt(isOutsider)); // Convert ticketIdNum to string\r\n\r\n            toast.success(<>Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a></>, { id: `buy-${ticketId}`, duration: 6000 }); // Use template literal\r\n            await fetchOwnedTickets();\r\n            await fetchAvailableTickets();\r\n        } catch (error: any) {\r\n            console.error(\"Buy Ticket Failed:\", error);\r\n            toast.error(`Purchase Failed: ${error.message}`, { id: `buy-${ticketId}`, duration: 6000 }); // Use template literal\r\n        } finally {\r\n            setBuyingTicketId(null);\r\n        }\r\n    };\r\n\r\n    const handleResaleTicket = async (tokenId: number) => {\r\n        if (!walletAddress || !user) return toast.error('Connect wallet and log in first.');\r\n        if (!networkState?.isCorrect) { toast.error('Incorrect network. Please switch.'); await switchNetwork(); return; }\r\n\r\n        setResellingTicketId(tokenId);\r\n        toast.loading('Processing resale...', { id: `resell-${tokenId}` }); // Use template literal\r\n        try {\r\n            const txHash = await resellTicketUtil(tokenId);\r\n            toast.success(<>Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a></>, { id: `resell-${tokenId}`, duration: 6000 }); // Use template literal\r\n            await fetchOwnedTickets();\r\n        } catch (error: any) {\r\n            console.error(\"Resell Failed:\", error);\r\n            toast.error(`Resale Failed: ${error.message}`, { id: `resell-${tokenId}`, duration: 6000 }); // Use template literal\r\n        } finally {\r\n            setResellingTicketId(null);\r\n        }\r\n     };\r\n\r\n    // --- VIP Verification Handler ---\r\n    const handleVIPVerified = () => {\r\n        // Force a refresh of the marketplace data after successful VIP verification\r\n        console.log(\"VIP verified, refreshing marketplace data...\");\r\n        setRefreshTrigger(prev => prev + 1);\r\n    };\r\n\r\n    // --- Render Logic ---\r\n    if (!walletAddress) return <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please connect your wallet.</p>;\r\n    if (!user) return <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please log in to view the marketplace.</p>;\r\n    if (!networkState?.isCorrect) return <div className=\"text-center\"><p className=\"text-error text-lg animate-fade-in mb-4\">Wrong Network Detected ({networkState?.currentNetwork?.name || 'Unknown'}).</p><GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton></div>;\r\n\r\n    // VIP Check Step with updated callback\r\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\r\n        // If VIP required and not VIP, show verification form or denial message\r\n        return (\r\n            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"max-w-md mx-auto\">\r\n                <VIPVerificationForm onVerified={handleVIPVerified} />\r\n                {/* Access denied message is now shown in VIPVerificationForm component only after verification attempt */}\r\n            </motion.div>\r\n        );\r\n    }\r\n\r\n    // Main Marketplace View\r\n    return (\r\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"space-y-12\">\r\n            {/* My Tickets Section */}\r\n            <section>\r\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\r\n                {/* Add loading state? */}\r\n                {ownedTickets.length > 0 ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {ownedTickets.map((ticket) => (\r\n                            <NFTTicketCard\r\n                                key={ticket.id}\r\n                                ticket={ticket}\r\n                                onBuy={() => {}} // Owned tickets don't have a buy button\r\n                                isOwned={true}\r\n                                // --- Reminder: Update NFTTicketCardProps in NFTTicketCard.tsx ---\r\n                                onResell={handleResaleTicket}\r\n                                isReselling={resellingTicketId === ticket.id}\r\n                                // --------------------------------------------------------------\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <p className=\"text-center text-text-secondary\">You don't own any tickets yet.</p>\r\n                )}\r\n            </section>\r\n\r\n            {/* Available Tickets Section */}\r\n            <section>\r\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\r\n                {loadingTickets ? ( // Use loading state for skeletons\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {[...Array(4)].map((_, index) => <NFTTicketCardSkeleton key={index} />)}\r\n                    </div>\r\n                ) : availableTickets.length > 0 ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {availableTickets.map((ticket) => (\r\n                            <NFTTicketCard\r\n                                key={ticket.id}\r\n                          a      ticket={ticket}\r\n                                onBuy={handleBuyTicket}\r\n                                isOwned={false}\r\n                                isBuying={buyingTicketId === ticket.id}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <p className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\">No tickets currently available for purchase.</p>\r\n                )}\r\n            </section>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}