{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\contexts\\\\VIPContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VIPContext = /*#__PURE__*/createContext(undefined);\nexport const VIPProvider = ({\n  children\n}) => {\n  _s();\n  const [isVIP, setIsVIP] = useState(null);\n  const [checkingVIP, setCheckingVIP] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const {\n    user\n  } = useAuth();\n  const checkVIPStatus = async (name, rollNumber, walletAddress) => {\n    if (!user) {\n      toast.error(\"Please log in before checking VIP status.\");\n      return false;\n    }\n    setCheckingVIP(true);\n    const toastId = 'vip-check';\n    toast.loading('Verifying VIP Status...', {\n      id: toastId\n    });\n    try {\n      const response = await checkVIPApi(name, rollNumber, walletAddress);\n      if (response.isVIP) {\n        // Store the wallet address for this user\n        if (user && response.walletAddress) {\n          localStorage.setItem(`vip_wallet_${user.uid}`, response.walletAddress);\n          setWalletAddress(response.walletAddress);\n        }\n        setIsVIP(true);\n        toast.success('✅ VIP Status Verified!');\n      } else {\n        setIsVIP(false);\n        toast.error(response.message || '❌ Access Denied. Not on VIP list.');\n      }\n      return response.isVIP;\n    } catch (error) {\n      var _error$response;\n      console.error(\"VIP Check API Error:\", error);\n      toast.dismiss(toastId);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n        toast.error('Authentication required. Please log in first.');\n      } else {\n        toast.error(error.message || 'Error checking VIP status. Please try again.');\n      }\n      setIsVIP(false);\n      setWalletAddress(null);\n      return false;\n    } finally {\n      setCheckingVIP(false);\n    }\n  };\n  const resetVIP = () => {\n    setIsVIP(null);\n    setWalletAddress(null);\n    if (user) {\n      localStorage.removeItem(`vip_wallet_${user.uid}`);\n    }\n  };\n\n  // Check for stored VIP status on mount and when user changes\n  useEffect(() => {\n    const checkStoredVIPStatus = async () => {\n      if (user) {\n        try {\n          // Check if we have stored VIP status for this user\n          const storedStatus = localStorage.getItem(`vip_status_${user.uid}`);\n          const storedWallet = localStorage.getItem(`vip_wallet_${user.uid}`);\n          if (storedStatus !== null && storedWallet !== null) {\n            // If we have stored status, use it\n            const isVIP = storedStatus === 'true';\n            setIsVIP(isVIP);\n            setWalletAddress(storedWallet);\n            if (isVIP) {\n              toast.success('✅ VIP Status Verified!');\n            }\n          } else {\n            // If no stored status, trigger verification\n            await checkVIPStatus('', '', ''); // This will be handled by the landing page\n          }\n        } catch (error) {\n          console.error(\"Error checking VIP status:\", error);\n          setIsVIP(false);\n          setWalletAddress(null);\n        }\n      } else {\n        // Reset if no user\n        setIsVIP(null);\n        setWalletAddress(null);\n        localStorage.removeItem('vip_status');\n        localStorage.removeItem('vip_wallet');\n      }\n    };\n    checkStoredVIPStatus();\n  }, [user]);\n\n  // Only check VIP status when entering marketplace\n  useEffect(() => {\n    if (user && window.location.pathname === '/marketplace') {\n      // Only check VIP status if not already verified\n      if (!isVIP) {\n        toast.error('VIP verification required before accessing marketplace.');\n      }\n    }\n  }, [user, window.location.pathname, isVIP]);\n  const value = {\n    isVIP,\n    checkingVIP,\n    walletAddress,\n    checkVIPStatus,\n    resetVIP\n  };\n  return /*#__PURE__*/_jsxDEV(VIPContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(VIPProvider, \"ap57iMhVbAufFyj1HkT/Acx+7mw=\", false, function () {\n  return [useAuth];\n});\n_c = VIPProvider;\nexport const useVIP = () => {\n  _s2();\n  const context = useContext(VIPContext);\n  if (context === undefined) {\n    throw new Error('useVIP must be used within a VIPProvider');\n  }\n  return context;\n};\n_s2(useVIP, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default VIPContext;\nvar _c;\n$RefreshReg$(_c, \"VIPProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","checkVIPApi","toast","jsxDEV","_jsxDEV","VIPContext","undefined","VIPProvider","children","_s","isVIP","setIsVIP","checkingVIP","setCheckingVIP","walletAddress","setWalletAddress","user","checkVIPStatus","name","rollNumber","error","toastId","loading","id","response","localStorage","setItem","uid","success","message","_error$response","console","dismiss","status","resetVIP","removeItem","checkStoredVIPStatus","storedStatus","getItem","storedWallet","window","location","pathname","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useVIP","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/contexts/VIPContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\n\ninterface CheckVIPResponse {\n    isVIP: boolean;\n    message?: string;\n    walletAddress?: string;\n}\n\ninterface VIPContextType {\n    isVIP: boolean | null;\n    checkingVIP: boolean;\n    walletAddress: string | null;\n    checkVIPStatus: (name: string, rollNumber: string, walletAddress: string) => Promise<boolean>;\n    resetVIP: () => void;\n}\n\nconst VIPContext = createContext<VIPContextType | undefined>(undefined);\n\nexport const VIPProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [isVIP, setIsVIP] = useState<boolean | null>(null);\n    const [checkingVIP, setCheckingVIP] = useState<boolean>(false);\n    const [walletAddress, setWalletAddress] = useState<string | null>(null);\n    const { user } = useAuth();\n    \n    const checkVIPStatus = async (name: string, rollNumber: string, walletAddress: string): Promise<boolean> => {\n        if (!user) {\n            toast.error(\"Please log in before checking VIP status.\");\n            return false;\n        }\n        \n        setCheckingVIP(true);\n        const toastId = 'vip-check';\n        toast.loading('Verifying VIP Status...', { id: toastId });\n        \n        try {\n            const response = await checkVIPApi(name, rollNumber, walletAddress);\n            \n            if (response.isVIP) {\n                // Store the wallet address for this user\n                if (user && response.walletAddress) {\n                    localStorage.setItem(`vip_wallet_${user.uid}`, response.walletAddress);\n                    setWalletAddress(response.walletAddress);\n                }\n                \n                setIsVIP(true);\n                toast.success('✅ VIP Status Verified!');\n            } else {\n                setIsVIP(false);\n                toast.error(response.message || '❌ Access Denied. Not on VIP list.');\n            }\n            \n            return response.isVIP;\n        } catch (error: any) {\n            console.error(\"VIP Check API Error:\", error);\n            toast.dismiss(toastId);\n            if (error.response?.status === 403) {\n                toast.error('Authentication required. Please log in first.');\n            } else {\n                toast.error(error.message || 'Error checking VIP status. Please try again.');\n            }\n            setIsVIP(false);\n            setWalletAddress(null);\n            return false;\n        } finally {\n            setCheckingVIP(false);\n        }\n    };\n\n    const resetVIP = () => {\n        setIsVIP(null);\n        setWalletAddress(null);\n        if (user) {\n            localStorage.removeItem(`vip_wallet_${user.uid}`);\n        }\n    };\n\n    // Check for stored VIP status on mount and when user changes\n    useEffect(() => {\n        const checkStoredVIPStatus = async () => {\n            if (user) {\n                try {\n                    // Check if we have stored VIP status for this user\n                    const storedStatus = localStorage.getItem(`vip_status_${user.uid}`);\n                    const storedWallet = localStorage.getItem(`vip_wallet_${user.uid}`);\n                    \n                    if (storedStatus !== null && storedWallet !== null) {\n                        // If we have stored status, use it\n                        const isVIP = storedStatus === 'true';\n                        setIsVIP(isVIP);\n                        setWalletAddress(storedWallet);\n                        if (isVIP) {\n                            toast.success('✅ VIP Status Verified!');\n                        }\n                    } else {\n                        // If no stored status, trigger verification\n                        await checkVIPStatus('', '', ''); // This will be handled by the landing page\n                    }\n                } catch (error) {\n                    console.error(\"Error checking VIP status:\", error);\n                    setIsVIP(false);\n                    setWalletAddress(null);\n                }\n            } else {\n                // Reset if no user\n                setIsVIP(null);\n                setWalletAddress(null);\n                localStorage.removeItem('vip_status');\n                localStorage.removeItem('vip_wallet');\n            }\n        };\n        \n        checkStoredVIPStatus();\n    }, [user]);\n\n    // Only check VIP status when entering marketplace\n    useEffect(() => {\n        if (user && window.location.pathname === '/marketplace') {\n            // Only check VIP status if not already verified\n            if (!isVIP) {\n                toast.error('VIP verification required before accessing marketplace.');\n            }\n        }\n    }, [user, window.location.pathname, isVIP]);\n\n    const value = { isVIP, checkingVIP, walletAddress, checkVIPStatus, resetVIP };\n\n    return (\n        <VIPContext.Provider value={value}>\n            {children}\n        </VIPContext.Provider>\n    );\n};\n\nexport const useVIP = () => {\n    const context = useContext(VIPContext);\n    if (context === undefined) {\n        throw new Error('useVIP must be used within a VIPProvider');\n    }\n    return context;\n};\n\nexport default VIPContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}