{"ast":null,"code":"// src/api/index.ts\nimport axios from 'axios';\nimport { getCurrentUserIdToken } from '../firebase/auth'; // To get the token\n\n// --- IMPORTANT: Set your backend URL ---\n// Use environment variables for this in a real app\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api'; // Your backend server URL\n// ---------------------------------------\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// --- Interceptor to add Authorization token to requests ---\napiClient.interceptors.request.use(async config => {\n  const token = await getCurrentUserIdToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// === API Functions ===\n\n// --- VIP API Functions ---\n\nexport const checkVIPApi = async (name, rollNo) => {\n  try {\n    const response = await apiClient.post('/check-vip', {\n      name,\n      rollNo\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    console.error(\"API Error (checkVIP):\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Failed to check VIP status.\");\n  }\n};\nexport const uploadVipCsvApi = async file => {\n  const formData = new FormData();\n  formData.append('vipCsvFile', file); // Key must match multer field name in backend\n\n  try {\n    // Need to override Content-Type for multipart/form-data\n    const response = await apiClient.post('/upload-vip-csv', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error(\"API Error (uploadVipCsv):\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || \"Failed to upload VIP CSV.\");\n  }\n};\n\n// --- Ticket API Functions ---\n\nexport const getAllTicketsApi = async () => {\n  try {\n    const response = await apiClient.get('/get-all-tickets');\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response6, _error$response6$data;\n    console.error(\"API Error (getAllTickets):\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || \"Failed to fetch ticket data.\");\n  }\n};\nexport default apiClient; // Export configured instance if needed elsewhere","map":{"version":3,"names":["axios","getCurrentUserIdToken","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","error","Promise","reject","checkVIPApi","name","rollNo","response","post","data","_error$response","_error$response2","_error$response2$data","console","message","Error","uploadVipCsvApi","file","formData","FormData","append","_error$response3","_error$response4","_error$response4$data","getAllTicketsApi","get","_error$response5","_error$response6","_error$response6$data"],"sources":["C:/Users/negis/Downloads/Archive/src/firebase/index.ts"],"sourcesContent":["// src/api/index.ts\r\nimport axios from 'axios';\r\nimport { getCurrentUserIdToken } from '../firebase/auth'; // To get the token\r\n\r\n// --- IMPORTANT: Set your backend URL ---\r\n// Use environment variables for this in a real app\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5001/api'; // Your backend server URL\r\n// ---------------------------------------\r\n\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// --- Interceptor to add Authorization token to requests ---\r\napiClient.interceptors.request.use(\r\n    async (config) => {\r\n        const token = await getCurrentUserIdToken();\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// === API Functions ===\r\n\r\n// --- VIP API Functions ---\r\ninterface CheckVIPResponse {\r\n    isVIP: boolean;\r\n}\r\n\r\nexport const checkVIPApi = async (name: string, rollNo: string): Promise<CheckVIPResponse> => {\r\n    try {\r\n        const response = await apiClient.post<CheckVIPResponse>('/check-vip', { name, rollNo });\r\n        return response.data;\r\n    } catch (error: any) {\r\n        console.error(\"API Error (checkVIP):\", error.response?.data || error.message);\r\n        throw new Error(error.response?.data?.message || \"Failed to check VIP status.\");\r\n    }\r\n};\r\n\r\nexport const uploadVipCsvApi = async (file: File): Promise<any> => {\r\n    const formData = new FormData();\r\n    formData.append('vipCsvFile', file); // Key must match multer field name in backend\r\n\r\n    try {\r\n        // Need to override Content-Type for multipart/form-data\r\n        const response = await apiClient.post('/upload-vip-csv', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    } catch (error: any) {\r\n        console.error(\"API Error (uploadVipCsv):\", error.response?.data || error.message);\r\n        throw new Error(error.response?.data?.message || \"Failed to upload VIP CSV.\");\r\n    }\r\n};\r\n\r\n// --- Ticket API Functions ---\r\nexport interface TicketData {\r\n    tokenId: number;\r\n    owner: string;\r\n    eventName?: string;\r\n    seat?: string;\r\n    qrHash?: string;\r\n    // metadataURI?: string | null; // If used\r\n}\r\n\r\nexport const getAllTicketsApi = async (): Promise<TicketData[]> => {\r\n    try {\r\n        const response = await apiClient.get<TicketData[]>('/get-all-tickets');\r\n        return response.data;\r\n    } catch (error: any) {\r\n        console.error(\"API Error (getAllTickets):\", error.response?.data || error.message);\r\n        throw new Error(error.response?.data?.message || \"Failed to fetch ticket data.\");\r\n    }\r\n};\r\n\r\nexport default apiClient; // Export configured instance if needed elsewhere"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}