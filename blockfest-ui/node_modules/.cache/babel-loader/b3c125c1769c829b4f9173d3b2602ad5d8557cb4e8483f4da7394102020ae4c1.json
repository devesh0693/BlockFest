{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { parseEther } from 'ethers'; // formatEther is used by blockchain.ts, parseEther for sending tx\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport { getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails, getTokenMetadataURI, getEventManagerContract } from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst availableTicketMetadataCIDs = {\n  0: \"bafkreifkrvwbi3hlxcii7uwsaunx73mdcy34jjx7nitrhfgag2vudg5ujm\",\n  1: \"bafkreifpncyhhgrna7iletoaquzn2dgnesz5xvim6ygqizldimw2bud6pm\",\n  2: \"bafkreigrghfwlh3dhm4a6imin2jzkwg7qjwqza2r5dymocfjn77hyrztmi\",\n  3: \"bafkreibqxwclnkhlkjc3fvlco7tecujwdjiohayilfywxaeoqeeuazquzi\",\n  4: \"bafkreieqkoa2lp36wdljvyztz2gi33n7kcsrnfp5ybu3cs3mrgoeq5pavm\",\n  5: \"bafkreidf3ahogkojhoe57e6wlwb3prmetqeoqmfty2lymkchc2mwsuftsu\",\n  6: \"bafkreidecmmrdujzb45oe7jgf7d76ndtpmhwncimo7ez3afbiccv7342ju\"\n};\nconst preloadImage = src => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => resolve();\n    img.onerror = () => reject();\n  });\n};\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    isVIP,\n    checkingVIP,\n    checkVIPStatus,\n    walletAddress: vipWalletAddress\n  } = useVIP();\n  const {\n    user,\n    loading\n  } = useAuth();\n  const {\n    walletAddress,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [dataInitialized, setDataInitialized] = useState(false);\n  const [eventPrice, setEventPrice] = useState(null);\n  const lastFetchTimeRef = useRef(0);\n\n  // Preload images - moved inside the component\n  useEffect(() => {\n    const imageCIDs = [\"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\", \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\", \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\", \"bafybeiarmcnke3q4t5tfo765rj7keylgmcu4oipag5lnugfrp4usdopyne\", \"bafybeiez6wvn5gjta3fkzvv65oldoevxbidmgt2v7a4fioupf34mnxzxuy\", \"bafybeie2dqx7sizq7wi4nkwikvaluhokmfnmwcqsidvtt45nvxbzautt2i\", \"bafybeidiruone3wadolwzvzm4hgrkvyddqrqoy73pd7c6y2hensxjzrarq\"];\n    const preload = async () => {\n      const urls = imageCIDs.map(cid => `https://ipfs.io/ipfs/${cid}`);\n      await Promise.allSettled(urls.map(preloadImage));\n      console.log(\"All images preloaded.\");\n    };\n    preload();\n  }, []);\n\n  // Fetch price only once on mount\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const details = await getEventDetails();\n        if (details) {\n          // CORRECTED: Use the already formatted strings directly\n          setEventPrice({\n            insider: details.ticketPriceInsider,\n            outsider: details.ticketPriceOutsider\n          });\n        } else {\n          console.warn(\"Ticket price not found in event details.\");\n          toast.error(\"Could not determine event price.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        // The error message in the toast was \"Could not load event details.\"\n        // The console error includes the specific TypeError.\n        // If the error persists after this fix, the original error is likely within getEventDetails itself.\n        toast.error(`Failed to load event details. Check console for specifics.`);\n      }\n    };\n    fetchPrice();\n  }, []); // Empty dependency array means this runs once on component mount\n\n  // Fetch owned tickets with rate limiting\n  const fetchOwnedTickets = useCallback(async (force = false) => {\n    if (!walletAddress) return;\n    const now = Date.now();\n    if (!force && now - lastFetchTimeRef.current < 3000) {\n      console.log(\"Skipping fetch due to rate limit\");\n      return;\n    }\n    console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n    lastFetchTimeRef.current = now;\n    try {\n      console.log(\"Calling getMyTicketsUtil...\");\n      const ownedIds = await getMyTicketsUtil(walletAddress);\n      console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n      if (!ownedIds || ownedIds.length === 0) {\n        console.log(\"No owned tickets found, clearing owned tickets state\");\n        setOwnedTickets([]);\n        return;\n      }\n\n      // Fetch metadata for each owned ticket\n      const ticketsData = await Promise.all(ownedIds.map(async id => {\n        var _metadata, _metadata2, _metadata2$attributes, _metadata2$attributes2, _metadata3, _metadata3$image;\n        let metadata = undefined;\n        let uri = undefined;\n        try {\n          uri = await getTokenMetadataURI(id); // fetch tokenURI from contract\n          metadata = uri ? await fetchMetadataFromUri(uri) : undefined;\n        } catch (e) {\n          console.error(`Failed to fetch metadata for owned ticket ${id}:`, e);\n        }\n        const eventName = ((_metadata = metadata) === null || _metadata === void 0 ? void 0 : _metadata.name) || `Ticket ${id}`;\n        const seatNumber = ((_metadata2 = metadata) === null || _metadata2 === void 0 ? void 0 : (_metadata2$attributes = _metadata2.attributes) === null || _metadata2$attributes === void 0 ? void 0 : (_metadata2$attributes2 = _metadata2$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata2$attributes2 === void 0 ? void 0 : _metadata2$attributes2.value) || `Seat-${id}`;\n        const imageUrl = ((_metadata3 = metadata) === null || _metadata3 === void 0 ? void 0 : (_metadata3$image = _metadata3.image) === null || _metadata3$image === void 0 ? void 0 : _metadata3$image.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/')) || undefined;\n        const price = eventPrice ? eventPrice.outsider : '0.001';\n        return {\n          id,\n          eventName,\n          price,\n          seatNumber,\n          qrValue: `qr-${id}-${Date.now()}`,\n          imageUrl,\n          metadata: {\n            ...metadata,\n            uri\n          }\n        };\n      }));\n      setOwnedTickets(ticketsData);\n      setDataInitialized(true);\n    } catch (error) {\n      console.error(\"Failed to fetch owned tickets:\", error);\n      toast.error(\"Could not load your owned tickets. Please try again.\");\n    }\n  }, [walletAddress, eventPrice]); // Added eventPrice as a dependency if it's used to determine display price of owned tickets\n\n  // Initial fetch and periodic refresh\n  useEffect(() => {\n    if (walletAddress) {\n      fetchOwnedTickets(true);\n      const refreshInterval = setInterval(() => {\n        console.log(\"Periodic refresh of owned tickets\");\n        fetchOwnedTickets(false);\n      }, 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [walletAddress, fetchOwnedTickets]);\n\n  // Fetch available tickets when dependencies change\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      if (!walletAddress || !eventPrice) return;\n      try {\n        console.log(\"Fetching available tickets...\");\n        const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n          id: parseInt(id),\n          cid: cid\n        }));\n        console.log(\"Processing available tickets:\", availableTicketsData);\n        const availableDetailsPromises = availableTicketsData.map(async ({\n          id,\n          cid\n        }) => {\n          try {\n            var _metadata$attributes, _metadata$attributes$, _metadata$image;\n            const uri = `ipfs://${cid}`;\n            console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n            const metadata = await fetchMetadataFromUri(uri);\n            if (!metadata) {\n              console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n              return null;\n            }\n            const price = isVIP ? eventPrice.insider : eventPrice.outsider;\n            const ticketData = {\n              id,\n              eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n              price,\n              seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n              qrValue: `qr-${id}`,\n              imageUrl: (metadata === null || metadata === void 0 ? void 0 : (_metadata$image = metadata.image) === null || _metadata$image === void 0 ? void 0 : _metadata$image.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/')) || undefined,\n              metadata: {\n                ...metadata,\n                uri // ensure uri is present for buyTicket\n              }\n            };\n            console.log(`Processed ticket ${id}:`, ticketData);\n            return ticketData;\n          } catch (detailError) {\n            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n            return null;\n          }\n        });\n        const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n        console.log(\"Final available tickets:\", resolvedDetails);\n        setAvailableTickets(resolvedDetails);\n      } catch (error) {\n        console.error(\"Failed to fetch available tickets:\", error);\n        toast.error(\"Could not load available tickets. Please try again.\");\n      }\n    };\n    fetchAvailable();\n  }, [walletAddress, eventPrice, isVIP]); // Added isVIP\n\n  const handleVIPVerification = async (name, rollNumber) => {\n    try {\n      var _document$querySelect;\n      // Get wallet address from the form\n      const walletAddressInput = (_document$querySelect = document.querySelector('#vipWalletAddress')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.value;\n      if (!walletAddressInput) {\n        toast.error('Please enter your wallet address.');\n        return;\n      }\n      await checkVIPStatus(name, rollNumber, walletAddressInput);\n      // After successful verification, refresh marketplace data\n      await fetchOwnedTickets(true); // Force fetch owned tickets\n      const fetchAvailable = async () => {\n        if (!walletAddress || !eventPrice) return;\n        try {\n          console.log(\"Fetching available tickets...\");\n          const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n            id: parseInt(id),\n            cid: cid\n          }));\n          console.log(\"Processing available tickets:\", availableTicketsData);\n          const availableDetailsPromises = availableTicketsData.map(async ({\n            id,\n            cid\n          }) => {\n            try {\n              var _metadata$attributes2, _metadata$attributes3, _metadata$image2;\n              const uri = `ipfs://${cid}`;\n              console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n              const metadata = await fetchMetadataFromUri(uri);\n              if (!metadata) {\n                console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n                return null;\n              }\n              const price = isVIP ? eventPrice.insider : eventPrice.outsider;\n              const ticketData = {\n                id,\n                eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket ${id}`,\n                price,\n                seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes2 = metadata.attributes) === null || _metadata$attributes2 === void 0 ? void 0 : (_metadata$attributes3 = _metadata$attributes2.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes3 === void 0 ? void 0 : _metadata$attributes3.value) || `Seat-${id}`,\n                qrValue: `qr-${id}`,\n                imageUrl: (metadata === null || metadata === void 0 ? void 0 : (_metadata$image2 = metadata.image) === null || _metadata$image2 === void 0 ? void 0 : _metadata$image2.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/')) || undefined,\n                metadata: {\n                  ...metadata,\n                  uri // ensure uri is present for buyTicket\n                }\n              };\n              console.log(`Processed ticket ${id}:`, ticketData);\n              return ticketData;\n            } catch (detailError) {\n              console.error(`Failed to fetch details for available token ${id}:`, detailError);\n              return null;\n            }\n          });\n          const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n          console.log(\"Final available tickets:\", resolvedDetails);\n          setAvailableTickets(resolvedDetails);\n        } catch (error) {\n          console.error(\"Failed to fetch available tickets:\", error);\n          toast.error(\"Could not load available tickets. Please try again.\");\n        }\n      };\n      await fetchAvailable(); // Fetch available tickets\n    } catch (error) {\n      console.error(\"VIP verification failed:\", error);\n    }\n  };\n  useEffect(() => {\n    if (user && !isVIP && !checkingVIP) {\n      toast.error('VIP verification required. Please verify your VIP status first.');\n    }\n  }, [user, isVIP, checkingVIP]);\n  const handleVIPVerified = useCallback(() => {\n    console.log(\"VIP verified, data will refresh automatically through effects\");\n    // Data refresh is handled by useEffects that depend on `isVIP` or `eventPrice`\n    // If `isVIP` status directly changes `eventPrice` or how tickets are displayed,\n    // the existing `useEffect` for available tickets should re-run.\n    // You might also want to force a refresh of available tickets if their price depends on VIP status\n    // and that price is determined/formatted within `WorkspaceAvailable`.\n  }, []);\n  useEffect(() => {\n    const initializeData = async () => {\n      if (walletAddress && !dataInitialized) {\n        console.log(\"Initializing marketplace data...\");\n        try {\n          // Fetch price first if not already fetched, though the dedicated effect should handle it\n          if (!eventPrice) {\n            const details = await getEventDetails();\n            if (details) {\n              setEventPrice({\n                insider: details.ticketPriceInsider,\n                outsider: details.ticketPriceOutsider\n              });\n            }\n          }\n          await fetchOwnedTickets(true); // force fetch\n          setDataInitialized(true);\n        } catch (error) {\n          console.error(\"Error during initial data load:\", error);\n        }\n      }\n    };\n    initializeData();\n  }, [walletAddress, dataInitialized, fetchOwnedTickets, eventPrice]);\n  const handleBuyTicket = async ticketId => {\n    if (!user) {\n      toast.error('Please log in to buy a ticket.');\n      return;\n    }\n    try {\n      var _ticket$metadata, _ticket$metadata2;\n      setBuyingTicketId(ticketId);\n      const toastId = `buy-${ticketId}`;\n      toast.loading('Processing ticket purchase...', {\n        id: toastId\n      });\n\n      // Get the ticket from availableTickets\n      const ticket = availableTickets.find(t => t.id === ticketId);\n      if (!ticket || !ticket.metadata) {\n        toast.dismiss(toastId);\n        toast.error('Ticket not found.');\n        setBuyingTicketId(null);\n        return;\n      }\n\n      // Get the wallet address from VIP verification (already stored in vipWalletAddress)\n      if (!vipWalletAddress) {\n        toast.dismiss(toastId);\n        toast.error('Wallet address not found. Please complete VIP verification first.');\n        setBuyingTicketId(null);\n        return;\n      }\n\n      // Get the ticket price\n      const ticketPrice = isVIP ? eventPrice === null || eventPrice === void 0 ? void 0 : eventPrice.insider : (eventPrice === null || eventPrice === void 0 ? void 0 : eventPrice.outsider) || '0.05';\n      // Generate QR hash\n      const qrHash = `qr-${ticketId}-${Date.now()}`;\n\n      // Debug log for parameters\n      console.log('Buy Ticket Debug:', {\n        ticketId,\n        uri: ticket === null || ticket === void 0 ? void 0 : (_ticket$metadata = ticket.metadata) === null || _ticket$metadata === void 0 ? void 0 : _ticket$metadata.uri,\n        qrHash,\n        ticketPrice,\n        isVIP,\n        walletAddress,\n        vipWalletAddress,\n        eventPrice\n      });\n\n      // Validate parameters\n      if (!(ticket !== null && ticket !== void 0 && (_ticket$metadata2 = ticket.metadata) !== null && _ticket$metadata2 !== void 0 && _ticket$metadata2.uri) || !qrHash || !ticketPrice || !vipWalletAddress) {\n        toast.dismiss(toastId);\n        toast.error('Missing required ticket information. Please try again.');\n        setBuyingTicketId(null);\n        return;\n      }\n      // Check if the user already has a ticket\n      if (!walletAddress) {\n        toast.dismiss(toastId);\n        toast.error('Wallet address not found.');\n        setBuyingTicketId(null);\n        return;\n      }\n      const myTickets = await getMyTicketsUtil(walletAddress);\n      if (myTickets.length > 0 && isVIP) {\n        toast.dismiss(toastId);\n        console.warn('This wallet already owns a ticket as VIP.');\n        toast.error(\"You already own a ticket. Insiders can only buy one ticket.\");\n        setBuyingTicketId(null);\n        return;\n      }\n      if (!isVIP && ticketPrice === (eventPrice === null || eventPrice === void 0 ? void 0 : eventPrice.insider)) {\n        console.warn('Non-VIP is trying to buy with insider price!');\n      }\n      if (isVIP && ticketPrice !== (eventPrice === null || eventPrice === void 0 ? void 0 : eventPrice.insider)) {\n        console.warn('VIP is not using insider price!');\n      }\n      if (!isVIP && ticketPrice !== (eventPrice === null || eventPrice === void 0 ? void 0 : eventPrice.outsider)) {\n        console.warn('Non-VIP is not using outsider price!');\n      }\n      const eventDetails = await getEventDetails();\n      console.log('EventManager contract state:', eventDetails);\n\n      // Check if event is active\n      if (!(eventDetails !== null && eventDetails !== void 0 && eventDetails.isActive)) {\n        toast.dismiss(toastId);\n        toast.error('Event is not active. Ticket purchase is disabled.');\n        setBuyingTicketId(null);\n        return;\n      }\n      const eventManager = await getEventManagerContract();\n      if (!eventManager) {\n        toast.dismiss(toastId);\n        toast.error('Could not connect to the EventManager contract.');\n        setBuyingTicketId(null);\n        return;\n      }\n      const hasTicket = await eventManager.hasTicket(walletAddress);\n      console.log('hasTicket for', walletAddress, ':', hasTicket);\n      await debugTicketPurchaseState(walletAddress, !!isVIP);\n\n      // Call the buy ticket function with recipient as the wallet address from VIP verification\n      let txHash = null;\n      try {\n        const tx = await eventManager.buyTicket(ticket.metadata.uri, qrHash, !isVIP, {\n          value: parseEther(ticketPrice)\n        });\n        txHash = tx.hash;\n        await tx.wait();\n      } catch (err) {\n        var _err$data, _err$error;\n        toast.dismiss(toastId);\n        // Enhanced error logging for revert reasons\n        let reason1 = (err === null || err === void 0 ? void 0 : err.reason) || (err === null || err === void 0 ? void 0 : (_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message) || (err === null || err === void 0 ? void 0 : (_err$error = err.error) === null || _err$error === void 0 ? void 0 : _err$error.message) || (err === null || err === void 0 ? void 0 : err.message) || 'Unknown error';\n        let details1 = '';\n        if (err !== null && err !== void 0 && err.data) {\n          details1 += `\\nError Data: ${JSON.stringify(err.data)}`;\n        }\n        if (err !== null && err !== void 0 && err.error) {\n          details1 += `\\nInner Error: ${JSON.stringify(err.error)}`;\n        }\n        console.error('Buy Ticket Failed:', err, details1);\n        toast.error(`Revert reason: ${reason1}${details1}`);\n        setBuyingTicketId(null);\n        return;\n      }\n      if (txHash) {\n        toast.dismiss(toastId);\n        toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://sepolia.etherscan.io/tx/${txHash}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"underline\",\n            children: \"View Tx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true), {\n          duration: 6000\n        });\n        await fetchOwnedTickets(true);\n      }\n    } catch (error) {\n      var _error$data, _error$error;\n      const toastId = `buy-${ticketId}`;\n      toast.dismiss(toastId);\n      // Enhanced error logging for revert reasons\n      let reason2 = (error === null || error === void 0 ? void 0 : error.reason) || (error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.message) || (error === null || error === void 0 ? void 0 : (_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || (error === null || error === void 0 ? void 0 : error.message) || 'Unknown error';\n      let details2 = '';\n      if (error !== null && error !== void 0 && error.data) {\n        details2 += `\\nError Data: ${JSON.stringify(error.data)}`;\n      }\n      if (error !== null && error !== void 0 && error.error) {\n        details2 += `\\nInner Error: ${JSON.stringify(error.error)}`;\n      }\n      console.error('Buy Ticket Failed:', error, details2);\n      toast.error(`Revert reason: ${reason2}${details2}`);\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResellTicket = async tokenId => {\n    if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) {\n      toast.error('Incorrect network. Please switch.');\n      await switchNetwork();\n      return;\n    }\n    setResellingTicketId(tokenId);\n    const toastId = `resell-${tokenId}`;\n    toast.loading('Processing resale...', {\n      id: toastId\n    });\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await fetchOwnedTickets(true);\n    } catch (error) {\n      console.error('Resell Failed:', error);\n      toast.dismiss(toastId);\n      toast.error(error.message || 'Failed to resell ticket. Please try again.');\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // --- Render Logic ---\n  if (!user) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please log in to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 551,\n    columnNumber: 9\n  }, this);\n  if (!walletAddress) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg animate-fade-in\",\n      children: \"Please connect your wallet to access the marketplace.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 556,\n    columnNumber: 9\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex flex-col items-center justify-center min-h-[400px] space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-error text-lg animate-fade-in\",\n      children: [\"Wrong Network Detected (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 561,\n    columnNumber: 9\n  }, this);\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP === null) {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 13\n    }, this);\n  }\n  if (!isVIP && !checkingVIP) {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"VIP Verification Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto px-4 py-8 w-full\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-accent-light mb-6\",\n          children: \"My Tickets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 21\n        }, this), loading && ownedTickets.length === 0 ?\n        /*#__PURE__*/\n        // Show skeleton only if loading AND no tickets yet\n        _jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-6\",\n          children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `owned-skeleton-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 62\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 25\n        }, this) : ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-6\",\n          children: [ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-[170px]\",\n            children: /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n              ticket: ticket,\n              onBuy: () => {},\n              isOwned: true,\n              onResell: handleResellTicket,\n              isReselling: resellingTicketId === ticket.id\n            }, `owned-${ticket.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 33\n          }, this)), Array.from({\n            length: 4 - ownedTickets.length > 0 ? 4 - ownedTickets.length : 0\n          }).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full invisible\"\n          }, `filler-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-[170px]\",\n            children: /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n              ticket: {\n                id: 0,\n                eventName: 'VIP Ticket - BlockFest',\n                price: '0.001',\n                seatNumber: 'Seat-0',\n                qrValue: 'sample-qr',\n                imageUrl: 'https://ipfs.io/ipfs/bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku'\n              },\n              onBuy: () => {},\n              isOwned: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-accent-light mb-6\",\n          children: \"Available Tickets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 21\n        }, this), loading && availableTickets.length === 0 ?\n        /*#__PURE__*/\n        // Show skeleton only if loading AND no tickets yet\n        _jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-6\",\n          children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `available-skeleton-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 67\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 62\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 25\n        }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-6\",\n          children: [availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-[220px]\",\n            children: /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n              ticket: ticket,\n              onBuy: handleBuyTicket,\n              isOwned: false,\n              isBuying: buyingTicketId === ticket.id\n            }, `available-${ticket.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 33\n          }, this)), Array.from({\n            length: 4 - availableTickets.length > 0 ? 4 - availableTickets.length : 0\n          }).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full invisible\"\n          }, `filler-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No tickets currently available for purchase.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 595,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"W6X9fYhBc9SxFIaOvSK/KQ7bbps=\", false, function () {\n  return [useVIP, useAuth, useWallet];\n});\n_c = MarketplacePage;\nasync function debugTicketPurchaseState(walletAddress, isVIP) {\n  const eventDetails = await getEventDetails();\n  const eventManager = await getEventManagerContract(true);\n  const myTickets = await getMyTicketsUtil(walletAddress);\n  let hasTicket = false;\n  if (eventManager && walletAddress) {\n    hasTicket = await eventManager.hasTicket(walletAddress);\n  }\n  console.log('--- Ticket Purchase Debug ---');\n  console.log('Event Details:', eventDetails);\n  console.log('Wallet Address:', walletAddress);\n  console.log('isVIP:', isVIP);\n  console.log('Already owns ticket (hasTicket):', hasTicket);\n  console.log('Owned ticket IDs:', myTickets);\n  if (eventDetails) {\n    console.log('Event Active:', eventDetails.isActive);\n    console.log('Tickets Sold:', eventDetails.currentTickets, '/', eventDetails.maxTickets);\n    console.log('Insider Price:', eventDetails.ticketPriceInsider);\n    console.log('Outsider Price:', eventDetails.ticketPriceOutsider);\n  }\n  console.log('-----------------------------');\n}\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","toast","motion","parseEther","useAuth","useWallet","useVIP","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","getTokenMetadataURI","getEventManagerContract","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","availableTicketMetadataCIDs","preloadImage","src","Promise","resolve","reject","img","Image","onload","onerror","MarketplacePage","_s","_networkState$current","isVIP","checkingVIP","checkVIPStatus","walletAddress","vipWalletAddress","user","loading","networkState","switchNetwork","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","dataInitialized","setDataInitialized","eventPrice","setEventPrice","lastFetchTimeRef","imageCIDs","preload","urls","map","cid","allSettled","console","log","fetchPrice","details","insider","ticketPriceInsider","outsider","ticketPriceOutsider","warn","error","fetchOwnedTickets","force","now","Date","current","ownedIds","length","ticketsData","all","id","_metadata","_metadata2","_metadata2$attributes","_metadata2$attributes2","_metadata3","_metadata3$image","metadata","undefined","uri","e","eventName","name","seatNumber","attributes","find","attr","trait_type","value","imageUrl","image","replace","price","qrValue","refreshInterval","setInterval","clearInterval","fetchAvailable","availableTicketsData","Object","entries","parseInt","availableDetailsPromises","_metadata$attributes","_metadata$attributes$","_metadata$image","ticketData","detailError","resolvedDetails","filter","Boolean","handleVIPVerification","rollNumber","_document$querySelect","walletAddressInput","document","querySelector","_metadata$attributes2","_metadata$attributes3","_metadata$image2","handleVIPVerified","initializeData","handleBuyTicket","ticketId","_ticket$metadata","_ticket$metadata2","toastId","ticket","t","dismiss","ticketPrice","qrHash","myTickets","eventDetails","isActive","eventManager","hasTicket","debugTicketPurchaseState","txHash","tx","buyTicket","hash","wait","err","_err$data","_err$error","reason1","reason","data","message","details1","JSON","stringify","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","_error$data","_error$error","reason2","details2","handleResellTicket","tokenId","isCorrect","setTimeout","div","initial","opacity","animate","currentNetwork","onClick","process","env","REACT_APP_VIP_REQUIRED","onVerified","Array","_","index","onBuy","isOwned","onResell","isReselling","from","i","isBuying","_c","currentTickets","maxTickets","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\n// Import specific utilities from ethers\nimport { formatEther, parseEther } from 'ethers'; // formatEther is used by blockchain.ts, parseEther for sending tx\n\n// --- Context Hooks ---\nimport { useAuth, useWallet } from '../contexts/AuthContext';\nimport { useVIP } from '../contexts/VIPContext';\n\n// --- Blockchain Utilities ---\nimport {\n    buyTicket as buyTicketUtil,\n    getMyTickets as getMyTicketsUtil,\n    resellTicket as resellTicketUtil,\n    getEventDetails,\n    getTokenMetadataURI,\n    getAvailableTickets as getAvailableTicketsUtil,\n    getEventManagerContract\n} from '../utils/blockchain';\nimport fetchMetadataFromUri from '../utils/metadata';\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\ninterface TicketData {\n    id: number;\n    metadata?: {\n        uri: string;\n    };\n    eventName: string;\n    price: string; // Price stored as formatted string (e.g., \"0.05\")\n    seatNumber: string;\n    qrValue: string;\n    imageUrl?: string;\n}\n\ninterface UserWithWallet {\n    walletAddress?: string;\n}\n\nconst availableTicketMetadataCIDs: { [key: number]: string } = {\n    0: \"bafkreifkrvwbi3hlxcii7uwsaunx73mdcy34jjx7nitrhfgag2vudg5ujm\",\n    1: \"bafkreifpncyhhgrna7iletoaquzn2dgnesz5xvim6ygqizldimw2bud6pm\",\n    2: \"bafkreigrghfwlh3dhm4a6imin2jzkwg7qjwqza2r5dymocfjn77hyrztmi\",\n    3: \"bafkreibqxwclnkhlkjc3fvlco7tecujwdjiohayilfywxaeoqeeuazquzi\",\n    4: \"bafkreieqkoa2lp36wdljvyztz2gi33n7kcsrnfp5ybu3cs3mrgoeq5pavm\",\n    5: \"bafkreidf3ahogkojhoe57e6wlwb3prmetqeoqmfty2lymkchc2mwsuftsu\",\n    6: \"bafkreidecmmrdujzb45oe7jgf7d76ndtpmhwncimo7ez3afbiccv7342ju\",\n};\n\nconst preloadImage = (src: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => resolve();\n    img.onerror = () => reject();\n  });\n};\n\nconst MarketplacePage: React.FC = () => {\n    const { isVIP, checkingVIP, checkVIPStatus, walletAddress: vipWalletAddress } = useVIP();\n    const { user, loading } = useAuth();\n    const { walletAddress, networkState, switchNetwork } = useWallet();\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\n    const [buyingTicketId, setBuyingTicketId] = useState<number | null>(null);\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\n    const [dataInitialized, setDataInitialized] = useState(false);\n    const [eventPrice, setEventPrice] = useState<{ insider: string; outsider: string } | null>(null);\n    const lastFetchTimeRef = useRef<number>(0);\n\n    // Preload images - moved inside the component\n    useEffect(() => {\n      const imageCIDs = [\n        \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n        \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n        \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n        \"bafybeiarmcnke3q4t5tfo765rj7keylgmcu4oipag5lnugfrp4usdopyne\",\n        \"bafybeiez6wvn5gjta3fkzvv65oldoevxbidmgt2v7a4fioupf34mnxzxuy\",\n        \"bafybeie2dqx7sizq7wi4nkwikvaluhokmfnmwcqsidvtt45nvxbzautt2i\",\n        \"bafybeidiruone3wadolwzvzm4hgrkvyddqrqoy73pd7c6y2hensxjzrarq\",\n      ];\n    \n      const preload = async () => {\n        const urls = imageCIDs.map(cid => `https://ipfs.io/ipfs/${cid}`);\n        await Promise.allSettled(urls.map(preloadImage));\n        console.log(\"All images preloaded.\");\n      };\n    \n      preload();\n    }, []);\n\n    // Fetch price only once on mount\n    useEffect(() => {\n        const fetchPrice = async () => {\n            try {\n                const details = await getEventDetails();\n                if (details) {\n                    // CORRECTED: Use the already formatted strings directly\n                    setEventPrice({\n                        insider: details.ticketPriceInsider,\n                        outsider: details.ticketPriceOutsider\n                    });\n                } else {\n                    console.warn(\"Ticket price not found in event details.\");\n                    toast.error(\"Could not determine event price.\");\n                }\n            } catch (error) {\n                console.error(\"Failed to fetch event details:\", error);\n                // The error message in the toast was \"Could not load event details.\"\n                // The console error includes the specific TypeError.\n                // If the error persists after this fix, the original error is likely within getEventDetails itself.\n                toast.error(`Failed to load event details. Check console for specifics.`);\n            }\n        };\n        fetchPrice();\n    }, []); // Empty dependency array means this runs once on component mount\n\n    // Fetch owned tickets with rate limiting\n    const fetchOwnedTickets = useCallback(async (force: boolean = false) => {\n        if (!walletAddress) return;\n        \n        const now = Date.now();\n        if (!force && now - lastFetchTimeRef.current < 3000) {\n            console.log(\"Skipping fetch due to rate limit\");\n            return;\n        }\n        \n        console.log(\"Starting fetchOwnedTickets for address:\", walletAddress);\n        lastFetchTimeRef.current = now;\n        \n        try {\n            console.log(\"Calling getMyTicketsUtil...\");\n            const ownedIds = await getMyTicketsUtil(walletAddress);\n            console.log(\"Raw owned ticket IDs returned:\", ownedIds);\n            \n            if (!ownedIds || ownedIds.length === 0) {\n                console.log(\"No owned tickets found, clearing owned tickets state\");\n                setOwnedTickets([]);\n                return;\n            }\n\n            // Fetch metadata for each owned ticket\n            const ticketsData = await Promise.all(ownedIds.map(async (id: number) => {\n                let metadata = undefined;\n                let uri = undefined;\n                try {\n                    uri = await getTokenMetadataURI(id); // fetch tokenURI from contract\n                    metadata = uri ? await fetchMetadataFromUri(uri) : undefined;\n                } catch (e) {\n                    console.error(`Failed to fetch metadata for owned ticket ${id}:`, e);\n                }\n                const eventName = metadata?.name || `Ticket ${id}`;\n                const seatNumber = metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`;\n                const imageUrl = metadata?.image?.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/') || undefined;\n                const price = eventPrice ? eventPrice.outsider : '0.001';\n                return {\n                    id,\n                    eventName,\n                    price,\n                    seatNumber,\n                    qrValue: `qr-${id}-${Date.now()}`,\n                    imageUrl,\n                    metadata: {\n                        ...metadata,\n                        uri\n                    }\n                };\n            }));\n            setOwnedTickets(ticketsData);\n            setDataInitialized(true);\n        } catch (error) {\n            console.error(\"Failed to fetch owned tickets:\", error);\n            toast.error(\"Could not load your owned tickets. Please try again.\");\n        }\n    }, [walletAddress, eventPrice]); // Added eventPrice as a dependency if it's used to determine display price of owned tickets\n\n    // Initial fetch and periodic refresh\n    useEffect(() => {\n        if (walletAddress) {\n            fetchOwnedTickets(true);\n            const refreshInterval = setInterval(() => {\n                console.log(\"Periodic refresh of owned tickets\");\n                fetchOwnedTickets(false);\n            }, 10000); \n            return () => clearInterval(refreshInterval);\n        }\n    }, [walletAddress, fetchOwnedTickets]);\n\n    // Fetch available tickets when dependencies change\n    useEffect(() => {\n        const fetchAvailable = async () => {\n            if (!walletAddress || !eventPrice) return; \n            \n            try {\n                console.log(\"Fetching available tickets...\");\n                \n                const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n                    id: parseInt(id),\n                    cid: cid\n                }));\n\n                console.log(\"Processing available tickets:\", availableTicketsData);\n\n                const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\n                    try {\n                        const uri = `ipfs://${cid}`;\n                        console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n                        const metadata = await fetchMetadataFromUri(uri);\n                        \n                        if (!metadata) {\n                            console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n                            return null;\n                        }\n                        const price = isVIP ? (eventPrice.insider) : (eventPrice.outsider);\n                        const ticketData = {\n                            id,\n                            eventName: metadata?.name || `Ticket ${id}`,\n                            price,\n                            seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\n                            qrValue: `qr-${id}`,\n                            imageUrl: metadata?.image?.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/') || undefined,\n                            metadata: {\n                                ...metadata,\n                                uri // ensure uri is present for buyTicket\n                            }\n                        };\n                        console.log(`Processed ticket ${id}:`, ticketData);\n                        return ticketData;\n                    } catch (detailError) {\n                        console.error(`Failed to fetch details for available token ${id}:`, detailError);\n                        return null;\n                    }\n                });\n\n                const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\n                console.log(\"Final available tickets:\", resolvedDetails);\n                setAvailableTickets(resolvedDetails);\n                \n            } catch (error) {\n                console.error(\"Failed to fetch available tickets:\", error);\n                toast.error(\"Could not load available tickets. Please try again.\");\n            }\n        };\n\n        fetchAvailable();\n    }, [walletAddress, eventPrice, isVIP]); // Added isVIP\n\n    const handleVIPVerification = async (name: string, rollNumber: string) => {\n        try {\n            // Get wallet address from the form\n            const walletAddressInput = document.querySelector<HTMLInputElement>('#vipWalletAddress')?.value;\n            if (!walletAddressInput) {\n                toast.error('Please enter your wallet address.');\n                return;\n            }\n            \n            await checkVIPStatus(name, rollNumber, walletAddressInput);\n            // After successful verification, refresh marketplace data\n            await fetchOwnedTickets(true); // Force fetch owned tickets\n            const fetchAvailable = async () => {\n                if (!walletAddress || !eventPrice) return;\n                \n                try {\n                    console.log(\"Fetching available tickets...\");\n                    \n                    const availableTicketsData = Object.entries(availableTicketMetadataCIDs).map(([id, cid]) => ({\n                        id: parseInt(id),\n                        cid: cid\n                    }));\n\n                    console.log(\"Processing available tickets:\", availableTicketsData);\n\n                    const availableDetailsPromises = availableTicketsData.map(async ({ id, cid }) => {\n                        try {\n                            const uri = `ipfs://${cid}`;\n                            console.log(`Workspaceing metadata for ticket ${id} from ${uri}`);\n                            const metadata = await fetchMetadataFromUri(uri);\n                            \n                            if (!metadata) {\n                                console.error(`Failed to fetch metadata for ticket ${id} with CID ${cid}`);\n                                return null;\n                            }\n                            const price = isVIP ? (eventPrice.insider) : (eventPrice.outsider);\n                            const ticketData = {\n                                id,\n                                eventName: metadata?.name || `Ticket ${id}`,\n                                price,\n                                seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\n                                qrValue: `qr-${id}`,\n                                imageUrl: metadata?.image?.replace(/^ipfs:\\/\\//, 'https://ipfs.io/ipfs/') || undefined,\n                                metadata: {\n                                    ...metadata,\n                                    uri // ensure uri is present for buyTicket\n                                }\n                            };\n                            console.log(`Processed ticket ${id}:`, ticketData);\n                            return ticketData;\n                        } catch (detailError) {\n                            console.error(`Failed to fetch details for available token ${id}:`, detailError);\n                            return null;\n                        }\n                    });\n\n                    const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\n                    console.log(\"Final available tickets:\", resolvedDetails);\n                    setAvailableTickets(resolvedDetails);\n                    \n                } catch (error) {\n                    console.error(\"Failed to fetch available tickets:\", error);\n                    toast.error(\"Could not load available tickets. Please try again.\");\n                }\n            };\n            await fetchAvailable(); // Fetch available tickets\n        } catch (error) {\n            console.error(\"VIP verification failed:\", error);\n        }\n    };\n\n    useEffect(() => {\n        if (user && !isVIP && !checkingVIP) {\n            toast.error('VIP verification required. Please verify your VIP status first.');\n        }\n    }, [user, isVIP, checkingVIP]);\n\n    const handleVIPVerified = useCallback(() => {\n        console.log(\"VIP verified, data will refresh automatically through effects\");\n        // Data refresh is handled by useEffects that depend on `isVIP` or `eventPrice`\n        // If `isVIP` status directly changes `eventPrice` or how tickets are displayed,\n        // the existing `useEffect` for available tickets should re-run.\n        // You might also want to force a refresh of available tickets if their price depends on VIP status\n        // and that price is determined/formatted within `WorkspaceAvailable`.\n    }, []);\n\n    useEffect(() => {\n        const initializeData = async () => {\n            if (walletAddress && !dataInitialized) {\n                console.log(\"Initializing marketplace data...\");\n                try {\n                    // Fetch price first if not already fetched, though the dedicated effect should handle it\n                    if (!eventPrice) {\n                         const details = await getEventDetails();\n                         if (details) {\n                            setEventPrice({\n                                insider: details.ticketPriceInsider,\n                                outsider: details.ticketPriceOutsider\n                            });\n                         }\n                    }\n                    await fetchOwnedTickets(true); // force fetch\n                    setDataInitialized(true);\n                } catch (error) {\n                     console.error(\"Error during initial data load:\", error);\n                }\n            }\n        };\n\n        initializeData();\n    }, [walletAddress, dataInitialized, fetchOwnedTickets, eventPrice]);\n\n    const handleBuyTicket = async (ticketId: number) => {\n        if (!user) {\n            toast.error('Please log in to buy a ticket.');\n            return;\n        }\n\n        try {\n            setBuyingTicketId(ticketId);\n            const toastId = `buy-${ticketId}`;\n            toast.loading('Processing ticket purchase...', { id: toastId });\n\n            // Get the ticket from availableTickets\n            const ticket = availableTickets.find(t => t.id === ticketId);\n            if (!ticket || !ticket.metadata) {\n                toast.dismiss(toastId);\n                toast.error('Ticket not found.');\n                setBuyingTicketId(null);\n                return;\n            }\n\n            // Get the wallet address from VIP verification (already stored in vipWalletAddress)\n            if (!vipWalletAddress) {\n                toast.dismiss(toastId);\n                toast.error('Wallet address not found. Please complete VIP verification first.');\n                setBuyingTicketId(null);\n                return;\n            }\n\n            // Get the ticket price\n            const ticketPrice = isVIP ? eventPrice?.insider : eventPrice?.outsider || '0.05';\n            // Generate QR hash\n            const qrHash = `qr-${ticketId}-${Date.now()}`;\n\n            // Debug log for parameters\n            console.log('Buy Ticket Debug:', {\n                ticketId,\n                uri: ticket?.metadata?.uri,\n                qrHash,\n                ticketPrice,\n                isVIP,\n                walletAddress,\n                vipWalletAddress,\n                eventPrice,\n            });\n\n            // Validate parameters\n            if (!ticket?.metadata?.uri || !qrHash || !ticketPrice || !vipWalletAddress) {\n                toast.dismiss(toastId);\n                toast.error('Missing required ticket information. Please try again.');\n                setBuyingTicketId(null);\n                return;\n            }\n            // Check if the user already has a ticket\n            if (!walletAddress) {\n                toast.dismiss(toastId);\n                toast.error('Wallet address not found.');\n                setBuyingTicketId(null);\n                return;\n            }\n            const myTickets = await getMyTicketsUtil(walletAddress);\n            if (myTickets.length > 0 && isVIP) {\n                toast.dismiss(toastId);\n                console.warn('This wallet already owns a ticket as VIP.');\n                toast.error(\"You already own a ticket. Insiders can only buy one ticket.\");\n                setBuyingTicketId(null);\n                return;\n            }\n\n            if (!isVIP && ticketPrice === eventPrice?.insider) {\n                console.warn('Non-VIP is trying to buy with insider price!');\n            }\n            if (isVIP && ticketPrice !== eventPrice?.insider) {\n                console.warn('VIP is not using insider price!');\n            }\n            if (!isVIP && ticketPrice !== eventPrice?.outsider) {\n                console.warn('Non-VIP is not using outsider price!');\n            }\n\n            const eventDetails = await getEventDetails();\n            console.log('EventManager contract state:', eventDetails);\n\n            // Check if event is active\n            if (!eventDetails?.isActive) {\n                toast.dismiss(toastId);\n                toast.error('Event is not active. Ticket purchase is disabled.');\n                setBuyingTicketId(null);\n                return;\n            }\n\n            const eventManager = await getEventManagerContract();\n            if (!eventManager) {\n                toast.dismiss(toastId);\n                toast.error('Could not connect to the EventManager contract.');\n                setBuyingTicketId(null);\n                return;\n            }\n            const hasTicket = await eventManager.hasTicket(walletAddress);\n            console.log('hasTicket for', walletAddress, ':', hasTicket);\n\n            await debugTicketPurchaseState(walletAddress, !!isVIP);\n\n            // Call the buy ticket function with recipient as the wallet address from VIP verification\n            let txHash = null;\n            try {\n                const tx = await eventManager.buyTicket(ticket.metadata.uri, qrHash, !isVIP, { value: parseEther(ticketPrice) });\n                txHash = tx.hash;\n                await tx.wait();\n            } catch (err: any) {\n                toast.dismiss(toastId);\n                // Enhanced error logging for revert reasons\n                let reason1 = err?.reason || err?.data?.message || err?.error?.message || err?.message || 'Unknown error';\n                let details1 = '';\n                if (err?.data) {\n                    details1 += `\\nError Data: ${JSON.stringify(err.data)}`;\n                }\n                if (err?.error) {\n                    details1 += `\\nInner Error: ${JSON.stringify(err.error)}`;\n                }\n                console.error('Buy Ticket Failed:', err, details1);\n                toast.error(`Revert reason: ${reason1}${details1}`);\n                setBuyingTicketId(null);\n                return;\n            }\n\n            if (txHash) {\n                toast.dismiss(toastId);\n                toast.success(\n                    <>\n                        Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                    </>,\n                    { duration: 6000 }\n                );\n                await fetchOwnedTickets(true);\n            }\n        } catch (error: any) {\n            const toastId = `buy-${ticketId}`;\n            toast.dismiss(toastId);\n            // Enhanced error logging for revert reasons\n            let reason2 = error?.reason || error?.data?.message || error?.error?.message || error?.message || 'Unknown error';\n            let details2 = '';\n            if (error?.data) {\n                details2 += `\\nError Data: ${JSON.stringify(error.data)}`;\n            }\n            if (error?.error) {\n                details2 += `\\nInner Error: ${JSON.stringify(error.error)}`;\n            }\n            console.error('Buy Ticket Failed:', error, details2);\n            toast.error(`Revert reason: ${reason2}${details2}`);\n            setBuyingTicketId(null);\n        }\n    };\n\n    const handleResellTicket = async (tokenId: number) => {\n        if (!networkState?.isCorrect) {\n            toast.error('Incorrect network. Please switch.');\n            await switchNetwork();\n            return;\n        }\n\n        setResellingTicketId(tokenId);\n        const toastId = `resell-${tokenId}`;\n        toast.loading('Processing resale...', { id: toastId });\n        try {\n            const txHash = await resellTicketUtil(tokenId);\n            toast.success(\n                <>\n                    Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a>\n                </>,\n                { id: toastId, duration: 6000 }\n            );\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            await fetchOwnedTickets(true);\n        } catch (error: any) {\n            console.error('Resell Failed:', error);\n            toast.dismiss(toastId);\n            toast.error(error.message || 'Failed to resell ticket. Please try again.');\n        } finally {\n            setResellingTicketId(null);\n        }\n    };\n\n    // --- Render Logic ---\n    if (!user) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please log in to access the marketplace.</p>\n        </motion.div>\n    );\n    if (!walletAddress) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\">\n            <p className=\"text-center text-accent-light text-lg animate-fade-in\">Please connect your wallet to access the marketplace.</p>\n        </motion.div>\n    );\n    if (!networkState?.isCorrect) return (\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\n            <p className=\"text-center text-error text-lg animate-fade-in\">\n                Wrong Network Detected ({networkState?.currentNetwork?.name || 'Unknown'}).\n            </p>\n            <GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton>\n        </motion.div>\n    );\n\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP === null) {\n        return (\n            <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"max-w-md mx-auto my-8\"\n            >\n                <VIPVerificationForm onVerified={handleVIPVerified} />\n            </motion.div>\n        );\n    }\n\n    if (!isVIP && !checkingVIP) {\n        return (\n            <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"max-w-md mx-auto my-8\"\n            >\n                <h2 className=\"text-xl font-semibold mb-4\">VIP Verification Required</h2>\n                <VIPVerificationForm onVerified={handleVIPVerification} />\n            </motion.div>\n        );\n    }\n\n    return (\n        <div className=\"container mx-auto px-4 py-8 w-full\">\n            <div>\n                {/* My Tickets Section */}\n                <section>\n                    <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\n                    {loading && ownedTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\n                        <div className=\"flex flex-wrap gap-6\">\n                            {[...Array(4)].map((_, index) => <div><NFTTicketCardSkeleton key={`owned-skeleton-${index}`} /></div>)}\n                        </div>\n                    ) : ownedTickets.length > 0 ? (\n                        <div className=\"flex flex-wrap gap-6\">\n                            {ownedTickets.map((ticket) => (\n                                <div className=\"w-[170px]\">\n                                    <NFTTicketCard\n                                        key={`owned-${ticket.id}`}\n                                        ticket={ticket}\n                                        onBuy={() => {}} \n                                        isOwned={true}\n                                        onResell={handleResellTicket}\n                                        isReselling={resellingTicketId === ticket.id}\n                                    />\n                                </div>\n                            ))}\n                            {Array.from({length: 4 - ownedTickets.length > 0 ? 4 - ownedTickets.length : 0}).map((_, i) => (\n                                <div key={`filler-${i}`} className=\"w-full invisible\" />\n                            ))}\n                        </div>\n                    ) : (\n                        <div className=\"flex flex-wrap gap-6\">\n                            <div className=\"w-[170px]\">\n                                <NFTTicketCard\n                                    ticket={{\n                                        id: 0,\n                                        eventName: 'VIP Ticket - BlockFest',\n                                        price: '0.001',\n                                        seatNumber: 'Seat-0',\n                                        qrValue: 'sample-qr',\n                                        imageUrl: 'https://ipfs.io/ipfs/bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku',\n                                    }}\n                                    onBuy={() => {}}\n                                    isOwned={true}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </section>\n\n                {/* Available Tickets Section */}\n                <section>\n                    <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\n                    {loading && availableTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\n                        <div className=\"flex flex-wrap gap-6\">\n                            {[...Array(4)].map((_, index) => <div><NFTTicketCardSkeleton key={`available-skeleton-${index}`} /></div>)}\n                        </div>\n                    ) : availableTickets.length > 0 ? (\n                        <div className=\"flex flex-wrap gap-6\">\n                            {availableTickets.map((ticket) => (\n                                <div className=\"w-[220px]\">\n                                    <NFTTicketCard\n                                        key={`available-${ticket.id}`}\n                                        ticket={ticket}\n                                        onBuy={handleBuyTicket}\n                                        isOwned={false}\n                                        isBuying={buyingTicketId === ticket.id}\n                                    />\n                                </div>\n                            ))}\n                            {Array.from({length: 4 - availableTickets.length > 0 ? 4 - availableTickets.length : 0}).map((_, i) => (\n                                <div key={`filler-${i}`} className=\"w-full invisible\" />\n                            ))}\n                        </div>\n                    ) : (\n                        <div className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\">\n                            <p>No tickets currently available for purchase.</p>\n                        </div>\n                    )}\n                </section>\n            </div>\n        </div>\n    );\n};\n\nasync function debugTicketPurchaseState(walletAddress: string, isVIP: boolean) {\n    const eventDetails = await getEventDetails();\n    const eventManager = await getEventManagerContract(true);\n    const myTickets = await getMyTicketsUtil(walletAddress);\n    let hasTicket = false;\n    if (eventManager && walletAddress) {\n        hasTicket = await eventManager.hasTicket(walletAddress);\n    }\n\n    console.log('--- Ticket Purchase Debug ---');\n    console.log('Event Details:', eventDetails);\n    console.log('Wallet Address:', walletAddress);\n    console.log('isVIP:', isVIP);\n    console.log('Already owns ticket (hasTicket):', hasTicket);\n    console.log('Owned ticket IDs:', myTickets);\n    if (eventDetails) {\n        console.log('Event Active:', eventDetails.isActive);\n        console.log('Tickets Sold:', eventDetails.currentTickets, '/', eventDetails.maxTickets);\n        console.log('Insider Price:', eventDetails.ticketPriceInsider);\n        console.log('Outsider Price:', eventDetails.ticketPriceOutsider);\n    }\n    console.log('-----------------------------');\n}\n\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}