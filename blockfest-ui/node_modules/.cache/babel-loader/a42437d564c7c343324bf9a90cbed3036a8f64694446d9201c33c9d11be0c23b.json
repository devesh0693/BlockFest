{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// src/contexts/AuthContext.tsx\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { signInWithGoogle, signInWithFacebook, signInWithEmail, registerWithEmail, signOutUser, listenToAuthChanges, getCurrentUserIdToken, checkAdminStatus } from \"../firebase/auth\";\nimport { ethers } from \"ethers\";\nimport { toast } from \"react-hot-toast\";\nimport { checkNetwork, switchNetwork as switchNetworkUtil } from \"../utils/blockchain\";\n\n// --------- NETWORK STATE TYPES ---------\n\n// --------- CONTEXT TYPES ---------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// --------- SESSION CLEANUP UTILITY ---------\nconst clearSessionData = () => {\n  // Clear VIP file info from session storage\n  sessionStorage.removeItem('vipFileInfo');\n\n  // Add any other session data that needs to be cleared on logout\n};\n\n// --------- CONTEXT CREATION ---------\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// --------- PROVIDER COMPONENT ---------\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Firebase Auth States\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // Wallet States\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [connected, setConnected] = useState(false);\n\n  // Network States\n  const [networkState, setNetworkState] = useState(null);\n\n  // --------- Firebase Auth Logic ---------\n  useEffect(() => {\n    const unsubscribe = listenToAuthChanges(async firebaseUser => {\n      setUser(firebaseUser);\n      setLoading(false);\n      if (firebaseUser) {\n        const admin = await checkAdminStatus();\n        setIsAdmin(admin);\n      } else {\n        setIsAdmin(false);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  const handleGoogleSignIn = async () => {\n    try {\n      const user = await signInWithGoogle();\n      setUser(user);\n      const admin = await checkAdminStatus();\n      setIsAdmin(admin);\n    } catch (error) {\n      toast.error(error.message || \"Google sign-in failed\");\n    }\n  };\n  const handleFacebookSignIn = async () => {\n    try {\n      const user = await signInWithFacebook();\n      setUser(user);\n      const admin = await checkAdminStatus();\n      setIsAdmin(admin);\n    } catch (error) {\n      toast.error(error.message || \"Facebook sign-in failed\");\n    }\n  };\n  const handleEmailSignIn = async (email, password) => {\n    try {\n      const user = await signInWithEmail(email, password);\n      setUser(user);\n      const admin = await checkAdminStatus();\n      setIsAdmin(admin);\n    } catch (error) {\n      toast.error(error.message || \"Email sign-in failed\");\n      throw error;\n    }\n  };\n  const handleRegister = async (email, password) => {\n    try {\n      const user = await registerWithEmail(email, password);\n      setUser(user);\n      const admin = await checkAdminStatus();\n      setIsAdmin(admin);\n    } catch (error) {\n      toast.error(error.message || \"Registration failed\");\n      throw error;\n    }\n  };\n  const handleSignOut = async () => {\n    try {\n      // Clear session data before signing out\n      clearSessionData();\n      await signOutUser();\n      setUser(null);\n      setIsAdmin(false);\n      disconnectWallet(); // Also disconnect wallet on logout\n    } catch (error) {\n      toast.error(error.message || \"Sign out failed\");\n    }\n  };\n  const getIdToken = async () => {\n    return await getCurrentUserIdToken();\n  };\n\n  // --------- Wallet Logic ---------\n  const connectWallet = async () => {\n    toast.loading('Connecting Wallet...', {\n      id: 'wallet-connect'\n    });\n    try {\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask not detected\");\n      }\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const accounts = await provider.send(\"eth_requestAccounts\", []);\n      const address = accounts[0];\n      setWalletAddress(address);\n      setConnected(true);\n      toast.success(`Wallet Connected: ${address.substring(0, 6)}...${address.substring(address.length - 4)}`, {\n        id: 'wallet-connect'\n      });\n\n      // Check network after connection\n      checkCurrentNetwork();\n      return address;\n    } catch (err) {\n      console.error(\"Wallet connection error:\", err);\n      toast.error(err.message || \"Wallet connection failed\", {\n        id: 'wallet-connect'\n      });\n      return null;\n    }\n  };\n  const disconnectWallet = () => {\n    setWalletAddress(null);\n    setConnected(false);\n    setNetworkState(null);\n    toast('Wallet state cleared. Disconnect via MetaMask extension.', {\n      icon: 'ðŸ”Œ'\n    });\n  };\n\n  // --------- Network Logic ---------\n  const checkCurrentNetwork = async () => {\n    // Check window.ethereum existence before accessing properties\n    if (window.ethereum) {\n      const state = await checkNetwork();\n      setNetworkState(state);\n      if (walletAddress && !state.isCorrect) {\n        // Use environment variable for network name display\n        const targetNetworkName = process.env.REACT_APP_TARGET_NETWORK_NAME || 'the correct network';\n        toast.error(`Wrong Network! Please switch to ${targetNetworkName}.`, {\n          id: 'network-toast',\n          duration: 5000\n        });\n      } else {\n        toast.dismiss('network-toast');\n      }\n    } else {\n      setNetworkState(null);\n    }\n  };\n  const switchNetwork = async () => {\n    toast.loading('Requesting Network Switch...', {\n      id: 'network-switch'\n    });\n    try {\n      // Check if switchNetworkUtil was imported correctly\n      if (typeof switchNetworkUtil !== 'function') {\n        throw new Error(\"Switch network function not available.\");\n      }\n      const success = await switchNetworkUtil('11155111');\n      if (success) {\n        toast.success('Network switch successful or already correct.', {\n          id: 'network-switch'\n        });\n        const state = await checkNetwork(); // Re-check state\n        setNetworkState(state);\n      } else {\n        toast.error('Network switch request rejected or failed.', {\n          id: 'network-switch'\n        });\n      }\n      return success;\n    } catch (error) {\n      console.error(\"Switch Network Error:\", error);\n      toast.error(error.message || 'Failed to switch network.', {\n        id: 'network-switch'\n      });\n      return false;\n    }\n  };\n\n  // --------- Combined useEffect for Ethereum events ---------\n  useEffect(() => {\n    var _window$ethereum;\n    // Initial wallet check\n    const checkWallet = async () => {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const accounts = await provider.listAccounts();\n          if (accounts.length > 0) {\n            setWalletAddress(accounts[0].address);\n            setConnected(true);\n            checkCurrentNetwork();\n          }\n        } catch (error) {\n          console.error(\"Error checking wallet:\", error);\n        }\n      }\n    };\n    checkWallet();\n\n    // Event handlers\n    const handleChainChanged = _chainId => {\n      console.log(\"Network changed, re-checking...\");\n      checkCurrentNetwork();\n    };\n    const handleAccountsChanged = accounts => {\n      if (accounts.length === 0) {\n        console.log(\"MetaMask disconnected.\");\n        setWalletAddress(null);\n        setConnected(false);\n        setNetworkState(null);\n      } else {\n        setWalletAddress(accounts[0]);\n        setConnected(true);\n        checkCurrentNetwork();\n      }\n    };\n\n    // Add listeners only if window.ethereum exists\n    if ((_window$ethereum = window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.on) {\n      window.ethereum.on('chainChanged', handleChainChanged);\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    }\n    return () => {\n      var _window$ethereum2;\n      // Remove listeners only if window.ethereum exists\n      if ((_window$ethereum2 = window.ethereum) !== null && _window$ethereum2 !== void 0 && _window$ethereum2.removeListener) {\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, [walletAddress]); // Dependency on walletAddress\n\n  // Combine all values for the context\n  const value = {\n    // Auth values\n    user,\n    loading,\n    isAdmin,\n    signInWithGoogle: handleGoogleSignIn,\n    signInWithFacebook: handleFacebookSignIn,\n    signInWithEmail: handleEmailSignIn,\n    registerWithEmail: handleRegister,\n    signOut: handleSignOut,\n    getIdToken,\n    // Wallet values\n    walletAddress,\n    connected,\n    connectWallet,\n    disconnectWallet,\n    // Network values\n    networkState,\n    switchNetwork\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading ? children : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center bg-primary-dark text-text-main\",\n      children: \"Authenticating...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 30\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n\n// --------- useAuth Hook ---------\n_s(AuthProvider, \"YlVYlWry67qXleOmpZnNHpmk2Gc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\n// --------- Specialized Hooks ---------\n// These hooks are convenience wrappers that extract specific functionality from useAuth\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useWallet = () => {\n  _s3();\n  const {\n    walletAddress,\n    connected,\n    connectWallet,\n    disconnectWallet,\n    networkState,\n    switchNetwork\n  } = useAuth();\n  return {\n    walletAddress,\n    connected,\n    connectWallet,\n    disconnectWallet,\n    networkState,\n    switchNetwork\n  };\n};\n_s3(useWallet, \"vtpdGHRuu3DiCazYW1+88I09ixo=\", false, function () {\n  return [useAuth];\n});\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","signInWithGoogle","signInWithFacebook","signInWithEmail","registerWithEmail","signOutUser","listenToAuthChanges","getCurrentUserIdToken","checkAdminStatus","ethers","toast","checkNetwork","switchNetwork","switchNetworkUtil","jsxDEV","_jsxDEV","clearSessionData","sessionStorage","removeItem","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","isAdmin","setIsAdmin","walletAddress","setWalletAddress","connected","setConnected","networkState","setNetworkState","unsubscribe","firebaseUser","admin","handleGoogleSignIn","error","message","handleFacebookSignIn","handleEmailSignIn","email","password","handleRegister","handleSignOut","disconnectWallet","getIdToken","connectWallet","id","window","ethereum","Error","provider","BrowserProvider","accounts","send","address","success","substring","length","checkCurrentNetwork","err","console","icon","state","isCorrect","targetNetworkName","process","env","REACT_APP_TARGET_NETWORK_NAME","duration","dismiss","_window$ethereum","checkWallet","listAccounts","handleChainChanged","_chainId","log","handleAccountsChanged","on","_window$ethereum2","removeListener","value","signOut","Provider","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","useWallet","_s3","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/contexts/AuthContext.tsx"],"sourcesContent":["// src/contexts/AuthContext.tsx\r\n\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  signInWithGoogle,\r\n  signInWithFacebook,\r\n  signInWithEmail,\r\n  registerWithEmail,\r\n  signOutUser,\r\n  listenToAuthChanges,\r\n  getCurrentUserIdToken,\r\n  checkAdminStatus,\r\n} from \"../firebase/auth\";\r\nimport { User } from \"firebase/auth\";\r\nimport { ethers } from \"ethers\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { checkNetwork, switchNetwork as switchNetworkUtil } from \"../utils/blockchain\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ethereum?: any;\r\n  }\r\n}\r\n\r\n// --------- NETWORK STATE TYPES ---------\r\ninterface NetworkState { \r\n  isCorrect: boolean; \r\n  currentNetwork: { \r\n    chainId: number; \r\n    name: string \r\n  } | null;\r\n}\r\n\r\n// --------- CONTEXT TYPES ---------\r\ninterface AuthContextType {\r\n  // Auth properties\r\n  user: User | null;\r\n  loading: boolean;\r\n  isAdmin: boolean;\r\n  signInWithGoogle: () => Promise<void>;\r\n  signInWithFacebook: () => Promise<void>;\r\n  signInWithEmail: (email: string, password: string) => Promise<void>;\r\n  registerWithEmail: (email: string, password: string) => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n  getIdToken: () => Promise<string | null>;\r\n\r\n  // Wallet properties\r\n  walletAddress: string | null;\r\n  connected: boolean;\r\n  connectWallet: () => Promise<string | null>;\r\n  disconnectWallet: () => void;\r\n  \r\n  // Network properties (from WalletContext)\r\n  networkState: NetworkState | null;\r\n  switchNetwork: () => Promise<boolean>;\r\n}\r\n\r\n// --------- SESSION CLEANUP UTILITY ---------\r\nconst clearSessionData = () => {\r\n  // Clear VIP file info from session storage\r\n  sessionStorage.removeItem('vipFileInfo');\r\n  \r\n  // Add any other session data that needs to be cleared on logout\r\n};\r\n\r\n// --------- CONTEXT CREATION ---------\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// --------- PROVIDER COMPONENT ---------\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  // Firebase Auth States\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // Wallet States\r\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\r\n  const [connected, setConnected] = useState(false);\r\n  \r\n  // Network States\r\n  const [networkState, setNetworkState] = useState<NetworkState | null>(null);\r\n\r\n  // --------- Firebase Auth Logic ---------\r\n  useEffect(() => {\r\n    const unsubscribe = listenToAuthChanges(async (firebaseUser) => {\r\n      setUser(firebaseUser);\r\n      setLoading(false);\r\n\r\n      if (firebaseUser) {\r\n        const admin = await checkAdminStatus();\r\n        setIsAdmin(admin);\r\n      } else {\r\n        setIsAdmin(false);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const handleGoogleSignIn = async () => {\r\n    try {\r\n      const user = await signInWithGoogle();\r\n      setUser(user);\r\n      const admin = await checkAdminStatus();\r\n      setIsAdmin(admin);\r\n    } catch (error: any) {\r\n      toast.error(error.message || \"Google sign-in failed\");\r\n    }\r\n  };\r\n\r\n  const handleFacebookSignIn = async () => {\r\n    try {\r\n      const user = await signInWithFacebook();\r\n      setUser(user);\r\n      const admin = await checkAdminStatus();\r\n      setIsAdmin(admin);\r\n    } catch (error: any) {\r\n      toast.error(error.message || \"Facebook sign-in failed\");\r\n    }\r\n  };\r\n\r\n  const handleEmailSignIn = async (email: string, password: string) => {\r\n    try {\r\n      const user = await signInWithEmail(email, password);\r\n      setUser(user);\r\n      const admin = await checkAdminStatus();\r\n      setIsAdmin(admin);\r\n    } catch (error: any) {\r\n      toast.error(error.message || \"Email sign-in failed\");\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (email: string, password: string) => {\r\n    try {\r\n      const user = await registerWithEmail(email, password);\r\n      setUser(user);\r\n      const admin = await checkAdminStatus();\r\n      setIsAdmin(admin);\r\n    } catch (error: any) {\r\n      toast.error(error.message || \"Registration failed\");\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSignOut = async () => {\r\n    try {\r\n      // Clear session data before signing out\r\n      clearSessionData();\r\n      \r\n      await signOutUser();\r\n      setUser(null);\r\n      setIsAdmin(false);\r\n      disconnectWallet(); // Also disconnect wallet on logout\r\n    } catch (error: any) {\r\n      toast.error(error.message || \"Sign out failed\");\r\n    }\r\n  };\r\n\r\n  const getIdToken = async (): Promise<string | null> => {\r\n    return await getCurrentUserIdToken();\r\n  };\r\n\r\n  // --------- Wallet Logic ---------\r\n  const connectWallet = async (): Promise<string | null> => {\r\n    toast.loading('Connecting Wallet...', { id: 'wallet-connect' });\r\n    try {\r\n      if (!window.ethereum) {\r\n        throw new Error(\"MetaMask not detected\");\r\n      }\r\n\r\n      const provider = new ethers.BrowserProvider(window.ethereum);\r\n      const accounts = await provider.send(\"eth_requestAccounts\", []);\r\n      const address = accounts[0];\r\n      setWalletAddress(address);\r\n      setConnected(true);\r\n      toast.success(`Wallet Connected: ${address.substring(0, 6)}...${address.substring(address.length - 4)}`, { id: 'wallet-connect' });\r\n      \r\n      // Check network after connection\r\n      checkCurrentNetwork();\r\n      \r\n      return address;\r\n    } catch (err: any) {\r\n      console.error(\"Wallet connection error:\", err);\r\n      toast.error(err.message || \"Wallet connection failed\", { id: 'wallet-connect' });\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = () => {\r\n    setWalletAddress(null);\r\n    setConnected(false);\r\n    setNetworkState(null);\r\n    toast('Wallet state cleared. Disconnect via MetaMask extension.', { icon: 'ðŸ”Œ' });\r\n  };\r\n  \r\n  // --------- Network Logic ---------\r\n  const checkCurrentNetwork = async () => {\r\n    // Check window.ethereum existence before accessing properties\r\n    if (window.ethereum) {\r\n      const state = await checkNetwork();\r\n      setNetworkState(state);\r\n      if (walletAddress && !state.isCorrect) {\r\n        // Use environment variable for network name display\r\n        const targetNetworkName = process.env.REACT_APP_TARGET_NETWORK_NAME || 'the correct network';\r\n        toast.error(`Wrong Network! Please switch to ${targetNetworkName}.`, { id: 'network-toast', duration: 5000 });\r\n      } else {\r\n        toast.dismiss('network-toast');\r\n      }\r\n    } else {\r\n      setNetworkState(null);\r\n    }\r\n  };\r\n  \r\n  const switchNetwork = async (): Promise<boolean> => {\r\n    toast.loading('Requesting Network Switch...', { id: 'network-switch'});\r\n    try {\r\n      // Check if switchNetworkUtil was imported correctly\r\n      if (typeof switchNetworkUtil !== 'function') {\r\n        throw new Error(\"Switch network function not available.\");\r\n      }\r\n      const success = await switchNetworkUtil('11155111');\r\n      if (success) {\r\n        toast.success('Network switch successful or already correct.', { id: 'network-switch'});\r\n        const state = await checkNetwork(); // Re-check state\r\n        setNetworkState(state);\r\n      } else {\r\n        toast.error('Network switch request rejected or failed.', { id: 'network-switch'});\r\n      }\r\n      return success;\r\n    } catch (error: any) {\r\n      console.error(\"Switch Network Error:\", error);\r\n      toast.error(error.message || 'Failed to switch network.', { id: 'network-switch'});\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // --------- Combined useEffect for Ethereum events ---------\r\n  useEffect(() => {\r\n    // Initial wallet check\r\n    const checkWallet = async () => {\r\n      if (window.ethereum) {\r\n        try {\r\n          const provider = new ethers.BrowserProvider(window.ethereum);\r\n          const accounts = await provider.listAccounts();\r\n          if (accounts.length > 0) {\r\n            setWalletAddress(accounts[0].address);\r\n            setConnected(true);\r\n            checkCurrentNetwork();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error checking wallet:\", error);\r\n        }\r\n      }\r\n    };\r\n    checkWallet();\r\n\r\n    // Event handlers\r\n    const handleChainChanged = (_chainId: string) => {\r\n      console.log(\"Network changed, re-checking...\");\r\n      checkCurrentNetwork();\r\n    };\r\n    \r\n    const handleAccountsChanged = (accounts: string[]) => {\r\n      if (accounts.length === 0) {\r\n        console.log(\"MetaMask disconnected.\");\r\n        setWalletAddress(null);\r\n        setConnected(false);\r\n        setNetworkState(null);\r\n      } else {\r\n        setWalletAddress(accounts[0]);\r\n        setConnected(true);\r\n        checkCurrentNetwork();\r\n      }\r\n    };\r\n\r\n    // Add listeners only if window.ethereum exists\r\n    if (window.ethereum?.on) {\r\n      window.ethereum.on('chainChanged', handleChainChanged);\r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n    }\r\n\r\n    return () => {\r\n      // Remove listeners only if window.ethereum exists\r\n      if (window.ethereum?.removeListener) {\r\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n      }\r\n    };\r\n  }, [walletAddress]); // Dependency on walletAddress\r\n\r\n  // Combine all values for the context\r\n  const value: AuthContextType = {\r\n    // Auth values\r\n    user,\r\n    loading,\r\n    isAdmin,\r\n    signInWithGoogle: handleGoogleSignIn,\r\n    signInWithFacebook: handleFacebookSignIn,\r\n    signInWithEmail: handleEmailSignIn,\r\n    registerWithEmail: handleRegister,\r\n    signOut: handleSignOut,\r\n    getIdToken,\r\n\r\n    // Wallet values\r\n    walletAddress,\r\n    connected,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    \r\n    // Network values\r\n    networkState,\r\n    switchNetwork\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading ? children : <div className=\"min-h-screen flex items-center justify-center bg-primary-dark text-text-main\">Authenticating...</div>}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// --------- useAuth Hook ---------\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\n// --------- Specialized Hooks ---------\r\n// These hooks are convenience wrappers that extract specific functionality from useAuth\r\nexport const useWallet = () => {\r\n  const { walletAddress, connected, connectWallet, disconnectWallet, networkState, switchNetwork } = useAuth();\r\n  return { walletAddress, connected, connectWallet, disconnectWallet, networkState, switchNetwork };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}