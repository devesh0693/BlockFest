{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\contexts\\\\VIPContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VIPContext = /*#__PURE__*/createContext(undefined);\nexport const VIPProvider = ({\n  children\n}) => {\n  _s();\n  const [isVIP, setIsVIP] = useState(null);\n  const [checkingVIP, setCheckingVIP] = useState(false);\n  const {\n    user\n  } = useAuth();\n\n  // Check for stored VIP status on mount and when user changes\n  useEffect(() => {\n    const checkStoredVIPStatus = async () => {\n      if (user) {\n        try {\n          // Clear any stored VIP status to force re-verification\n          localStorage.removeItem(`vip_status_${user.uid}`);\n          setIsVIP(null);\n\n          // Automatically trigger VIP verification\n          await checkVIPStatus('', ''); // This will be handled by the landing page\n        } catch (error) {\n          console.error(\"Error checking VIP status:\", error);\n          setIsVIP(false);\n        }\n      } else {\n        // Reset if no user\n        setIsVIP(null);\n        localStorage.removeItem('vip_status');\n      }\n    };\n    checkStoredVIPStatus();\n  }, [user]);\n\n  // Clear VIP status when entering marketplace\n  useEffect(() => {\n    if (user && window.location.pathname === '/marketplace') {\n      localStorage.removeItem(`vip_status_${user.uid}`);\n      setIsVIP(null);\n    }\n  }, [user, window.location.pathname]);\n  const checkVIPStatus = async (name, rollNumber) => {\n    if (!user) {\n      toast.error(\"Please log in before checking VIP status.\");\n      return false;\n    }\n    setCheckingVIP(true);\n    const toastId = 'vip-check';\n    toast.loading('Verifying VIP Status...', {\n      id: toastId\n    });\n    try {\n      const response = await checkVIPApi(name, rollNumber);\n\n      // Store the VIP status for this user session\n      if (user) {\n        localStorage.setItem(`vip_status_${user.uid}`, response.isVIP.toString());\n        console.log(\"Stored VIP status:\", response.isVIP);\n      }\n      setIsVIP(response.isVIP);\n      toast.dismiss(toastId);\n      if (response.isVIP) {\n        toast.success('✅ VIP Status Verified!');\n      } else {\n        toast.error('❌ Access Denied. Not on VIP list.');\n      }\n      return response.isVIP;\n    } catch (error) {\n      console.error(\"VIP Check API Error:\", error);\n      toast.dismiss(toastId);\n      toast.error(error.message || 'Error checking VIP status.');\n      setIsVIP(false);\n      return false;\n    } finally {\n      setCheckingVIP(false);\n    }\n  };\n  const resetVIP = () => {\n    setIsVIP(null);\n    if (user) {\n      localStorage.removeItem(`vip_status_${user.uid}`);\n    }\n  };\n  const value = {\n    isVIP,\n    checkingVIP,\n    checkVIPStatus,\n    resetVIP\n  };\n  return /*#__PURE__*/_jsxDEV(VIPContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(VIPProvider, \"2YmPQwvI13B1G0PpzEIgVb9hTnE=\", false, function () {\n  return [useAuth];\n});\n_c = VIPProvider;\nexport const useVIP = () => {\n  _s2();\n  const context = useContext(VIPContext);\n  if (!context) {\n    throw new Error('useVIP must be used within a VIPProvider');\n  }\n  return context;\n};\n_s2(useVIP, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"VIPProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","checkVIPApi","toast","jsxDEV","_jsxDEV","VIPContext","undefined","VIPProvider","children","_s","isVIP","setIsVIP","checkingVIP","setCheckingVIP","user","checkStoredVIPStatus","localStorage","removeItem","uid","checkVIPStatus","error","console","window","location","pathname","name","rollNumber","toastId","loading","id","response","setItem","toString","log","dismiss","success","message","resetVIP","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useVIP","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/contexts/VIPContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\n\ninterface VIPContextType {\n    isVIP: boolean | null;\n    checkingVIP: boolean;\n    checkVIPStatus: (name: string, rollNumber: string) => Promise<boolean>;\n    resetVIP: () => void;\n}\n\nconst VIPContext = createContext<VIPContextType | undefined>(undefined);\n\nexport const VIPProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [isVIP, setIsVIP] = useState<boolean | null>(null);\n    const [checkingVIP, setCheckingVIP] = useState<boolean>(false);\n    const { user } = useAuth();\n    \n    // Check for stored VIP status on mount and when user changes\n    useEffect(() => {\n        const checkStoredVIPStatus = async () => {\n            if (user) {\n                try {\n                    // Clear any stored VIP status to force re-verification\n                    localStorage.removeItem(`vip_status_${user.uid}`);\n                    setIsVIP(null);\n                    \n                    // Automatically trigger VIP verification\n                    await checkVIPStatus('', ''); // This will be handled by the landing page\n                } catch (error) {\n                    console.error(\"Error checking VIP status:\", error);\n                    setIsVIP(false);\n                }\n            } else {\n                // Reset if no user\n                setIsVIP(null);\n                localStorage.removeItem('vip_status');\n            }\n        };\n        \n        checkStoredVIPStatus();\n    }, [user]);\n\n    // Clear VIP status when entering marketplace\n    useEffect(() => {\n        if (user && window.location.pathname === '/marketplace') {\n            localStorage.removeItem(`vip_status_${user.uid}`);\n            setIsVIP(null);\n        }\n    }, [user, window.location.pathname]);\n\n    const checkVIPStatus = async (name: string, rollNumber: string): Promise<boolean> => {\n        if (!user) {\n            toast.error(\"Please log in before checking VIP status.\");\n            return false;\n        }\n        \n        setCheckingVIP(true);\n        const toastId = 'vip-check';\n        toast.loading('Verifying VIP Status...', { id: toastId });\n        \n        try {\n            const response = await checkVIPApi(name, rollNumber);\n            \n            // Store the VIP status for this user session\n            if (user) {\n                localStorage.setItem(`vip_status_${user.uid}`, response.isVIP.toString());\n                console.log(\"Stored VIP status:\", response.isVIP);\n            }\n            \n            setIsVIP(response.isVIP);\n            \n            toast.dismiss(toastId);\n            if (response.isVIP) {\n                toast.success('✅ VIP Status Verified!');\n            } else {\n                toast.error('❌ Access Denied. Not on VIP list.');\n            }\n            \n            return response.isVIP;\n        } catch (error: any) {\n            console.error(\"VIP Check API Error:\", error);\n            toast.dismiss(toastId);\n            toast.error(error.message || 'Error checking VIP status.');\n            setIsVIP(false);\n            return false;\n        } finally {\n            setCheckingVIP(false);\n        }\n    };\n\n    const resetVIP = () => {\n        setIsVIP(null);\n        if (user) {\n            localStorage.removeItem(`vip_status_${user.uid}`);\n        }\n    };\n\n    const value = { isVIP, checkingVIP, checkVIPStatus, resetVIP };\n\n    return (\n        <VIPContext.Provider value={value}>\n            {children}\n        </VIPContext.Provider>\n    );\n};\n\nexport const useVIP = (): VIPContextType => {\n    const context = useContext(VIPContext);\n    if (!context) {\n        throw new Error('useVIP must be used within a VIPProvider');\n    }\n    return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}