{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\pages\\\\MarketplacePage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/MarketplacePage.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { motion } from 'framer-motion';\nimport { formatEther } from 'ethers'; // Import formatEther\n\n// --- Context Hooks ---\nimport { useAuth, useWallet, useVIP } from '../App';\n\n// --- Blockchain Utilities ---\nimport { buyTicket as buyTicketUtil, getMyTickets as getMyTicketsUtil, resellTicket as resellTicketUtil, getEventDetails, getTokenMetadataURI, getAvailableTickets as getAvailableTicketsUtil // Import the function\n} from '../utils/blockchain';\n// --- Metadata Helper ---\nimport { fetchMetadataFromUri } from '../utils/metadata'; // Import helper\n\n// --- Components ---\nimport GlowingButton from '../components/GlowingButton';\nimport VIPVerificationForm from '../components/VIPVerificationForm';\nimport NFTTicketCard from '../components/NFTTicketCard';\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\n\n// --- Type Definitions ---\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Import shared type\n\n// --- Configuration ---\n// Flag to control whether to use mock data or real contract data for AVAILABLE tickets\nconst USE_MOCK_DATA_FOR_AVAILABLE = false; // <<< SET TO false TO USE BLOCKCHAIN DATA\n\n// --- WORKAROUND MAPPING: Map Available Ticket IDs to specific Metadata CIDs ---\n// This assumes you know which CID corresponds to which *potential* upcoming token ID.\n// Replace this with a better mechanism (backend API or contract refactor) in production!\nconst availableTicketMetadataCIDs = {\n  // Example: Assuming first available ticket corresponds to first CID, etc.\n  // You need to know how your contract assigns IDs and map accordingly.\n  // This mapping is fragile if using mock data IDs (1, 3) vs sequential contract IDs (0, 1, 2...).\n  // Using the provided CIDs:\n  0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\n  1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\n  2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\n  3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\n  4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\n  5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\n  6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\"\n  // Add more mappings if needed\n};\n// -------------------------------------------------------------------------\n\nconst MarketplacePage = () => {\n  _s();\n  var _networkState$current;\n  const {\n    address,\n    networkState,\n    switchNetwork\n  } = useWallet();\n  const {\n    user\n  } = useAuth();\n  const {\n    isVIP\n  } = useVIP();\n  const [availableTickets, setAvailableTickets] = useState([]);\n  const [ownedTickets, setOwnedTickets] = useState([]);\n  const [loadingTickets, setLoadingTickets] = useState(true);\n  const [buyingTicketId, setBuyingTicketId] = useState(null);\n  const [resellingTicketId, setResellingTicketId] = useState(null);\n  const [eventPriceInsider, setEventPriceInsider] = useState(null);\n  const [eventPriceOutsider, setEventPriceOutsider] = useState(null);\n  const [refreshTrigger, setRefreshTrigger] = useState(0); // State to trigger refresh\n\n  // --- Effects ---\n  // Fetch event prices once\n  useEffect(() => {\n    const fetchPrices = async () => {\n      console.log(\"Fetching event details for prices...\");\n      try {\n        const details = await getEventDetails();\n        let priceSet = false;\n        if (details !== null && details !== void 0 && details.ticketPriceInsider) {\n          setEventPriceInsider(formatEther(details.ticketPriceInsider));\n          priceSet = true;\n        } else {\n          console.warn(\"Insider price not found in event details.\");\n        }\n        if (details !== null && details !== void 0 && details.ticketPriceOutsider) {\n          setEventPriceOutsider(formatEther(details.ticketPriceOutsider));\n          priceSet = true;\n        } else {\n          console.warn(\"Outsider price not found in event details.\");\n        }\n        if (!priceSet) {\n          toast.error(\"Could not determine event prices.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch event details:\", error);\n        toast.error(\"Could not load event details.\");\n      }\n    };\n    fetchPrices();\n  }, []);\n\n  // Fetch ticket details (generic helper)\n  const fetchTicketDetails = useCallback(async id => {\n    var _ref, _ref2;\n    // Determine price based on VIP status (or use a default if needed)\n    // Note: This assumes the *current user's* VIP status determines the display price,\n    // which might not be accurate for *all* available tickets.\n    // A better approach might show both prices or adjust based on contract logic.\n    const priceToShow = (_ref = (_ref2 = isVIP === true ? eventPriceInsider : eventPriceOutsider) !== null && _ref2 !== void 0 ? _ref2 : eventPriceInsider) !== null && _ref !== void 0 ? _ref : '?.??';\n    try {\n      var _metadata$attributes, _metadata$attributes$;\n      const uri = await getTokenMetadataURI(id);\n      const metadata = await fetchMetadataFromUri(uri);\n      // const qrHash = await getQRHash(id); // Add if needed and implemented\n\n      return {\n        id,\n        eventName: (metadata === null || metadata === void 0 ? void 0 : metadata.name) || `Ticket #${id}`,\n        price: priceToShow,\n        // Show relevant price\n        seatNumber: (metadata === null || metadata === void 0 ? void 0 : (_metadata$attributes = metadata.attributes) === null || _metadata$attributes === void 0 ? void 0 : (_metadata$attributes$ = _metadata$attributes.find(attr => attr.trait_type === 'Seat')) === null || _metadata$attributes$ === void 0 ? void 0 : _metadata$attributes$.value) || `Seat-${id}`,\n        qrValue: `qr-${id}`,\n        // Replace with actual QR data if available\n        imageUrl: (metadata === null || metadata === void 0 ? void 0 : metadata.image) || undefined,\n        metadata // Store full metadata\n      };\n    } catch (detailError) {\n      console.error(`Failed to fetch details for token ${id}:`, detailError);\n      return null;\n    }\n  }, [isVIP, eventPriceInsider, eventPriceOutsider]); // Dependencies for price calculation\n\n  // Fetch Owned Tickets\n  const fetchOwnedTickets = useCallback(async () => {\n    if (!address) return;\n    console.log(\"Fetching owned tickets...\");\n    try {\n      const ownedIds = await getMyTicketsUtil(address); // Needs implementation in blockchain.ts\n      if (ownedIds.length === 0) {\n        setOwnedTickets([]);\n        return;\n      }\n      const ownedDetailsPromises = ownedIds.map(fetchTicketDetails);\n      const resolvedDetails = (await Promise.all(ownedDetailsPromises)).filter(Boolean);\n      setOwnedTickets(resolvedDetails);\n    } catch (error) {\n      console.error(\"Error in fetchOwnedTickets:\", error);\n      toast.error(\"Could not load your owned tickets.\");\n      setOwnedTickets([]);\n    }\n  }, [address, fetchTicketDetails]); // Include fetchTicketDetails dependency\n\n  // Fetch Available Tickets\n  const fetchAvailableTickets = useCallback(async () => {\n    if (!address || !eventPriceInsider && !eventPriceOutsider) return; // Need price info\n    console.log(\"Fetching available tickets...\");\n    try {\n      let availableIds = [];\n      if (USE_MOCK_DATA_FOR_AVAILABLE) {\n        // Simulate getting available IDs from mock data keys if needed\n        availableIds = Object.keys(availableTicketMetadataCIDs).map(Number); // Example: Use keys from CID map\n        console.log(\"Using mock available IDs based on CID map:\", availableIds);\n        // Filter out owned ones if using mock IDs\n        const currentOwnedIds = ownedTickets.map(t => t.id);\n        availableIds = availableIds.filter(id => !currentOwnedIds.includes(id));\n      } else {\n        // --- Fetch available IDs from blockchain ---\n        availableIds = await getAvailableTicketsUtil(); // Needs implementation in blockchain.ts\n        // ------------------------------------------\n      }\n      if (availableIds.length === 0) {\n        setAvailableTickets([]);\n        return;\n      }\n      const availableDetailsPromises = availableIds.map(fetchTicketDetails);\n      const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean);\n      setAvailableTickets(resolvedDetails);\n    } catch (error) {\n      console.error(\"Failed to fetch available tickets:\", error);\n      toast.error(\"Could not load available tickets.\");\n      setAvailableTickets([]);\n    }\n  }, [address, eventPriceInsider, eventPriceOutsider, fetchTicketDetails, ownedTickets]); // Added ownedTickets dependency for filtering mock\n\n  // Effect to load all data based on prerequisites and refresh trigger\n  useEffect(() => {\n    const loadAllData = async () => {\n      console.log(\"Checking prerequisites to load data...\");\n      setLoadingTickets(true);\n      if (address && user && networkState !== null && networkState !== void 0 && networkState.isCorrect && (eventPriceInsider || eventPriceOutsider)) {\n        console.log(\"Prerequisites met, fetching owned tickets...\");\n        await fetchOwnedTickets();\n        const vipRequired = process.env.REACT_APP_VIP_REQUIRED === 'true';\n        console.log(`VIP Required: ${vipRequired}, User isVIP: ${isVIP}`);\n        if (!vipRequired || isVIP === true) {\n          console.log(\"Fetching available tickets...\");\n          await fetchAvailableTickets();\n        } else if (isVIP === false) {\n          setAvailableTickets([]);\n          console.log(\"VIP required, user is not VIP. Not fetching available tickets.\");\n        } else {\n          console.log(\"VIP required, waiting for verification result...\");\n          setAvailableTickets([]); // Clear until VIP status known\n        }\n      } else {\n        console.log(\"Prerequisites not met, clearing ticket data.\");\n        if (!address) console.log(\"- Wallet not connected\");\n        if (!user) console.log(\"- User not logged in\");\n        if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) console.log(\"- Incorrect network\");\n        if (!eventPriceInsider && !eventPriceOutsider) console.log(\"- Event prices not loaded\");\n        setAvailableTickets([]);\n        setOwnedTickets([]);\n      }\n      setLoadingTickets(false);\n      console.log(\"Finished loading data attempt.\");\n    };\n    loadAllData();\n  }, [address, user, networkState, eventPriceInsider, eventPriceOutsider, isVIP, fetchOwnedTickets, fetchAvailableTickets, refreshTrigger]); // Include refreshTrigger\n\n  // --- Event Handlers ---\n  const handleBuyTicket = async ticketToBuy => {\n    // Expect TicketData object\n    if (!address || !user || !(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return; // Basic guards handled by render logic\n    const isInsider = isVIP === true;\n    const priceToUse = isInsider ? eventPriceInsider : eventPriceOutsider;\n    if (!priceToUse) return toast.error('Cannot determine ticket price.'); // Check if price is available\n\n    // VIP Limit Check\n    const ownedTicketCount = ownedTickets.length;\n    if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\n      return toast.error(\"VIP members are limited to 1 ticket.\");\n    }\n\n    // --- Prepare Arguments for buyTicketUtil ---\n    // ** WORKAROUND/PLACEHOLDER **\n    // Ideally, contract generates next ID and constructs URI/Hash, or backend provides it.\n    // Here, we derive URI from a pre-defined CID mapping based on the available ticket's ID.\n    // This assumes available ticket IDs map sequentially to your provided CIDs.\n    const metadataCID = availableTicketMetadataCIDs[ticketToBuy.id];\n    if (!metadataCID) {\n      toast.error(`Could not find metadata CID mapping for ticket ID ${ticketToBuy.id}. Cannot buy.`);\n      console.error(\"Missing CID mapping for available ticket ID:\", ticketToBuy.id);\n      return;\n    }\n    const tokenURI = `ipfs://${metadataCID}`; // Construct IPFS URI\n    const qrHash = `BLOCKFEST-${ticketToBuy.id}-${Date.now()}`; // Simple placeholder QR hash\n    const isOutsider = !isInsider;\n    // --- End Workaround ---\n\n    setBuyingTicketId(ticketToBuy.id);\n    const toastId = `buy-${ticketToBuy.id}`;\n    toast.loading('Processing transaction...', {\n      id: toastId\n    });\n    try {\n      // Call util with determined arguments\n      const txHash = await buyTicketUtil(tokenURI, qrHash, isOutsider, priceToUse);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Ticket Purchased! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      setRefreshTrigger(prev => prev + 1); // Trigger data refresh\n    } catch (error) {\n      console.error(\"Buy Ticket Failed:\", error);\n      toast.error(`Purchase Failed: ${error.message}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setBuyingTicketId(null);\n    }\n  };\n  const handleResaleTicket = async tokenId => {\n    if (!address || !user || !(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return; // Basic guards handled by render logic\n\n    setResellingTicketId(tokenId);\n    const toastId = `resell-${tokenId}`;\n    toast.loading('Processing resale...', {\n      id: toastId\n    });\n    try {\n      const txHash = await resellTicketUtil(tokenId);\n      toast.success(/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Resale Submitted! \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://sepolia.etherscan.io/tx/${txHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"underline\",\n          children: \"View Tx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true), {\n        id: toastId,\n        duration: 6000\n      });\n      setRefreshTrigger(prev => prev + 1); // Trigger data refresh\n    } catch (error) {\n      console.error(\"Resell Failed:\", error);\n      toast.error(`Resale Failed: ${error.message}`, {\n        id: toastId,\n        duration: 6000\n      });\n    } finally {\n      setResellingTicketId(null);\n    }\n  };\n\n  // Handler passed to VIPVerificationForm\n  const handleVIPVerified = useCallback(() => {\n    console.log(\"VIP verified callback triggered, refreshing data...\");\n    setRefreshTrigger(prev => prev + 1);\n  }, []);\n\n  // --- Render Logic ---\n  // Initial loading/error states (remain mostly the same)\n  if (!address) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg\",\n      children: \"Please connect your wallet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 147\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 26\n  }, this);\n  if (!user) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg\",\n      children: \"Please log in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 144\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 23\n  }, this);\n  if (!(networkState !== null && networkState !== void 0 && networkState.isCorrect)) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex flex-col items-center justify-center min-h-[400px] space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-error text-lg\",\n      children: [\"Wrong Network (\", (networkState === null || networkState === void 0 ? void 0 : (_networkState$current = networkState.currentNetwork) === null || _networkState$current === void 0 ? void 0 : _networkState$current.name) || 'Unknown', \").\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 182\n    }, this), /*#__PURE__*/_jsxDEV(GlowingButton, {\n      onClick: switchNetwork,\n      children: \"Switch Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 298\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 42\n  }, this);\n  if (!eventPriceInsider && !eventPriceOutsider) return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"flex items-center justify-center min-h-[400px]\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-accent-light text-lg\",\n      children: \"Loading event details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 180\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 59\n  }, this); // Added loading state for price\n\n  // VIP Check Step\n  if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"max-w-md mx-auto my-8\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(VIPVerificationForm, {\n        onVerified: handleVIPVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 116\n      }, this), \" \", isVIP === false && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-error mt-4\",\n        children: \"VIP Access Denied.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 191\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 19\n    }, this);\n  }\n\n  // Main Marketplace View\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    className: \"space-y-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"My Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), loadingTickets && ownedTickets.length === 0 ?\n      /*#__PURE__*/\n      // Show skeleton only if loading AND no tickets yet\n      _jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(2)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `owned-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }, this) : ownedTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: ownedTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => {} // No buy action for owned\n          ,\n          isOwned: true\n          // --- Reminder: Add props to NFTTicketCard.tsx ---\n          ,\n          onResell: handleResaleTicket,\n          isReselling: resellingTicketId === ticket.id\n          // ----------------------------------------------\n        }, `owned-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 22\n      }, this) : !loadingTickets && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-secondary-dark p-6 rounded-lg text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-text-secondary\",\n          children: \"You don't own any tickets yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 102\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 40\n      }, this) // Show message only if not loading\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-accent-light mb-6\",\n        children: \"Available Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 18\n      }, this), loadingTickets ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: [...Array(4)].map((_, index) => /*#__PURE__*/_jsxDEV(NFTTicketCardSkeleton, {}, `available-skeleton-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this) : availableTickets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\",\n        children: availableTickets.map(ticket => /*#__PURE__*/_jsxDEV(NFTTicketCard, {\n          ticket: ticket,\n          onBuy: () => handleBuyTicket(ticket) // Pass ticket data\n          ,\n          isOwned: false,\n          isBuying: buyingTicketId === ticket.id\n        }, `available-${ticket.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tickets currently available for purchase.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 103\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 9\n  }, this);\n};\n_s(MarketplacePage, \"hJ87F0WaNh1btYRw1Fi0X/CTBRM=\", false, function () {\n  return [useWallet, useAuth, useVIP];\n});\n_c = MarketplacePage;\nexport default MarketplacePage;\nvar _c;\n$RefreshReg$(_c, \"MarketplacePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","toast","motion","formatEther","useAuth","useWallet","useVIP","buyTicket","buyTicketUtil","getMyTickets","getMyTicketsUtil","resellTicket","resellTicketUtil","getEventDetails","getTokenMetadataURI","getAvailableTickets","getAvailableTicketsUtil","fetchMetadataFromUri","GlowingButton","VIPVerificationForm","NFTTicketCard","NFTTicketCardSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","USE_MOCK_DATA_FOR_AVAILABLE","availableTicketMetadataCIDs","MarketplacePage","_s","_networkState$current","address","networkState","switchNetwork","user","isVIP","availableTickets","setAvailableTickets","ownedTickets","setOwnedTickets","loadingTickets","setLoadingTickets","buyingTicketId","setBuyingTicketId","resellingTicketId","setResellingTicketId","eventPriceInsider","setEventPriceInsider","eventPriceOutsider","setEventPriceOutsider","refreshTrigger","setRefreshTrigger","fetchPrices","console","log","details","priceSet","ticketPriceInsider","warn","ticketPriceOutsider","error","fetchTicketDetails","id","_ref","_ref2","priceToShow","_metadata$attributes","_metadata$attributes$","uri","metadata","eventName","name","price","seatNumber","attributes","find","attr","trait_type","value","qrValue","imageUrl","image","undefined","detailError","fetchOwnedTickets","ownedIds","length","ownedDetailsPromises","map","resolvedDetails","Promise","all","filter","Boolean","fetchAvailableTickets","availableIds","Object","keys","Number","currentOwnedIds","t","includes","availableDetailsPromises","loadAllData","isCorrect","vipRequired","process","env","REACT_APP_VIP_REQUIRED","handleBuyTicket","ticketToBuy","isInsider","priceToUse","ownedTicketCount","REACT_APP_VIP_LIMIT","metadataCID","tokenURI","qrHash","Date","now","isOutsider","toastId","loading","txHash","success","children","href","target","rel","className","fileName","_jsxFileName","lineNumber","columnNumber","duration","prev","message","handleResaleTicket","tokenId","handleVIPVerified","div","initial","opacity","animate","currentNetwork","onClick","onVerified","Array","_","index","ticket","onBuy","isOwned","onResell","isReselling","isBuying","_c","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/pages/MarketplacePage.tsx"],"sourcesContent":["// src/pages/MarketplacePage.tsx\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'react-hot-toast';\r\nimport { motion } from 'framer-motion';\r\nimport { ethers, formatEther } from 'ethers'; // Import formatEther\r\n\r\n// --- Context Hooks ---\r\nimport { useAuth, useWallet, useVIP } from '../App';\r\n\r\n// --- Blockchain Utilities ---\r\nimport {\r\n    buyTicket as buyTicketUtil,\r\n    getMyTickets as getMyTicketsUtil,\r\n    resellTicket as resellTicketUtil,\r\n    getEventDetails,\r\n    getTokenMetadataURI,\r\n    getAvailableTickets as getAvailableTicketsUtil // Import the function\r\n} from '../utils/blockchain';\r\n// --- Metadata Helper ---\r\nimport { fetchMetadataFromUri } from '../utils/metadata'; // Import helper\r\n\r\n// --- Components ---\r\nimport GlowingButton from '../components/GlowingButton';\r\nimport VIPVerificationForm from '../components/VIPVerificationForm';\r\nimport NFTTicketCard from '../components/NFTTicketCard';\r\nimport NFTTicketCardSkeleton from '../components/NFTTicketCardSkeleton';\r\n\r\n// --- Type Definitions ---\r\nimport { TicketData } from '../types/global'; // Import shared type\r\n\r\n// --- Configuration ---\r\n// Flag to control whether to use mock data or real contract data for AVAILABLE tickets\r\nconst USE_MOCK_DATA_FOR_AVAILABLE = false; // <<< SET TO false TO USE BLOCKCHAIN DATA\r\n\r\n// --- WORKAROUND MAPPING: Map Available Ticket IDs to specific Metadata CIDs ---\r\n// This assumes you know which CID corresponds to which *potential* upcoming token ID.\r\n// Replace this with a better mechanism (backend API or contract refactor) in production!\r\nconst availableTicketMetadataCIDs: { [key: number]: string } = {\r\n    // Example: Assuming first available ticket corresponds to first CID, etc.\r\n    // You need to know how your contract assigns IDs and map accordingly.\r\n    // This mapping is fragile if using mock data IDs (1, 3) vs sequential contract IDs (0, 1, 2...).\r\n    // Using the provided CIDs:\r\n    0: \"bafkreiht5odm6db6ehfdqowdhvlod4tkcntwu25yrcrqhkux4xemsswsnq\",\r\n    1: \"bafkreifsryoxbp5moi2eprxwlulit47rzek6tcn3lfyxorvord3ob3546q\",\r\n    2: \"bafkreidsfigwgsuqvuwocn3scqhqddikbtk7go46jlgpyggr2ttuaa7ht4\",\r\n    3: \"bafkreibeacfvmoafm27zonbyfuuswvpvsfhcznfddtgomu2472qno6ndze\",\r\n    4: \"bafkreigyoncf7lgpndglgipvnotywpsudwuzrsyq46blyqtyr5eirr4fxy\",\r\n    5: \"bafkreifn5vngr66plqezmwvfubc4snvi27krijibh7ddh3fsvo6h24n3p4\",\r\n    6: \"bafkreihv4qvld7yzwc5ln67i6qi7lvdhpcliiktnlfrdqrp5hhxhggkepm\",\r\n    // Add more mappings if needed\r\n};\r\n// -------------------------------------------------------------------------\r\n\r\n\r\nconst MarketplacePage: React.FC = () => {\r\n    const { address, networkState, switchNetwork } = useWallet();\r\n    const { user } = useAuth();\r\n    const { isVIP } = useVIP();\r\n    const [availableTickets, setAvailableTickets] = useState<TicketData[]>([]);\r\n    const [ownedTickets, setOwnedTickets] = useState<TicketData[]>([]);\r\n    const [loadingTickets, setLoadingTickets] = useState<boolean>(true);\r\n    const [buyingTicketId, setBuyingTicketId] = useState<string | number | null>(null);\r\n    const [resellingTicketId, setResellingTicketId] = useState<number | null>(null);\r\n    const [eventPriceInsider, setEventPriceInsider] = useState<string | null>(null);\r\n    const [eventPriceOutsider, setEventPriceOutsider] = useState<string | null>(null);\r\n    const [refreshTrigger, setRefreshTrigger] = useState<number>(0); // State to trigger refresh\r\n\r\n\r\n    // --- Effects ---\r\n    // Fetch event prices once\r\n    useEffect(() => {\r\n        const fetchPrices = async () => {\r\n            console.log(\"Fetching event details for prices...\");\r\n            try {\r\n                const details = await getEventDetails();\r\n                let priceSet = false;\r\n                if (details?.ticketPriceInsider) {\r\n                    setEventPriceInsider(formatEther(details.ticketPriceInsider));\r\n                    priceSet = true;\r\n                } else {\r\n                     console.warn(\"Insider price not found in event details.\");\r\n                }\r\n                if (details?.ticketPriceOutsider) {\r\n                    setEventPriceOutsider(formatEther(details.ticketPriceOutsider));\r\n                    priceSet = true;\r\n                } else {\r\n                     console.warn(\"Outsider price not found in event details.\");\r\n                }\r\n                if (!priceSet) {\r\n                     toast.error(\"Could not determine event prices.\");\r\n                }\r\n            } catch (error) {\r\n                 console.error(\"Failed to fetch event details:\", error);\r\n                 toast.error(\"Could not load event details.\");\r\n            }\r\n        };\r\n        fetchPrices();\r\n    }, []);\r\n\r\n\r\n    // Fetch ticket details (generic helper)\r\n    const fetchTicketDetails = useCallback(async (id: number): Promise<TicketData | null> => {\r\n        // Determine price based on VIP status (or use a default if needed)\r\n        // Note: This assumes the *current user's* VIP status determines the display price,\r\n        // which might not be accurate for *all* available tickets.\r\n        // A better approach might show both prices or adjust based on contract logic.\r\n        const priceToShow = (isVIP === true ? eventPriceInsider : eventPriceOutsider) ?? eventPriceInsider ?? '?.??';\r\n\r\n        try {\r\n            const uri = await getTokenMetadataURI(id);\r\n            const metadata = await fetchMetadataFromUri(uri);\r\n            // const qrHash = await getQRHash(id); // Add if needed and implemented\r\n\r\n            return {\r\n                id,\r\n                eventName: metadata?.name || `Ticket #${id}`,\r\n                price: priceToShow, // Show relevant price\r\n                seatNumber: metadata?.attributes?.find((attr: any) => attr.trait_type === 'Seat')?.value || `Seat-${id}`,\r\n                qrValue: `qr-${id}`, // Replace with actual QR data if available\r\n                imageUrl: metadata?.image || undefined,\r\n                metadata // Store full metadata\r\n            };\r\n        } catch (detailError) {\r\n            console.error(`Failed to fetch details for token ${id}:`, detailError);\r\n            return null;\r\n        }\r\n    }, [isVIP, eventPriceInsider, eventPriceOutsider]); // Dependencies for price calculation\r\n\r\n\r\n    // Fetch Owned Tickets\r\n    const fetchOwnedTickets = useCallback(async () => {\r\n        if (!address) return;\r\n        console.log(\"Fetching owned tickets...\");\r\n        try {\r\n            const ownedIds = await getMyTicketsUtil(address); // Needs implementation in blockchain.ts\r\n            if (ownedIds.length === 0) {\r\n                setOwnedTickets([]);\r\n                return;\r\n            }\r\n            const ownedDetailsPromises = ownedIds.map(fetchTicketDetails);\r\n            const resolvedDetails = (await Promise.all(ownedDetailsPromises)).filter(Boolean) as TicketData[];\r\n            setOwnedTickets(resolvedDetails);\r\n        } catch (error) {\r\n            console.error(\"Error in fetchOwnedTickets:\", error);\r\n            toast.error(\"Could not load your owned tickets.\");\r\n            setOwnedTickets([]);\r\n        }\r\n    }, [address, fetchTicketDetails]); // Include fetchTicketDetails dependency\r\n\r\n\r\n    // Fetch Available Tickets\r\n    const fetchAvailableTickets = useCallback(async () => {\r\n        if (!address || (!eventPriceInsider && !eventPriceOutsider)) return; // Need price info\r\n        console.log(\"Fetching available tickets...\");\r\n        try {\r\n            let availableIds: number[] = [];\r\n            if (USE_MOCK_DATA_FOR_AVAILABLE) {\r\n                // Simulate getting available IDs from mock data keys if needed\r\n                availableIds = Object.keys(availableTicketMetadataCIDs).map(Number); // Example: Use keys from CID map\r\n                console.log(\"Using mock available IDs based on CID map:\", availableIds);\r\n                 // Filter out owned ones if using mock IDs\r\n                 const currentOwnedIds = ownedTickets.map(t => t.id);\r\n                 availableIds = availableIds.filter(id => !currentOwnedIds.includes(id));\r\n            } else {\r\n                // --- Fetch available IDs from blockchain ---\r\n                availableIds = await getAvailableTicketsUtil(); // Needs implementation in blockchain.ts\r\n                // ------------------------------------------\r\n            }\r\n\r\n            if (availableIds.length === 0) {\r\n                 setAvailableTickets([]);\r\n                 return;\r\n            }\r\n\r\n            const availableDetailsPromises = availableIds.map(fetchTicketDetails);\r\n            const resolvedDetails = (await Promise.all(availableDetailsPromises)).filter(Boolean) as TicketData[];\r\n            setAvailableTickets(resolvedDetails);\r\n\r\n        } catch (error) {\r\n             console.error(\"Failed to fetch available tickets:\", error);\r\n             toast.error(\"Could not load available tickets.\");\r\n             setAvailableTickets([]);\r\n        }\r\n    }, [address, eventPriceInsider, eventPriceOutsider, fetchTicketDetails, ownedTickets]); // Added ownedTickets dependency for filtering mock\r\n\r\n\r\n    // Effect to load all data based on prerequisites and refresh trigger\r\n    useEffect(() => {\r\n        const loadAllData = async () => {\r\n            console.log(\"Checking prerequisites to load data...\");\r\n            setLoadingTickets(true);\r\n            if (address && user && networkState?.isCorrect && (eventPriceInsider || eventPriceOutsider)) {\r\n                console.log(\"Prerequisites met, fetching owned tickets...\");\r\n                await fetchOwnedTickets();\r\n\r\n                const vipRequired = process.env.REACT_APP_VIP_REQUIRED === 'true';\r\n                console.log(`VIP Required: ${vipRequired}, User isVIP: ${isVIP}`);\r\n                if (!vipRequired || isVIP === true) {\r\n                     console.log(\"Fetching available tickets...\");\r\n                    await fetchAvailableTickets();\r\n                } else if (isVIP === false) {\r\n                    setAvailableTickets([]);\r\n                    console.log(\"VIP required, user is not VIP. Not fetching available tickets.\");\r\n                } else {\r\n                    console.log(\"VIP required, waiting for verification result...\");\r\n                    setAvailableTickets([]); // Clear until VIP status known\r\n                }\r\n            } else {\r\n                console.log(\"Prerequisites not met, clearing ticket data.\");\r\n                if (!address) console.log(\"- Wallet not connected\");\r\n                if (!user) console.log(\"- User not logged in\");\r\n                if (!networkState?.isCorrect) console.log(\"- Incorrect network\");\r\n                if (!eventPriceInsider && !eventPriceOutsider) console.log(\"- Event prices not loaded\");\r\n                setAvailableTickets([]);\r\n                setOwnedTickets([]);\r\n            }\r\n            setLoadingTickets(false);\r\n             console.log(\"Finished loading data attempt.\");\r\n        };\r\n\r\n        loadAllData();\r\n    }, [address, user, networkState, eventPriceInsider, eventPriceOutsider, isVIP, fetchOwnedTickets, fetchAvailableTickets, refreshTrigger]); // Include refreshTrigger\r\n\r\n\r\n    // --- Event Handlers ---\r\n    const handleBuyTicket = async (ticketToBuy: TicketData) => { // Expect TicketData object\r\n        if (!address || !user || !networkState?.isCorrect) return; // Basic guards handled by render logic\r\n        const isInsider = isVIP === true;\r\n        const priceToUse = isInsider ? eventPriceInsider : eventPriceOutsider;\r\n\r\n        if (!priceToUse) return toast.error('Cannot determine ticket price.'); // Check if price is available\r\n\r\n        // VIP Limit Check\r\n        const ownedTicketCount = ownedTickets.length;\r\n        if (isInsider && ownedTicketCount >= 1 && process.env.REACT_APP_VIP_LIMIT === 'true') {\r\n            return toast.error(\"VIP members are limited to 1 ticket.\");\r\n        }\r\n\r\n        // --- Prepare Arguments for buyTicketUtil ---\r\n        // ** WORKAROUND/PLACEHOLDER **\r\n        // Ideally, contract generates next ID and constructs URI/Hash, or backend provides it.\r\n        // Here, we derive URI from a pre-defined CID mapping based on the available ticket's ID.\r\n        // This assumes available ticket IDs map sequentially to your provided CIDs.\r\n        const metadataCID = availableTicketMetadataCIDs[ticketToBuy.id];\r\n        if (!metadataCID) {\r\n             toast.error(`Could not find metadata CID mapping for ticket ID ${ticketToBuy.id}. Cannot buy.`);\r\n             console.error(\"Missing CID mapping for available ticket ID:\", ticketToBuy.id);\r\n             return;\r\n        }\r\n        const tokenURI = `ipfs://${metadataCID}`; // Construct IPFS URI\r\n        const qrHash = `BLOCKFEST-${ticketToBuy.id}-${Date.now()}`; // Simple placeholder QR hash\r\n        const isOutsider = !isInsider;\r\n        // --- End Workaround ---\r\n\r\n        setBuyingTicketId(ticketToBuy.id);\r\n        const toastId = `buy-${ticketToBuy.id}`;\r\n        toast.loading('Processing transaction...', { id: toastId });\r\n        try {\r\n            // Call util with determined arguments\r\n            const txHash = await buyTicketUtil(tokenURI, qrHash, isOutsider, priceToUse);\r\n\r\n            toast.success(<>Ticket Purchased! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a></>, { id: toastId, duration: 6000 });\r\n            setRefreshTrigger(prev => prev + 1); // Trigger data refresh\r\n\r\n        } catch (error: any) {\r\n            console.error(\"Buy Ticket Failed:\", error);\r\n            toast.error(`Purchase Failed: ${error.message}`, { id: toastId, duration: 6000 });\r\n        } finally {\r\n            setBuyingTicketId(null);\r\n        }\r\n    };\r\n\r\n    const handleResaleTicket = async (tokenId: number) => {\r\n        if (!address || !user || !networkState?.isCorrect) return; // Basic guards handled by render logic\r\n\r\n        setResellingTicketId(tokenId);\r\n        const toastId = `resell-${tokenId}`;\r\n        toast.loading('Processing resale...', { id: toastId });\r\n        try {\r\n            const txHash = await resellTicketUtil(tokenId);\r\n            toast.success(<>Resale Submitted! <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\" className='underline'>View Tx</a></>, { id: toastId, duration: 6000 });\r\n            setRefreshTrigger(prev => prev + 1); // Trigger data refresh\r\n        } catch (error: any) {\r\n            console.error(\"Resell Failed:\", error);\r\n            toast.error(`Resale Failed: ${error.message}`, { id: toastId, duration: 6000 });\r\n        } finally {\r\n            setResellingTicketId(null);\r\n        }\r\n     };\r\n\r\n    // Handler passed to VIPVerificationForm\r\n    const handleVIPVerified = useCallback(() => {\r\n        console.log(\"VIP verified callback triggered, refreshing data...\");\r\n        setRefreshTrigger(prev => prev + 1);\r\n    }, []);\r\n\r\n    // --- Render Logic ---\r\n    // Initial loading/error states (remain mostly the same)\r\n    if (!address) return <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\"><p className=\"text-center text-accent-light text-lg\">Please connect your wallet.</p></motion.div>;\r\n    if (!user) return <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\"><p className=\"text-center text-accent-light text-lg\">Please log in.</p></motion.div>;\r\n    if (!networkState?.isCorrect) return <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\"><p className=\"text-center text-error text-lg\">Wrong Network ({networkState?.currentNetwork?.name || 'Unknown'}).</p><GlowingButton onClick={switchNetwork}>Switch Network</GlowingButton></motion.div>;\r\n    if (!eventPriceInsider && !eventPriceOutsider) return <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"flex items-center justify-center min-h-[400px]\"><p className=\"text-center text-accent-light text-lg\">Loading event details...</p></motion.div>; // Added loading state for price\r\n\r\n    // VIP Check Step\r\n    if (process.env.REACT_APP_VIP_REQUIRED === 'true' && isVIP !== true) {\r\n         return ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"max-w-md mx-auto my-8\"> <VIPVerificationForm onVerified={handleVIPVerified} /> {isVIP === false && <p className=\"text-center text-error mt-4\">VIP Access Denied.</p>} </motion.div> );\r\n    }\r\n\r\n    // Main Marketplace View\r\n    return (\r\n        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"space-y-12\">\r\n            {/* My Tickets Section */}\r\n            <section>\r\n                <h2 className=\"text-2xl font-bold text-accent-light mb-6\">My Tickets</h2>\r\n                {loadingTickets && ownedTickets.length === 0 ? ( // Show skeleton only if loading AND no tickets yet\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {[...Array(2)].map((_, index) => <NFTTicketCardSkeleton key={`owned-skeleton-${index}`} />)}\r\n                    </div>\r\n                ) : ownedTickets.length > 0 ? (\r\n                     <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {ownedTickets.map((ticket) => (\r\n                            <NFTTicketCard\r\n                                key={`owned-${ticket.id}`}\r\n                                ticket={ticket}\r\n                                onBuy={() => {}} // No buy action for owned\r\n                                isOwned={true}\r\n                                // --- Reminder: Add props to NFTTicketCard.tsx ---\r\n                                onResell={handleResaleTicket}\r\n                                isReselling={resellingTicketId === ticket.id}\r\n                                // ----------------------------------------------\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    !loadingTickets && <div className=\"bg-secondary-dark p-6 rounded-lg text-center\"><p className=\"text-text-secondary\">You don't own any tickets yet.</p></div> // Show message only if not loading\r\n                )}\r\n            </section>\r\n\r\n            {/* Available Tickets Section */}\r\n            <section>\r\n                 <h2 className=\"text-2xl font-bold text-accent-light mb-6\">Available Tickets</h2>\r\n                {loadingTickets ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {[...Array(4)].map((_, index) => <NFTTicketCardSkeleton key={`available-skeleton-${index}`} />)}\r\n                    </div>\r\n                ) : availableTickets.length > 0 ? (\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                        {availableTickets.map((ticket) => (\r\n                            <NFTTicketCard\r\n                                key={`available-${ticket.id}`}\r\n                                ticket={ticket}\r\n                                onBuy={() => handleBuyTicket(ticket)} // Pass ticket data\r\n                                isOwned={false}\r\n                                isBuying={buyingTicketId === ticket.id}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"text-center text-text-secondary bg-secondary-dark p-6 rounded-lg\"><p>No tickets currently available for purchase.</p></div>\r\n                )}\r\n            </section>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default MarketplacePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}