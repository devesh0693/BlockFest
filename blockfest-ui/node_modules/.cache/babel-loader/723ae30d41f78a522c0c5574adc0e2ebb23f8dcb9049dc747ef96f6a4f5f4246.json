{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\negis\\\\OneDrive\\\\Desktop\\\\new project\\\\blockfest-ui\\\\src\\\\contexts\\\\VIPContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VIPContext = /*#__PURE__*/createContext(undefined);\nexport const VIPProvider = ({\n  children,\n  navigateToMarketplace\n}) => {\n  _s();\n  const [isVIP, setIsVIP] = useState(null);\n  const [checkingVIP, setCheckingVIP] = useState(false);\n  const {\n    user\n  } = useAuth();\n\n  // Check for stored VIP status on mount and when user changes\n  useEffect(() => {\n    const checkStoredVIPStatus = async () => {\n      if (user) {\n        try {\n          // Check if we have stored VIP status for this user\n          const storedStatus = localStorage.getItem(`vip_status_${user.uid}`);\n          if (storedStatus !== null) {\n            // If we have stored status, use it\n            const isVIP = storedStatus === 'true';\n            setIsVIP(isVIP);\n            if (isVIP) {\n              toast.success('✅ VIP Status Verified!');\n            }\n          } else {\n            // If no stored status, trigger verification\n            await checkVIPStatus('', ''); // This will be handled by the landing page\n          }\n        } catch (error) {\n          console.error(\"Error checking VIP status:\", error);\n          setIsVIP(false);\n        }\n      } else {\n        // Reset if no user\n        setIsVIP(null);\n        localStorage.removeItem('vip_status');\n      }\n    };\n    checkStoredVIPStatus();\n  }, [user]);\n\n  // Only check VIP status when entering marketplace\n  useEffect(() => {\n    if (user && window.location.pathname === '/marketplace') {\n      // Only check VIP status if not already verified\n      if (!isVIP) {\n        toast.error('VIP verification required before accessing marketplace.');\n      }\n    }\n  }, [user, window.location.pathname, isVIP]);\n  const checkVIPStatus = async (name, rollNumber) => {\n    if (!user) {\n      toast.error(\"Please log in before checking VIP status.\");\n      return false;\n    }\n    setCheckingVIP(true);\n    const toastId = 'vip-check';\n    toast.loading('Verifying VIP Status...', {\n      id: toastId\n    });\n    try {\n      const response = await checkVIPApi(name, rollNumber);\n\n      // Store the VIP status for this user session\n      if (user) {\n        localStorage.setItem(`vip_status_${user.uid}`, response.isVIP.toString());\n        console.log(\"Stored VIP status:\", response.isVIP);\n      }\n      setIsVIP(response.isVIP);\n      toast.dismiss(toastId);\n      if (response.isVIP) {\n        toast.success('✅ VIP Status Verified!');\n      } else {\n        toast.error('❌ Access Denied. Not on VIP list.');\n      }\n      return response.isVIP;\n    } catch (error) {\n      console.error(\"VIP Check API Error:\", error);\n      toast.dismiss(toastId);\n      toast.error(error.message || 'Error checking VIP status. Please try again.');\n      setIsVIP(false);\n      return false;\n    } finally {\n      setCheckingVIP(false);\n    }\n  };\n  const resetVIP = () => {\n    setIsVIP(null);\n    if (user) {\n      localStorage.removeItem(`vip_status_${user.uid}`);\n    }\n  };\n  const value = {\n    isVIP,\n    checkingVIP,\n    checkVIPStatus,\n    resetVIP,\n    navigateToMarketplace\n  };\n  return /*#__PURE__*/_jsxDEV(VIPContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(VIPProvider, \"2YmPQwvI13B1G0PpzEIgVb9hTnE=\", false, function () {\n  return [useAuth];\n});\n_c = VIPProvider;\nexport const useVIP = () => {\n  _s2();\n  const context = useContext(VIPContext);\n  if (context === undefined) {\n    throw new Error('useVIP must be used within a VIPProvider');\n  }\n  return context;\n};\n_s2(useVIP, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default VIPContext;\nvar _c;\n$RefreshReg$(_c, \"VIPProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","checkVIPApi","toast","jsxDEV","_jsxDEV","VIPContext","undefined","VIPProvider","children","navigateToMarketplace","_s","isVIP","setIsVIP","checkingVIP","setCheckingVIP","user","checkStoredVIPStatus","storedStatus","localStorage","getItem","uid","success","checkVIPStatus","error","console","removeItem","window","location","pathname","name","rollNumber","toastId","loading","id","response","setItem","toString","log","dismiss","message","resetVIP","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useVIP","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/contexts/VIPContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { checkVIPApi } from '../firebase/index';\nimport { toast } from 'react-hot-toast';\n\ninterface VIPContextType {\n    isVIP: boolean | null;\n    checkingVIP: boolean;\n    checkVIPStatus: (name: string, rollNumber: string) => Promise<boolean>;\n    resetVIP: () => void;\n    navigateToMarketplace: () => void;\n}\n\nconst VIPContext = createContext<VIPContextType | undefined>(undefined);\n\nexport const VIPProvider: React.FC<{ children: React.ReactNode; navigateToMarketplace: () => void }> = ({ children, navigateToMarketplace }) => {\n    const [isVIP, setIsVIP] = useState<boolean | null>(null);\n    const [checkingVIP, setCheckingVIP] = useState<boolean>(false);\n    const { user } = useAuth();\n    \n    // Check for stored VIP status on mount and when user changes\n    useEffect(() => {\n        const checkStoredVIPStatus = async () => {\n            if (user) {\n                try {\n                    // Check if we have stored VIP status for this user\n                    const storedStatus = localStorage.getItem(`vip_status_${user.uid}`);\n                    if (storedStatus !== null) {\n                        // If we have stored status, use it\n                        const isVIP = storedStatus === 'true';\n                        setIsVIP(isVIP);\n                        if (isVIP) {\n                            toast.success('✅ VIP Status Verified!');\n                        }\n                    } else {\n                        // If no stored status, trigger verification\n                        await checkVIPStatus('', ''); // This will be handled by the landing page\n                    }\n                } catch (error) {\n                    console.error(\"Error checking VIP status:\", error);\n                    setIsVIP(false);\n                }\n            } else {\n                // Reset if no user\n                setIsVIP(null);\n                localStorage.removeItem('vip_status');\n            }\n        };\n        \n        checkStoredVIPStatus();\n    }, [user]);\n\n    // Only check VIP status when entering marketplace\n    useEffect(() => {\n        if (user && window.location.pathname === '/marketplace') {\n            // Only check VIP status if not already verified\n            if (!isVIP) {\n                toast.error('VIP verification required before accessing marketplace.');\n            }\n        }\n    }, [user, window.location.pathname, isVIP]);\n\n    const checkVIPStatus = async (name: string, rollNumber: string): Promise<boolean> => {\n        if (!user) {\n            toast.error(\"Please log in before checking VIP status.\");\n            return false;\n        }\n        \n        setCheckingVIP(true);\n        const toastId = 'vip-check';\n        toast.loading('Verifying VIP Status...', { id: toastId });\n        \n        try {\n            const response = await checkVIPApi(name, rollNumber);\n            \n            // Store the VIP status for this user session\n            if (user) {\n                localStorage.setItem(`vip_status_${user.uid}`, response.isVIP.toString());\n                console.log(\"Stored VIP status:\", response.isVIP);\n            }\n            \n            setIsVIP(response.isVIP);\n            \n            toast.dismiss(toastId);\n            if (response.isVIP) {\n                toast.success('✅ VIP Status Verified!');\n            } else {\n                toast.error('❌ Access Denied. Not on VIP list.');\n            }\n            \n            return response.isVIP;\n        } catch (error: any) {\n            console.error(\"VIP Check API Error:\", error);\n            toast.dismiss(toastId);\n            toast.error(error.message || 'Error checking VIP status. Please try again.');\n            setIsVIP(false);\n            return false;\n        } finally {\n            setCheckingVIP(false);\n        }\n    };\n\n    const resetVIP = () => {\n        setIsVIP(null);\n        if (user) {\n            localStorage.removeItem(`vip_status_${user.uid}`);\n        }\n    };\n\n    const value = { isVIP, checkingVIP, checkVIPStatus, resetVIP, navigateToMarketplace };\n\n    return (\n        <VIPContext.Provider value={value}>\n            {children}\n        </VIPContext.Provider>\n    );\n};\n\nexport const useVIP = () => {\n    const context = useContext(VIPContext);\n    if (context === undefined) {\n        throw new Error('useVIP must be used within a VIPProvider');\n    }\n    return context;\n};\n\nexport default VIPContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}