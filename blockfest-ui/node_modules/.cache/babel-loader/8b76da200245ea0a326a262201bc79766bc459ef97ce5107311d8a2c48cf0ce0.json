{"ast":null,"code":"// src/utils/blockchain.ts\n\nimport { ethers, parseEther } from 'ethers';\nimport { toast } from 'react-hot-toast';\n// Import only the ABI property from the JSON file\nimport EventManagerJson from '../abi/EventManager.json';\nimport TicketNFTJson from '../abi/TicketNFT.json';\n\n// Define types\n\n// --- Configuration ---\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || '0x0000000000000000000000000000000000000000';\nconst TARGET_NETWORK_ID = parseInt(process.env.REACT_APP_TARGET_NETWORK_ID || '11155111', 10);\nconst TARGET_NETWORK_NAME = process.env.REACT_APP_TARGET_NETWORK_NAME || 'Sepolia Testnet';\nif (CONTRACT_ADDRESS === '0x0000000000000000000000000000000000000000') {\n  console.warn('Contract address not configured. Please set REACT_APP_CONTRACT_ADDRESS in your .env file.');\n  toast.error('Contract address not configured. Please set it in your .env file.');\n}\n\n// --- ABIs ---\n// IMPORTANT: Paste your ACTUAL compiled ABIs!\n\nexport const EVENT_MANAGER_ABI = EventManagerJson.abi;\nexport const TICKET_NFT_ABI = TicketNFTJson.abi;\n\n// --- Configuration ---\n\n// Basic validation\nif (!CONTRACT_ADDRESS) {\n  throw new Error('REACT_APP_CONTRACT_ADDRESS environment variable is required');\n}\nif (!TARGET_NETWORK_ID) console.error(\"REACT_APP_TARGET_NETWORK_ID not set.\");\nif (EVENT_MANAGER_ABI.length === 0) console.error(\"EVENT_MANAGER_ABI is empty.\");\nif (TICKET_NFT_ABI.length === 0) console.error(\"TICKET_NFT_ABI is empty.\");\n// --- Helper Functions ---\nconst getProvider = () => {\n  if (typeof window.ethereum === 'undefined') {\n    console.error('MetaMask not detected');\n    return null;\n  }\n  return new ethers.BrowserProvider(window.ethereum);\n};\nconst getSigner = async provider => {\n  try {\n    const accounts = await provider.send('eth_requestAccounts', []);\n    if (accounts.length === 0) return null;\n    return provider.getSigner(accounts[0]);\n  } catch (error) {\n    console.error('Failed to get signer:', error);\n    return null;\n  }\n};\nconst getEventManagerContract = async (readOnly = false) => {\n  const provider = getProvider();\n  if (!provider) return null;\n  const signer = readOnly ? provider : await getSigner(provider);\n  if (!signer) return null;\n  return new ethers.Contract(CONTRACT_ADDRESS, EVENT_MANAGER_ABI, signer);\n};\nconst getTicketNFTContract = async (readOnly = false) => {\n  const provider = getProvider();\n  if (!provider) return null;\n  const signer = readOnly ? provider : await getSigner(provider);\n  if (!signer) return null;\n  try {\n    var _eventManager$ticketN, _eventManager$getTick, _eventManager$nftCont;\n    // If we have a hardcoded TicketNFT address, use it directly\n    const TICKET_NFT_ADDRESS = process.env.REACT_APP_TICKET_NFT_ADDRESS;\n    if (TICKET_NFT_ADDRESS) {\n      return new ethers.Contract(TICKET_NFT_ADDRESS, TICKET_NFT_ABI, signer);\n    }\n\n    // Otherwise try to get it from EventManager\n    const eventManager = await getEventManagerContract(true);\n    if (!eventManager) return null;\n\n    // Try different possible function names\n    const ticketNFTAddress = (await ((_eventManager$ticketN = eventManager.ticketNFT) === null || _eventManager$ticketN === void 0 ? void 0 : _eventManager$ticketN.call(eventManager))) || (await ((_eventManager$getTick = eventManager.getTicketNFT) === null || _eventManager$getTick === void 0 ? void 0 : _eventManager$getTick.call(eventManager))) || (await ((_eventManager$nftCont = eventManager.nftContract) === null || _eventManager$nftCont === void 0 ? void 0 : _eventManager$nftCont.call(eventManager)));\n    if (!ticketNFTAddress) {\n      console.error(\"Could not get TicketNFT address from EventManager\");\n      return null;\n    }\n    return new ethers.Contract(ticketNFTAddress, TICKET_NFT_ABI, signer);\n  } catch (error) {\n    console.error('Failed to get TicketNFT contract:', error);\n    return null;\n  }\n};\n\n// --- Core Blockchain Functions ---\nexport const connectWallet = async () => {\n  const provider = getProvider();\n  if (!provider) return null;\n  const signer = await getSigner(provider);\n  if (!signer) return null;\n  const address = await signer.getAddress();\n  return address;\n};\nexport const checkNetwork = async () => {\n  const provider = getProvider();\n  if (!provider) return {\n    isCorrect: false,\n    currentNetwork: null\n  };\n  try {\n    const network = await provider.getNetwork();\n    const currentNetwork = {\n      chainId: Number(network.chainId),\n      name: network.name\n    };\n    return {\n      isCorrect: Number(network.chainId) === TARGET_NETWORK_ID,\n      currentNetwork\n    };\n  } catch (error) {\n    console.error('Error checking network:', error);\n    return {\n      isCorrect: false,\n      currentNetwork: null\n    };\n  }\n};\nexport const switchNetwork = async () => {\n  if (typeof window.ethereum === 'undefined') {\n    console.error('MetaMask not detected');\n    return false;\n  }\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: ethers.hexlify(TARGET_NETWORK_ID.toString())\n      }]\n    });\n    return true;\n  } catch (error) {\n    if (error.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: ethers.hexlify(TARGET_NETWORK_ID.toString()),\n            chainName: TARGET_NETWORK_NAME,\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: [process.env.REACT_APP_RPC_URL || '']\n          }]\n        });\n        return true;\n      } catch (addError) {\n        console.error('Error adding network:', addError);\n        return false;\n      }\n    }\n    console.error('Error switching network:', error);\n    return false;\n  }\n};\n\n// Corrected buyTicket\nexport const buyTicket = async (tokenURI, qrHash, outsider, priceInEther) => {\n  const contract = await getEventManagerContract(false); // EventManager handles buying\n  if (!contract) throw new Error(\"EventManager Contract not available.\");\n  if (!priceInEther) throw new Error(\"Price is required to buy ticket.\");\n  try {\n    var _receipt$transactionH;\n    const value = parseEther(priceInEther);\n    console.log(`Calling contract.buyTicket with URI: ${tokenURI}, QR: ${qrHash}, Outsider: ${outsider}, Value: ${value.toString()}`);\n    const tx = await contract.buyTicket(tokenURI, qrHash, outsider, {\n      value\n    });\n    const receipt = await tx.wait();\n    console.log(`Transaction Confirmed: ${receipt === null || receipt === void 0 ? void 0 : receipt.transactionHash}`);\n    return (_receipt$transactionH = receipt === null || receipt === void 0 ? void 0 : receipt.transactionHash) !== null && _receipt$transactionH !== void 0 ? _receipt$transactionH : null;\n  } catch (error) {\n    var _error$data;\n    console.error(\"Buy Ticket Error:\", error);\n    const reason = error.reason || (error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.message) || error.message || 'Unknown error';\n    if (error.code === 4001) throw new Error('Transaction rejected.');\n    throw new Error(`Purchase Failed: ${reason}`);\n  }\n};\n\n// --- *** CORRECTED getMyTickets using Event Querying *** ---\nexport const getMyTickets = async userAddress => {\n  if (!userAddress) return [];\n  const provider = getProvider();\n  const nftContract = await getTicketNFTContract(true); // Get read-only NFT contract\n\n  if (!provider || !nftContract) {\n    console.error(\"getMyTickets: Could not get Provider or TicketNFT contract instance.\");\n    throw new Error(\"Failed to connect to NFT contract.\");\n  }\n  try {\n    console.log(`Querying Transfer events for recipient ${userAddress} on contract ${await nftContract.getAddress()}`);\n\n    // Define the Transfer event filter - transfers TO the userAddress\n    const filterTo = nftContract.filters.Transfer(null, userAddress);\n    // Define the Transfer event filter - transfers FROM the userAddress\n    const filterFrom = nftContract.filters.Transfer(userAddress);\n\n    // Query events (adjust block range as needed for performance - 'earliest' can be slow)\n    // Consider storing the last queried block number locally and starting from there.\n    const transferEventsTo = await nftContract.queryFilter(filterTo, 'earliest', 'latest');\n    const transferEventsFrom = await nftContract.queryFilter(filterFrom, 'earliest', 'latest');\n    console.log(`Found ${transferEventsTo.length} Transfer(to) events`);\n    console.log(`Found ${transferEventsFrom.length} Transfer(from) events`);\n\n    // Process events to determine current ownership\n    const ownedTokenIds = new Map();\n\n    // Add tokens transferred TO the user\n    transferEventsTo.forEach(event => {\n      if (event.args && event.args.tokenId) {\n        ownedTokenIds.set(Number(event.args.tokenId), true); // Mark as potentially owned\n      }\n    });\n\n    // Remove tokens transferred FROM the user\n    transferEventsFrom.forEach(event => {\n      if (event.args && event.args.tokenId) {\n        ownedTokenIds.delete(Number(event.args.tokenId)); // Remove if transferred away\n      }\n    });\n    const finalOwnedIds = Array.from(ownedTokenIds.keys());\n    console.log(\"Final calculated owned ticket IDs:\", finalOwnedIds);\n    return finalOwnedIds;\n  } catch (error) {\n    console.error(\"Error querying Transfer events in getMyTickets:\", error);\n    throw new Error(\"Failed to fetch owned tickets via event query.\");\n  }\n};\n\n// Corrected resellTicket (uses EventManager)\nexport const resellTicket = async tokenId => {\n  const contract = await getEventManagerContract(false);\n  if (!contract) throw new Error(\"EventManager Contract not available.\");\n  try {\n    var _receipt$transactionH2;\n    const tx = await contract.sellTicketBack(tokenId);\n    const receipt = await tx.wait();\n    return (_receipt$transactionH2 = receipt === null || receipt === void 0 ? void 0 : receipt.transactionHash) !== null && _receipt$transactionH2 !== void 0 ? _receipt$transactionH2 : null;\n  } catch (error) {\n    console.error(\"Error reselling ticket:\", error);\n    throw new Error(error.message);\n  }\n};\n\n// Fix debugContractInterface\nexport const debugContractInterface = async () => {\n  const provider = getProvider();\n  if (!provider) {\n    console.error(\"Provider not available\");\n    return;\n  }\n  try {\n    const eventManager = await getEventManagerContract(true);\n    if (!eventManager) {\n      console.error(\"Could not get EventManager contract\");\n      return;\n    }\n\n    // Get the contract address\n    const address = await eventManager.getAddress();\n    console.log(\"Contract address:\", address);\n\n    // Get all function names (ethers v6)\n    const fragments = eventManager.interface.fragments;\n    const functionNames = fragments.filter(frag => frag.type === \"function\").map(frag => frag.name);\n    console.log(\"Available functions:\", functionNames);\n    return {\n      address,\n      functionNames\n    };\n  } catch (error) {\n    console.error(\"Error debugging contract:\", error);\n    throw error;\n  }\n};\n\n// Update getEventDetails to use the correct function names\nexport const getEventDetails = async () => {\n  const contract = await getEventManagerContract(true);\n  if (!contract) return null;\n  try {\n    var _contract$isActive, _contract$eventActive, _contract$maxTickets, _contract$ticketCount;\n    // First, let's debug what functions are available\n    const debug = await debugContractInterface();\n    console.log(\"Contract debug info:\", debug);\n\n    // Try to get basic info first\n    const [active, maxTickets, currentTickets] = await Promise.all([((_contract$isActive = contract.isActive) === null || _contract$isActive === void 0 ? void 0 : _contract$isActive.call(contract)) || ((_contract$eventActive = contract.eventActive) === null || _contract$eventActive === void 0 ? void 0 : _contract$eventActive.call(contract)), // Try both possible function names\n    (_contract$maxTickets = contract.maxTickets) === null || _contract$maxTickets === void 0 ? void 0 : _contract$maxTickets.call(contract), (_contract$ticketCount = contract.ticketCount) === null || _contract$ticketCount === void 0 ? void 0 : _contract$ticketCount.call(contract)]);\n    return {\n      isActive: active || false,\n      maxTickets: Number(maxTickets || 0),\n      currentTickets: Number(currentTickets || 0),\n      name: \"BlockFest Event\",\n      description: \"BlockFest Event Description\",\n      startDate: \"TBD\",\n      endDate: \"TBD\",\n      ticketPrice: \"0\",\n      ticketPriceInsider: \"0\",\n      ticketPriceOutsider: \"0\"\n    };\n  } catch (error) {\n    console.error(\"Error getting event details:\", error);\n    return null;\n  }\n};\n\n// Corrected getTokenMetadataURI (uses TicketNFT)\nexport const getTokenMetadataURI = async tokenId => {\n  const contract = await getTicketNFTContract(true);\n  if (!contract) return null;\n  try {\n    const uri = await contract.tokenURI(tokenId);\n    return uri;\n  } catch (error) {\n    console.error(`Error getting token URI for ${tokenId}:`, error);\n    return null;\n  }\n};\n\n// --- Updated getAvailableTickets (fetches ALL issued IDs) ---\nexport const getAvailableTickets = async () => {\n  const contract = await getEventManagerContract(true);\n  if (!contract) return [];\n  try {\n    const countBN = await contract.ticketCount();\n    const count = Number(countBN);\n    if (count === 0) return [];\n    console.log(`Total tickets issued: ${count}. Fetching IDs...`);\n    const ids = [];\n    const promises = [];\n    for (let i = 0; i < count; i++) {\n      promises.push(contract.issuedTickets(i));\n    }\n    const results = await Promise.all(promises);\n    results.forEach(tokenIdBN => {\n      ids.push(Number(tokenIdBN));\n    });\n    console.log(\"All issued ticket IDs fetched:\", ids);\n    return ids;\n  } catch (error) {\n    console.error(\"Error getting available/issued tickets:\", error);\n    toast.error(\"Could not retrieve list of issued tickets.\");\n    return [];\n  }\n};\n\n// Corrected getQRHash (uses TicketNFT)\nexport const getQRHash = async tokenId => {\n  const nftContract = await getTicketNFTContract(true);\n  if (!nftContract) return null;\n  try {\n    // Ensure TICKET_NFT_ABI includes getQRHash\n    const qrHash = await nftContract.getQRHash(tokenId);\n    return qrHash;\n  } catch (error) {\n    console.error(`Error getting QR Hash for token ${tokenId}:`, error.message);\n    return null;\n  }\n};\nexport const verifyContractSetup = async () => {\n  const provider = getProvider();\n  if (!provider) {\n    throw new Error(\"Provider not available\");\n  }\n  try {\n    // Get network info\n    const network = await provider.getNetwork();\n    const isCorrectNetwork = Number(network.chainId) === TARGET_NETWORK_ID;\n\n    // Get EventManager contract\n    const eventManager = await getEventManagerContract(true);\n    if (!eventManager) {\n      throw new Error(\"Could not get EventManager contract\");\n    }\n\n    // Get TicketNFT address\n    const ticketNFTAddress = await eventManager.ticketNFT();\n    return {\n      eventManagerAddress: await eventManager.getAddress(),\n      ticketNFTAddress,\n      network: network.name,\n      isCorrectNetwork\n    };\n  } catch (error) {\n    console.error(\"Error verifying contract setup:\", error);\n    throw error;\n  }\n};\n\n// Test function to verify contract setup\nexport const testContractSetup = async () => {\n  try {\n    const setup = await verifyContractSetup();\n    console.log(\"Contract Setup:\", setup);\n    return setup;\n  } catch (error) {\n    console.error(\"Setup verification failed:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["ethers","parseEther","toast","EventManagerJson","TicketNFTJson","CONTRACT_ADDRESS","process","env","REACT_APP_CONTRACT_ADDRESS","TARGET_NETWORK_ID","parseInt","REACT_APP_TARGET_NETWORK_ID","TARGET_NETWORK_NAME","REACT_APP_TARGET_NETWORK_NAME","console","warn","error","EVENT_MANAGER_ABI","abi","TICKET_NFT_ABI","Error","length","getProvider","window","ethereum","BrowserProvider","getSigner","provider","accounts","send","getEventManagerContract","readOnly","signer","Contract","getTicketNFTContract","_eventManager$ticketN","_eventManager$getTick","_eventManager$nftCont","TICKET_NFT_ADDRESS","REACT_APP_TICKET_NFT_ADDRESS","eventManager","ticketNFTAddress","ticketNFT","call","getTicketNFT","nftContract","connectWallet","address","getAddress","checkNetwork","isCorrect","currentNetwork","network","getNetwork","chainId","Number","name","switchNetwork","request","method","params","hexlify","toString","code","chainName","nativeCurrency","symbol","decimals","rpcUrls","REACT_APP_RPC_URL","addError","buyTicket","tokenURI","qrHash","outsider","priceInEther","contract","_receipt$transactionH","value","log","tx","receipt","wait","transactionHash","_error$data","reason","data","message","getMyTickets","userAddress","filterTo","filters","Transfer","filterFrom","transferEventsTo","queryFilter","transferEventsFrom","ownedTokenIds","Map","forEach","event","args","tokenId","set","delete","finalOwnedIds","Array","from","keys","resellTicket","_receipt$transactionH2","sellTicketBack","debugContractInterface","fragments","interface","functionNames","filter","frag","type","map","getEventDetails","_contract$isActive","_contract$eventActive","_contract$maxTickets","_contract$ticketCount","debug","active","maxTickets","currentTickets","Promise","all","isActive","eventActive","ticketCount","description","startDate","endDate","ticketPrice","ticketPriceInsider","ticketPriceOutsider","getTokenMetadataURI","uri","getAvailableTickets","countBN","count","ids","promises","i","push","issuedTickets","results","tokenIdBN","getQRHash","verifyContractSetup","isCorrectNetwork","eventManagerAddress","testContractSetup","setup"],"sources":["C:/Users/negis/OneDrive/Desktop/new project/blockfest-ui/src/utils/blockchain.ts"],"sourcesContent":["// src/utils/blockchain.ts\n\nimport { ethers, parseEther } from 'ethers';\nimport { BigNumberish } from 'ethers';\nimport { toast } from 'react-hot-toast';\nimport { EventDetails } from '../types/global';\n// Import only the ABI property from the JSON file\nimport EventManagerJson from '../abi/EventManager.json';\nimport TicketNFTJson from '../abi/TicketNFT.json';\n\n// Define types\ninterface TicketData {\n    tokenId: number;\n    tokenURI: string;\n    qrHash: string;\n    owner: string;\n}\n\n// --- Configuration ---\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || '0x0000000000000000000000000000000000000000';\nconst TARGET_NETWORK_ID = parseInt(process.env.REACT_APP_TARGET_NETWORK_ID || '11155111', 10);\nconst TARGET_NETWORK_NAME = process.env.REACT_APP_TARGET_NETWORK_NAME || 'Sepolia Testnet';\n\nif (CONTRACT_ADDRESS === '0x0000000000000000000000000000000000000000') {\n    console.warn('Contract address not configured. Please set REACT_APP_CONTRACT_ADDRESS in your .env file.');\n    toast.error('Contract address not configured. Please set it in your .env file.');\n}\n\n// --- ABIs ---\n// IMPORTANT: Paste your ACTUAL compiled ABIs!\n\nexport const EVENT_MANAGER_ABI = EventManagerJson.abi;\nexport const TICKET_NFT_ABI = TicketNFTJson.abi;\n\n// --- Configuration ---\n\n// Basic validation\nif (!CONTRACT_ADDRESS) {\n    throw new Error('REACT_APP_CONTRACT_ADDRESS environment variable is required');\n}\nif (!TARGET_NETWORK_ID) console.error(\"REACT_APP_TARGET_NETWORK_ID not set.\");\nif (EVENT_MANAGER_ABI.length === 0) console.error(\"EVENT_MANAGER_ABI is empty.\");\nif (TICKET_NFT_ABI.length === 0) console.error(\"TICKET_NFT_ABI is empty.\");\n\ninterface NetworkInfo { chainId: number; name: string; }\n\n// --- Helper Functions ---\nconst getProvider = (): ethers.BrowserProvider | null => {\n    if (typeof window.ethereum === 'undefined') {\n        console.error('MetaMask not detected');\n        return null;\n    }\n    return new ethers.BrowserProvider(window.ethereum);\n};\n\nconst getSigner = async (provider: ethers.BrowserProvider): Promise<ethers.Signer | null> => {\n    try {\n        const accounts = await provider.send('eth_requestAccounts', []);\n        if (accounts.length === 0) return null;\n        return provider.getSigner(accounts[0]);\n    } catch (error) {\n        console.error('Failed to get signer:', error);\n        return null;\n    }\n};\n\nconst getEventManagerContract = async (readOnly = false): Promise<ethers.Contract | null> => {\n    const provider = getProvider();\n    if (!provider) return null;\n\n    const signer = readOnly ? provider : await getSigner(provider);\n    if (!signer) return null;\n\n    return new ethers.Contract(CONTRACT_ADDRESS, EVENT_MANAGER_ABI, signer);\n};\n\nconst getTicketNFTContract = async (readOnly = false): Promise<ethers.Contract | null> => {\n    const provider = getProvider();\n    if (!provider) return null;\n\n    const signer = readOnly ? provider : await getSigner(provider);\n    if (!signer) return null;\n\n    try {\n        // If we have a hardcoded TicketNFT address, use it directly\n        const TICKET_NFT_ADDRESS = process.env.REACT_APP_TICKET_NFT_ADDRESS;\n        if (TICKET_NFT_ADDRESS) {\n            return new ethers.Contract(TICKET_NFT_ADDRESS, TICKET_NFT_ABI, signer);\n        }\n\n        // Otherwise try to get it from EventManager\n        const eventManager = await getEventManagerContract(true);\n        if (!eventManager) return null;\n\n        // Try different possible function names\n        const ticketNFTAddress = await eventManager.ticketNFT?.() || \n                               await eventManager.getTicketNFT?.() || \n                               await eventManager.nftContract?.();\n\n        if (!ticketNFTAddress) {\n            console.error(\"Could not get TicketNFT address from EventManager\");\n            return null;\n        }\n\n        return new ethers.Contract(ticketNFTAddress, TICKET_NFT_ABI, signer);\n    } catch (error) {\n        console.error('Failed to get TicketNFT contract:', error);\n        return null;\n    }\n};\n\n// --- Core Blockchain Functions ---\nexport const connectWallet = async (): Promise<string | null> => {\n    const provider = getProvider();\n    if (!provider) return null;\n    \n    const signer = await getSigner(provider);\n    if (!signer) return null;\n\n    const address = await signer.getAddress();\n    return address;\n};\nexport const checkNetwork = async (): Promise<{ isCorrect: boolean; currentNetwork: NetworkInfo | null }> => {\n    const provider = getProvider();\n    if (!provider) return { isCorrect: false, currentNetwork: null };\n\n    try {\n        const network = await provider.getNetwork();\n        const currentNetwork: NetworkInfo = {\n            chainId: Number(network.chainId),\n            name: network.name\n        };\n\n        return {\n            isCorrect: Number(network.chainId) === TARGET_NETWORK_ID,\n            currentNetwork\n        };\n    } catch (error) {\n        console.error('Error checking network:', error);\n        return { isCorrect: false, currentNetwork: null };\n    }\n};\nexport const switchNetwork = async (): Promise<boolean> => {\n    if (typeof window.ethereum === 'undefined') {\n        console.error('MetaMask not detected');\n        return false;\n    }\n\n    try {\n        await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: ethers.hexlify(TARGET_NETWORK_ID.toString()) }]\n        });\n        return true;\n    } catch (error: any) {\n        if (error.code === 4902) {\n            try {\n                await window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                        chainId: ethers.hexlify(TARGET_NETWORK_ID.toString()),\n                        chainName: TARGET_NETWORK_NAME,\n                        nativeCurrency: {\n                            name: 'ETH',\n                            symbol: 'ETH',\n                            decimals: 18\n                        },\n                        rpcUrls: [process.env.REACT_APP_RPC_URL || '']\n                    }]\n                });\n                return true;\n            } catch (addError) {\n                console.error('Error adding network:', addError);\n                return false;\n            }\n        }\n        console.error('Error switching network:', error);\n        return false;\n    }\n};\n\n// Corrected buyTicket\nexport const buyTicket = async (\n    tokenURI: string,\n    qrHash: string,\n    outsider: boolean,\n    priceInEther: string\n): Promise<string | null> => {\n    const contract = await getEventManagerContract(false); // EventManager handles buying\n    if (!contract) throw new Error(\"EventManager Contract not available.\");\n    if (!priceInEther) throw new Error(\"Price is required to buy ticket.\");\n\n    try {\n        const value = parseEther(priceInEther);\n        console.log(`Calling contract.buyTicket with URI: ${tokenURI}, QR: ${qrHash}, Outsider: ${outsider}, Value: ${value.toString()}`);\n        const tx = await contract.buyTicket(tokenURI, qrHash, outsider, { value });\n        const receipt = await tx.wait();\n        console.log(`Transaction Confirmed: ${receipt?.transactionHash}`);\n        return receipt?.transactionHash ?? null;\n    } catch (error: any) {\n        console.error(\"Buy Ticket Error:\", error);\n        const reason = error.reason || error?.data?.message || error.message || 'Unknown error';\n        if (error.code === 4001) throw new Error('Transaction rejected.');\n        throw new Error(`Purchase Failed: ${reason}`);\n    }\n};\n\n// --- *** CORRECTED getMyTickets using Event Querying *** ---\nexport const getMyTickets = async (userAddress: string): Promise<number[]> => {\n    if (!userAddress) return [];\n\n    const provider = getProvider();\n    const nftContract = await getTicketNFTContract(true); // Get read-only NFT contract\n\n    if (!provider || !nftContract) {\n        console.error(\"getMyTickets: Could not get Provider or TicketNFT contract instance.\");\n        throw new Error(\"Failed to connect to NFT contract.\");\n    }\n\n    try {\n        console.log(`Querying Transfer events for recipient ${userAddress} on contract ${await nftContract.getAddress()}`);\n\n        // Define the Transfer event filter - transfers TO the userAddress\n        const filterTo = nftContract.filters.Transfer(null, userAddress);\n        // Define the Transfer event filter - transfers FROM the userAddress\n        const filterFrom = nftContract.filters.Transfer(userAddress);\n\n        // Query events (adjust block range as needed for performance - 'earliest' can be slow)\n        // Consider storing the last queried block number locally and starting from there.\n        const transferEventsTo = await nftContract.queryFilter(filterTo, 'earliest', 'latest');\n        const transferEventsFrom = await nftContract.queryFilter(filterFrom, 'earliest', 'latest');\n\n        console.log(`Found ${transferEventsTo.length} Transfer(to) events`);\n        console.log(`Found ${transferEventsFrom.length} Transfer(from) events`);\n\n        // Process events to determine current ownership\n        const ownedTokenIds = new Map<number, boolean>();\n\n        // Add tokens transferred TO the user\n        transferEventsTo.forEach((event: any) => {\n            if (event.args && event.args.tokenId) {\n                ownedTokenIds.set(Number(event.args.tokenId), true); // Mark as potentially owned\n            }\n        });\n\n        // Remove tokens transferred FROM the user\n        transferEventsFrom.forEach((event: any) => {\n            if (event.args && event.args.tokenId) {\n                ownedTokenIds.delete(Number(event.args.tokenId)); // Remove if transferred away\n            }\n        });\n\n        const finalOwnedIds = Array.from(ownedTokenIds.keys());\n        console.log(\"Final calculated owned ticket IDs:\", finalOwnedIds);\n        return finalOwnedIds;\n\n    } catch (error: any) {\n        console.error(\"Error querying Transfer events in getMyTickets:\", error);\n        throw new Error(\"Failed to fetch owned tickets via event query.\");\n    }\n};\n\n// Corrected resellTicket (uses EventManager)\nexport const resellTicket = async (tokenId: number): Promise<string | null> => {\n    const contract = await getEventManagerContract(false);\n    if (!contract) throw new Error(\"EventManager Contract not available.\");\n\n    try {\n        const tx = await contract.sellTicketBack(tokenId);\n        const receipt = await tx.wait();\n        return receipt?.transactionHash ?? null;\n    } catch (error: any) {\n        console.error(\"Error reselling ticket:\", error);\n        throw new Error(error.message);\n    }\n};\n\n// Fix debugContractInterface\nexport const debugContractInterface = async () => {\n    const provider = getProvider();\n    if (!provider) {\n        console.error(\"Provider not available\");\n        return;\n    }\n\n    try {\n        const eventManager = await getEventManagerContract(true);\n        if (!eventManager) {\n            console.error(\"Could not get EventManager contract\");\n            return;\n        }\n\n        // Get the contract address\n        const address = await eventManager.getAddress();\n        console.log(\"Contract address:\", address);\n\n        // Get all function names (ethers v6)\n        const fragments = eventManager.interface.fragments;\n        const functionNames = fragments\n            .filter(frag => frag.type === \"function\")\n            .map(frag => frag.name);\n        console.log(\"Available functions:\", functionNames);\n\n        return {\n            address,\n            functionNames\n        };\n    } catch (error) {\n        console.error(\"Error debugging contract:\", error);\n        throw error;\n    }\n};\n\n// Update getEventDetails to use the correct function names\nexport const getEventDetails = async (): Promise<EventDetails | null> => {\n    const contract = await getEventManagerContract(true);\n    if (!contract) return null;\n\n    try {\n        // First, let's debug what functions are available\n        const debug = await debugContractInterface();\n        console.log(\"Contract debug info:\", debug);\n\n        // Try to get basic info first\n        const [active, maxTickets, currentTickets] = await Promise.all([\n            contract.isActive?.() || contract.eventActive?.(), // Try both possible function names\n            contract.maxTickets?.(),\n            contract.ticketCount?.()\n        ]);\n\n        return {\n            isActive: active || false,\n            maxTickets: Number(maxTickets || 0),\n            currentTickets: Number(currentTickets || 0),\n            name: \"BlockFest Event\",\n            description: \"BlockFest Event Description\",\n            startDate: \"TBD\",\n            endDate: \"TBD\",\n            ticketPrice: \"0\",\n            ticketPriceInsider: \"0\",\n            ticketPriceOutsider: \"0\"\n        };\n    } catch (error) {\n        console.error(\"Error getting event details:\", error);\n        return null;\n    }\n};\n\n// Corrected getTokenMetadataURI (uses TicketNFT)\nexport const getTokenMetadataURI = async (tokenId: number): Promise<string | null> => {\n    const contract = await getTicketNFTContract(true);\n    if (!contract) return null;\n\n    try {\n        const uri = await contract.tokenURI(tokenId);\n        return uri;\n    } catch (error) {\n        console.error(`Error getting token URI for ${tokenId}:`, error);\n        return null;\n    }\n};\n\n// --- Updated getAvailableTickets (fetches ALL issued IDs) ---\nexport const getAvailableTickets = async (): Promise<number[]> => {\n    const contract = await getEventManagerContract(true);\n    if (!contract) return [];\n\n    try {\n        const countBN = await contract.ticketCount();\n        const count = Number(countBN);\n        if (count === 0) return [];\n\n        console.log(`Total tickets issued: ${count}. Fetching IDs...`);\n        const ids: number[] = [];\n        const promises: Promise<BigNumberish>[] = [];\n\n        for (let i = 0; i < count; i++) {\n            promises.push(contract.issuedTickets(i));\n        }\n\n        const results = await Promise.all(promises) as BigNumberish[];\n        results.forEach((tokenIdBN: BigNumberish) => {\n            ids.push(Number(tokenIdBN));\n        });\n\n        console.log(\"All issued ticket IDs fetched:\", ids);\n        return ids;\n\n    } catch (error) {\n        console.error(\"Error getting available/issued tickets:\", error);\n        toast.error(\"Could not retrieve list of issued tickets.\");\n        return [];\n    }\n};\n\n// Corrected getQRHash (uses TicketNFT)\nexport const getQRHash = async (tokenId: number): Promise<string | null> => {\n    const nftContract = await getTicketNFTContract(true);\n    if (!nftContract) return null;\n    try {\n        // Ensure TICKET_NFT_ABI includes getQRHash\n        const qrHash = await nftContract.getQRHash(tokenId);\n        return qrHash;\n    } catch (error: any) {\n        console.error(`Error getting QR Hash for token ${tokenId}:`, error.message);\n        return null;\n    }\n};\n\nexport const verifyContractSetup = async (): Promise<{ \n    eventManagerAddress: string, \n    ticketNFTAddress: string | null,\n    network: string,\n    isCorrectNetwork: boolean \n}> => {\n    const provider = getProvider();\n    if (!provider) {\n        throw new Error(\"Provider not available\");\n    }\n\n    try {\n        // Get network info\n        const network = await provider.getNetwork();\n        const isCorrectNetwork = Number(network.chainId) === TARGET_NETWORK_ID;\n\n        // Get EventManager contract\n        const eventManager = await getEventManagerContract(true);\n        if (!eventManager) {\n            throw new Error(\"Could not get EventManager contract\");\n        }\n\n        // Get TicketNFT address\n        const ticketNFTAddress = await eventManager.ticketNFT();\n\n        return {\n            eventManagerAddress: await eventManager.getAddress(),\n            ticketNFTAddress,\n            network: network.name,\n            isCorrectNetwork\n        };\n    } catch (error) {\n        console.error(\"Error verifying contract setup:\", error);\n        throw error;\n    }\n};\n\n// Test function to verify contract setup\nexport const testContractSetup = async () => {\n    try {\n        const setup = await verifyContractSetup();\n        console.log(\"Contract Setup:\", setup);\n        return setup;\n    } catch (error) {\n        console.error(\"Setup verification failed:\", error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}